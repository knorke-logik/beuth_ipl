
exampleProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ca0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08008e28  08008e28  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08008e28  08008e28  00018e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08008e2c  08008e2c  00018e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000060  20000000  08008e30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
  7 .bss          0000001c  20000060  20000060  00020060  2**2
                  ALLOC
  8 ._user_heap_stack 00000080  2000007c  2000007c  00020060  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 10 .debug_line   000035e6  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   000093a5  00000000  00000000  00023676  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000018bd  00000000  00000000  0002ca1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000228  00000000  00000000  0002e2d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000020  00000000  00000000  0002e500  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004211  00000000  00000000  0002e520  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00032731  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003b10  00000000  00000000  000327b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000060 	.word	0x20000060
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008e0c 	.word	0x08008e0c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000064 	.word	0x20000064
 80001c4:	08008e0c 	.word	0x08008e0c
 80001c8:	08008e30 	.word	0x08008e30
 80001cc:	20000000 	.word	0x20000000
 80001d0:	20000060 	.word	0x20000060
 80001d4:	20000060 	.word	0x20000060
 80001d8:	2000007c 	.word	0x2000007c

080001dc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001e0:	4a1f      	ldr	r2, [pc, #124]	; (8000260 <SystemInit+0x84>)
 80001e2:	4b1f      	ldr	r3, [pc, #124]	; (8000260 <SystemInit+0x84>)
 80001e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001f0:	4a1c      	ldr	r2, [pc, #112]	; (8000264 <SystemInit+0x88>)
 80001f2:	4b1c      	ldr	r3, [pc, #112]	; (8000264 <SystemInit+0x88>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	f043 0301 	orr.w	r3, r3, #1
 80001fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 80001fc:	4919      	ldr	r1, [pc, #100]	; (8000264 <SystemInit+0x88>)
 80001fe:	4b19      	ldr	r3, [pc, #100]	; (8000264 <SystemInit+0x88>)
 8000200:	685a      	ldr	r2, [r3, #4]
 8000202:	4b19      	ldr	r3, [pc, #100]	; (8000268 <SystemInit+0x8c>)
 8000204:	4013      	ands	r3, r2
 8000206:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000208:	4a16      	ldr	r2, [pc, #88]	; (8000264 <SystemInit+0x88>)
 800020a:	4b16      	ldr	r3, [pc, #88]	; (8000264 <SystemInit+0x88>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000216:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000218:	4a12      	ldr	r2, [pc, #72]	; (8000264 <SystemInit+0x88>)
 800021a:	4b12      	ldr	r3, [pc, #72]	; (8000264 <SystemInit+0x88>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000222:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000224:	4a0f      	ldr	r2, [pc, #60]	; (8000264 <SystemInit+0x88>)
 8000226:	4b0f      	ldr	r3, [pc, #60]	; (8000264 <SystemInit+0x88>)
 8000228:	685b      	ldr	r3, [r3, #4]
 800022a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800022e:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8000230:	4a0c      	ldr	r2, [pc, #48]	; (8000264 <SystemInit+0x88>)
 8000232:	4b0c      	ldr	r3, [pc, #48]	; (8000264 <SystemInit+0x88>)
 8000234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000236:	f023 030f 	bic.w	r3, r3, #15
 800023a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 800023c:	4909      	ldr	r1, [pc, #36]	; (8000264 <SystemInit+0x88>)
 800023e:	4b09      	ldr	r3, [pc, #36]	; (8000264 <SystemInit+0x88>)
 8000240:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000242:	4b0a      	ldr	r3, [pc, #40]	; (800026c <SystemInit+0x90>)
 8000244:	4013      	ands	r3, r2
 8000246:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000248:	4b06      	ldr	r3, [pc, #24]	; (8000264 <SystemInit+0x88>)
 800024a:	2200      	movs	r2, #0
 800024c:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800024e:	f000 f87b 	bl	8000348 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000252:	4b03      	ldr	r3, [pc, #12]	; (8000260 <SystemInit+0x84>)
 8000254:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000258:	609a      	str	r2, [r3, #8]
#endif  
}
 800025a:	bf00      	nop
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	e000ed00 	.word	0xe000ed00
 8000264:	40021000 	.word	0x40021000
 8000268:	f87fc00c 	.word	0xf87fc00c
 800026c:	ff00fccc 	.word	0xff00fccc

08000270 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0;
 8000276:	2300      	movs	r3, #0
 8000278:	60fb      	str	r3, [r7, #12]
 800027a:	2300      	movs	r3, #0
 800027c:	60bb      	str	r3, [r7, #8]
 800027e:	2300      	movs	r3, #0
 8000280:	607b      	str	r3, [r7, #4]
 8000282:	2300      	movs	r3, #0
 8000284:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000286:	4b2b      	ldr	r3, [pc, #172]	; (8000334 <SystemCoreClockUpdate+0xc4>)
 8000288:	685b      	ldr	r3, [r3, #4]
 800028a:	f003 030c 	and.w	r3, r3, #12
 800028e:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	2b04      	cmp	r3, #4
 8000294:	d007      	beq.n	80002a6 <SystemCoreClockUpdate+0x36>
 8000296:	2b08      	cmp	r3, #8
 8000298:	d009      	beq.n	80002ae <SystemCoreClockUpdate+0x3e>
 800029a:	2b00      	cmp	r3, #0
 800029c:	d12f      	bne.n	80002fe <SystemCoreClockUpdate+0x8e>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 800029e:	4b26      	ldr	r3, [pc, #152]	; (8000338 <SystemCoreClockUpdate+0xc8>)
 80002a0:	4a26      	ldr	r2, [pc, #152]	; (800033c <SystemCoreClockUpdate+0xcc>)
 80002a2:	601a      	str	r2, [r3, #0]
      break;
 80002a4:	e02f      	b.n	8000306 <SystemCoreClockUpdate+0x96>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80002a6:	4b24      	ldr	r3, [pc, #144]	; (8000338 <SystemCoreClockUpdate+0xc8>)
 80002a8:	4a24      	ldr	r2, [pc, #144]	; (800033c <SystemCoreClockUpdate+0xcc>)
 80002aa:	601a      	str	r2, [r3, #0]
      break;
 80002ac:	e02b      	b.n	8000306 <SystemCoreClockUpdate+0x96>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80002ae:	4b21      	ldr	r3, [pc, #132]	; (8000334 <SystemCoreClockUpdate+0xc4>)
 80002b0:	685b      	ldr	r3, [r3, #4]
 80002b2:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80002b6:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80002b8:	4b1e      	ldr	r3, [pc, #120]	; (8000334 <SystemCoreClockUpdate+0xc4>)
 80002ba:	685b      	ldr	r3, [r3, #4]
 80002bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002c0:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 80002c2:	68bb      	ldr	r3, [r7, #8]
 80002c4:	0c9b      	lsrs	r3, r3, #18
 80002c6:	3302      	adds	r3, #2
 80002c8:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d106      	bne.n	80002de <SystemCoreClockUpdate+0x6e>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 80002d0:	68bb      	ldr	r3, [r7, #8]
 80002d2:	4a1b      	ldr	r2, [pc, #108]	; (8000340 <SystemCoreClockUpdate+0xd0>)
 80002d4:	fb02 f303 	mul.w	r3, r2, r3
 80002d8:	4a17      	ldr	r2, [pc, #92]	; (8000338 <SystemCoreClockUpdate+0xc8>)
 80002da:	6013      	str	r3, [r2, #0]
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
      }      
      break;
 80002dc:	e013      	b.n	8000306 <SystemCoreClockUpdate+0x96>
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 80002de:	4b15      	ldr	r3, [pc, #84]	; (8000334 <SystemCoreClockUpdate+0xc4>)
 80002e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002e2:	f003 030f 	and.w	r3, r3, #15
 80002e6:	3301      	adds	r3, #1
 80002e8:	603b      	str	r3, [r7, #0]
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 80002ea:	4a14      	ldr	r2, [pc, #80]	; (800033c <SystemCoreClockUpdate+0xcc>)
 80002ec:	683b      	ldr	r3, [r7, #0]
 80002ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80002f2:	68ba      	ldr	r2, [r7, #8]
 80002f4:	fb02 f303 	mul.w	r3, r2, r3
 80002f8:	4a0f      	ldr	r2, [pc, #60]	; (8000338 <SystemCoreClockUpdate+0xc8>)
 80002fa:	6013      	str	r3, [r2, #0]
      break;
 80002fc:	e003      	b.n	8000306 <SystemCoreClockUpdate+0x96>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80002fe:	4b0e      	ldr	r3, [pc, #56]	; (8000338 <SystemCoreClockUpdate+0xc8>)
 8000300:	4a0e      	ldr	r2, [pc, #56]	; (800033c <SystemCoreClockUpdate+0xcc>)
 8000302:	601a      	str	r2, [r3, #0]
      break;
 8000304:	bf00      	nop
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000306:	4b0b      	ldr	r3, [pc, #44]	; (8000334 <SystemCoreClockUpdate+0xc4>)
 8000308:	685b      	ldr	r3, [r3, #4]
 800030a:	091b      	lsrs	r3, r3, #4
 800030c:	f003 030f 	and.w	r3, r3, #15
 8000310:	4a0c      	ldr	r2, [pc, #48]	; (8000344 <SystemCoreClockUpdate+0xd4>)
 8000312:	5cd3      	ldrb	r3, [r2, r3]
 8000314:	b2db      	uxtb	r3, r3
 8000316:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8000318:	4b07      	ldr	r3, [pc, #28]	; (8000338 <SystemCoreClockUpdate+0xc8>)
 800031a:	681a      	ldr	r2, [r3, #0]
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	fa22 f303 	lsr.w	r3, r2, r3
 8000322:	4a05      	ldr	r2, [pc, #20]	; (8000338 <SystemCoreClockUpdate+0xc8>)
 8000324:	6013      	str	r3, [r2, #0]
}
 8000326:	bf00      	nop
 8000328:	3714      	adds	r7, #20
 800032a:	46bd      	mov	sp, r7
 800032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop
 8000334:	40021000 	.word	0x40021000
 8000338:	20000004 	.word	0x20000004
 800033c:	007a1200 	.word	0x007a1200
 8000340:	003d0900 	.word	0x003d0900
 8000344:	20000008 	.word	0x20000008

08000348 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800034e:	2300      	movs	r3, #0
 8000350:	607b      	str	r3, [r7, #4]
 8000352:	2300      	movs	r3, #0
 8000354:	603b      	str	r3, [r7, #0]
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration -----------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000356:	4a33      	ldr	r2, [pc, #204]	; (8000424 <SetSysClock+0xdc>)
 8000358:	4b32      	ldr	r3, [pc, #200]	; (8000424 <SetSysClock+0xdc>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000360:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000362:	4b30      	ldr	r3, [pc, #192]	; (8000424 <SetSysClock+0xdc>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800036a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	3301      	adds	r3, #1
 8000370:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	2b00      	cmp	r3, #0
 8000376:	d103      	bne.n	8000380 <SetSysClock+0x38>
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800037e:	d1f0      	bne.n	8000362 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000380:	4b28      	ldr	r3, [pc, #160]	; (8000424 <SetSysClock+0xdc>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000388:	2b00      	cmp	r3, #0
 800038a:	d002      	beq.n	8000392 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800038c:	2301      	movs	r3, #1
 800038e:	603b      	str	r3, [r7, #0]
 8000390:	e001      	b.n	8000396 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000392:	2300      	movs	r3, #0
 8000394:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000396:	683b      	ldr	r3, [r7, #0]
 8000398:	2b01      	cmp	r3, #1
 800039a:	d13c      	bne.n	8000416 <SetSysClock+0xce>
  {
    /* Enable Prefetch Buffer and set Flash Latency */
    FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 800039c:	4b22      	ldr	r3, [pc, #136]	; (8000428 <SetSysClock+0xe0>)
 800039e:	2212      	movs	r2, #18
 80003a0:	601a      	str	r2, [r3, #0]
 
     /* HCLK = SYSCLK / 1 */
     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80003a2:	4a20      	ldr	r2, [pc, #128]	; (8000424 <SetSysClock+0xdc>)
 80003a4:	4b1f      	ldr	r3, [pc, #124]	; (8000424 <SetSysClock+0xdc>)
 80003a6:	685b      	ldr	r3, [r3, #4]
 80003a8:	6053      	str	r3, [r2, #4]
       
     /* PCLK2 = HCLK / 1 */
     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80003aa:	4a1e      	ldr	r2, [pc, #120]	; (8000424 <SetSysClock+0xdc>)
 80003ac:	4b1d      	ldr	r3, [pc, #116]	; (8000424 <SetSysClock+0xdc>)
 80003ae:	685b      	ldr	r3, [r3, #4]
 80003b0:	6053      	str	r3, [r2, #4]
     
     /* PCLK1 = HCLK / 2 */
     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80003b2:	4a1c      	ldr	r2, [pc, #112]	; (8000424 <SetSysClock+0xdc>)
 80003b4:	4b1b      	ldr	r3, [pc, #108]	; (8000424 <SetSysClock+0xdc>)
 80003b6:	685b      	ldr	r3, [r3, #4]
 80003b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003bc:	6053      	str	r3, [r2, #4]

    /* PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 80003be:	4a19      	ldr	r2, [pc, #100]	; (8000424 <SetSysClock+0xdc>)
 80003c0:	4b18      	ldr	r3, [pc, #96]	; (8000424 <SetSysClock+0xdc>)
 80003c2:	685b      	ldr	r3, [r3, #4]
 80003c4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80003c8:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL9);
 80003ca:	4a16      	ldr	r2, [pc, #88]	; (8000424 <SetSysClock+0xdc>)
 80003cc:	4b15      	ldr	r3, [pc, #84]	; (8000424 <SetSysClock+0xdc>)
 80003ce:	685b      	ldr	r3, [r3, #4]
 80003d0:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80003d4:	6053      	str	r3, [r2, #4]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80003d6:	4a13      	ldr	r2, [pc, #76]	; (8000424 <SetSysClock+0xdc>)
 80003d8:	4b12      	ldr	r3, [pc, #72]	; (8000424 <SetSysClock+0xdc>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003e0:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80003e2:	bf00      	nop
 80003e4:	4b0f      	ldr	r3, [pc, #60]	; (8000424 <SetSysClock+0xdc>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d0f9      	beq.n	80003e4 <SetSysClock+0x9c>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80003f0:	4a0c      	ldr	r2, [pc, #48]	; (8000424 <SetSysClock+0xdc>)
 80003f2:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <SetSysClock+0xdc>)
 80003f4:	685b      	ldr	r3, [r3, #4]
 80003f6:	f023 0303 	bic.w	r3, r3, #3
 80003fa:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 80003fc:	4a09      	ldr	r2, [pc, #36]	; (8000424 <SetSysClock+0xdc>)
 80003fe:	4b09      	ldr	r3, [pc, #36]	; (8000424 <SetSysClock+0xdc>)
 8000400:	685b      	ldr	r3, [r3, #4]
 8000402:	f043 0302 	orr.w	r3, r3, #2
 8000406:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8000408:	bf00      	nop
 800040a:	4b06      	ldr	r3, [pc, #24]	; (8000424 <SetSysClock+0xdc>)
 800040c:	685b      	ldr	r3, [r3, #4]
 800040e:	f003 030c 	and.w	r3, r3, #12
 8000412:	2b08      	cmp	r3, #8
 8000414:	d1f9      	bne.n	800040a <SetSysClock+0xc2>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
 8000416:	bf00      	nop
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	40021000 	.word	0x40021000
 8000428:	40022000 	.word	0x40022000

0800042c <DAC_DeInit>:
  * @brief  Deinitializes the DAC peripheral registers to their default reset values.
  * @param  DACx: where x can be 1 or 2 to select the DAC peripheral.  
  * @retval None
  */
void DAC_DeInit(DAC_TypeDef* DACx)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_ALL_PERIPH(DACx));

  if (DACx == DAC1)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	4a0e      	ldr	r2, [pc, #56]	; (8000470 <DAC_DeInit+0x44>)
 8000438:	4293      	cmp	r3, r2
 800043a:	d10a      	bne.n	8000452 <DAC_DeInit+0x26>
  {
    /* Enable DAC1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC1, ENABLE);
 800043c:	2101      	movs	r1, #1
 800043e:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8000442:	f006 f8c3 	bl	80065cc <RCC_APB1PeriphResetCmd>
    /* Release DAC1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC1, DISABLE);
 8000446:	2100      	movs	r1, #0
 8000448:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800044c:	f006 f8be 	bl	80065cc <RCC_APB1PeriphResetCmd>
    /* Enable DAC2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC2, ENABLE);
    /* Release DAC2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC2, DISABLE);
  }
}
 8000450:	e009      	b.n	8000466 <DAC_DeInit+0x3a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC2, ENABLE);
 8000452:	2101      	movs	r1, #1
 8000454:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000458:	f006 f8b8 	bl	80065cc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC2, DISABLE);
 800045c:	2100      	movs	r1, #0
 800045e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000462:	f006 f8b3 	bl	80065cc <RCC_APB1PeriphResetCmd>
}
 8000466:	bf00      	nop
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	40007400 	.word	0x40007400

08000474 <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that
  *         contains the configuration information for the specified DAC channel.
  * @retval None
  */
void DAC_Init(DAC_TypeDef* DACx, uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 8000474:	b480      	push	{r7}
 8000476:	b087      	sub	sp, #28
 8000478:	af00      	add	r7, sp, #0
 800047a:	60f8      	str	r0, [r7, #12]
 800047c:	60b9      	str	r1, [r7, #8]
 800047e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000480:	2300      	movs	r3, #0
 8000482:	617b      	str	r3, [r7, #20]
 8000484:	2300      	movs	r3, #0
 8000486:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_BUFFER_SWITCH_STATE(DAC_InitStruct->DAC_Buffer_Switch));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DACx->CR;
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 800048e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000492:	68bb      	ldr	r3, [r7, #8]
 8000494:	fa02 f303 	lsl.w	r3, r2, r3
 8000498:	43db      	mvns	r3, r3
 800049a:	697a      	ldr	r2, [r7, #20]
 800049c:	4013      	ands	r3, r2
 800049e:	617b      	str	r3, [r7, #20]
  
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx OUTENx bit according to DAC_Buffer_Switch value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681a      	ldr	r2, [r3, #0]
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	685b      	ldr	r3, [r3, #4]
 80004a8:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | DAC_InitStruct->DAC_Buffer_Switch);   
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	689b      	ldr	r3, [r3, #8]
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 80004ae:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | DAC_InitStruct->DAC_Buffer_Switch);   
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	68db      	ldr	r3, [r3, #12]
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 80004b4:	4313      	orrs	r3, r2
 80004b6:	613b      	str	r3, [r7, #16]
                   
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 80004b8:	693a      	ldr	r2, [r7, #16]
 80004ba:	68bb      	ldr	r3, [r7, #8]
 80004bc:	fa02 f303 	lsl.w	r3, r2, r3
 80004c0:	697a      	ldr	r2, [r7, #20]
 80004c2:	4313      	orrs	r3, r2
 80004c4:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  DACx->CR = tmpreg1;
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	697a      	ldr	r2, [r7, #20]
 80004ca:	601a      	str	r2, [r3, #0]
}
 80004cc:	bf00      	nop
 80004ce:	371c      	adds	r7, #28
 80004d0:	46bd      	mov	sp, r7
 80004d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d6:	4770      	bx	lr

080004d8 <DAC_StructInit>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
/*--------------- Reset DAC init structure parameters values -----------------*/
  /* Initialize the DAC_Trigger member */
  DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
  /* Initialize the DAC_WaveGeneration member */
  DAC_InitStruct->DAC_WaveGeneration = DAC_WaveGeneration_None;
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	2200      	movs	r2, #0
 80004ea:	605a      	str	r2, [r3, #4]
  /* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
  DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2200      	movs	r2, #0
 80004f0:	609a      	str	r2, [r3, #8]
  /* Initialize the DAC_Buffer_Switch member */
  DAC_InitStruct->DAC_Buffer_Switch = DAC_BufferSwitch_Enable;
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	2202      	movs	r2, #2
 80004f6:	60da      	str	r2, [r3, #12]
}
 80004f8:	bf00      	nop
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr

08000504 <DAC_Cmd>:
  * @note   When the DAC channel is enabled the trigger source can no more
  *         be modified.
  * @retval None
  */
void DAC_Cmd(DAC_TypeDef* DACx, uint32_t DAC_Channel, FunctionalState NewState)
{
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	60b9      	str	r1, [r7, #8]
 800050e:	4613      	mov	r3, r2
 8000510:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DAC_ALL_PERIPH(DACx));
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d009      	beq.n	800052c <DAC_Cmd+0x28>
  {
    /* Enable the selected DAC channel */
    DACx->CR |= (DAC_CR_EN1 << DAC_Channel);
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	681a      	ldr	r2, [r3, #0]
 800051c:	2101      	movs	r1, #1
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	fa01 f303 	lsl.w	r3, r1, r3
 8000524:	431a      	orrs	r2, r3
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DAC channel */
    DACx->CR &= (~(DAC_CR_EN1 << DAC_Channel));
  }
}
 800052a:	e009      	b.n	8000540 <DAC_Cmd+0x3c>
    DACx->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	2101      	movs	r1, #1
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	fa01 f303 	lsl.w	r3, r1, r3
 8000538:	43db      	mvns	r3, r3
 800053a:	401a      	ands	r2, r3
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	601a      	str	r2, [r3, #0]
}
 8000540:	bf00      	nop
 8000542:	3714      	adds	r7, #20
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr

0800054c <DAC_SoftwareTriggerCmd>:
  * @param  NewState: new state of the selected DAC channel software trigger.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_SoftwareTriggerCmd(DAC_TypeDef* DACx, uint32_t DAC_Channel, FunctionalState NewState)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	60f8      	str	r0, [r7, #12]
 8000554:	60b9      	str	r1, [r7, #8]
 8000556:	4613      	mov	r3, r2
 8000558:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DAC_ALL_PERIPH(DACx));
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d00a      	beq.n	8000576 <DAC_SoftwareTriggerCmd+0x2a>
  {
    /* Enable software trigger for the selected DAC channel */
    DACx->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	685a      	ldr	r2, [r3, #4]
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	091b      	lsrs	r3, r3, #4
 8000568:	2101      	movs	r1, #1
 800056a:	fa01 f303 	lsl.w	r3, r1, r3
 800056e:	431a      	orrs	r2, r3
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable software trigger for the selected DAC channel */
    DACx->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
  }
}
 8000574:	e00a      	b.n	800058c <DAC_SoftwareTriggerCmd+0x40>
    DACx->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	685a      	ldr	r2, [r3, #4]
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	091b      	lsrs	r3, r3, #4
 800057e:	2101      	movs	r1, #1
 8000580:	fa01 f303 	lsl.w	r3, r1, r3
 8000584:	43db      	mvns	r3, r3
 8000586:	401a      	ands	r2, r3
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	605a      	str	r2, [r3, #4]
}
 800058c:	bf00      	nop
 800058e:	3714      	adds	r7, #20
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <DAC_DualSoftwareTriggerCmd>:
  * @param  NewState: new state of the DAC channels software triggers.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_DualSoftwareTriggerCmd(DAC_TypeDef* DACx, FunctionalState NewState)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	460b      	mov	r3, r1
 80005a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_LIST1_PERIPH(DACx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80005a4:	78fb      	ldrb	r3, [r7, #3]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d006      	beq.n	80005b8 <DAC_DualSoftwareTriggerCmd+0x20>
  {
    /* Enable software trigger for both DAC channels */
    DACx->SWTRIGR |= DUAL_SWTRIG_SET;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	f043 0203 	orr.w	r2, r3, #3
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable software trigger for both DAC channels */
    DACx->SWTRIGR &= DUAL_SWTRIG_RESET;
  }
}
 80005b6:	e005      	b.n	80005c4 <DAC_DualSoftwareTriggerCmd+0x2c>
    DACx->SWTRIGR &= DUAL_SWTRIG_RESET;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	f023 0203 	bic.w	r2, r3, #3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	605a      	str	r2, [r3, #4]
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <DAC_WaveGenerationCmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   
  * @retval None
  */
void DAC_WaveGenerationCmd(DAC_TypeDef* DACx, uint32_t DAC_Channel, uint32_t DAC_Wave, FunctionalState NewState)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]
 80005dc:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_DAC_LIST1_PERIPH(DACx));
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_WAVE(DAC_Wave)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80005de:	78fb      	ldrb	r3, [r7, #3]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d009      	beq.n	80005f8 <DAC_WaveGenerationCmd+0x28>
  {
    /* Enable the selected wave generation for the selected DAC channel */
    DACx->CR |= DAC_Wave << DAC_Channel;
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	6879      	ldr	r1, [r7, #4]
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	fa01 f303 	lsl.w	r3, r1, r3
 80005f0:	431a      	orrs	r2, r3
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected wave generation for the selected DAC channel */
    DACx->CR &= ~(DAC_Wave << DAC_Channel);
  }
}
 80005f6:	e009      	b.n	800060c <DAC_WaveGenerationCmd+0x3c>
    DACx->CR &= ~(DAC_Wave << DAC_Channel);
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	6879      	ldr	r1, [r7, #4]
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	fa01 f303 	lsl.w	r3, r1, r3
 8000604:	43db      	mvns	r3, r3
 8000606:	401a      	ands	r2, r3
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	601a      	str	r2, [r3, #0]
}
 800060c:	bf00      	nop
 800060e:	3714      	adds	r7, #20
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(DAC_TypeDef* DACx, uint32_t DAC_Align, uint16_t Data)
{  
 8000618:	b480      	push	{r7}
 800061a:	b087      	sub	sp, #28
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	4613      	mov	r3, r2
 8000624:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmp = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_ALL_PERIPH(DACx));
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DACx; 
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	617b      	str	r3, [r7, #20]
  tmp += DHR12R1_OFFSET + DAC_Align;
 800062e:	697a      	ldr	r2, [r7, #20]
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	4413      	add	r3, r2
 8000634:	3308      	adds	r3, #8
 8000636:	617b      	str	r3, [r7, #20]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	461a      	mov	r2, r3
 800063c:	88fb      	ldrh	r3, [r7, #6]
 800063e:	6013      	str	r3, [r2, #0]
}
 8000640:	bf00      	nop
 8000642:	371c      	adds	r7, #28
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <DAC_SetChannel2Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data : Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel2Data(DAC_TypeDef* DACx, uint32_t DAC_Align, uint16_t Data)
{
 800064c:	b480      	push	{r7}
 800064e:	b087      	sub	sp, #28
 8000650:	af00      	add	r7, sp, #0
 8000652:	60f8      	str	r0, [r7, #12]
 8000654:	60b9      	str	r1, [r7, #8]
 8000656:	4613      	mov	r3, r2
 8000658:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmp = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_LIST1_PERIPH(DACx));
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DACx;
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	617b      	str	r3, [r7, #20]
  tmp += DHR12R2_OFFSET + DAC_Align;
 8000662:	697a      	ldr	r2, [r7, #20]
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	4413      	add	r3, r2
 8000668:	3314      	adds	r3, #20
 800066a:	617b      	str	r3, [r7, #20]

  /* Set the DAC channel2 selected data holding register */
  *(__IO uint32_t *)tmp = Data;
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	461a      	mov	r2, r3
 8000670:	88fb      	ldrh	r3, [r7, #6]
 8000672:	6013      	str	r3, [r2, #0]
}
 8000674:	bf00      	nop
 8000676:	371c      	adds	r7, #28
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <DAC_SetDualChannelData>:
  * @note In dual mode, a unique register access is required to write in both
  *       DAC channels at the same time.
  * @retval None
  */
void DAC_SetDualChannelData(DAC_TypeDef* DACx, uint32_t DAC_Align, uint16_t Data2, uint16_t Data1)
{
 8000680:	b480      	push	{r7}
 8000682:	b087      	sub	sp, #28
 8000684:	af00      	add	r7, sp, #0
 8000686:	60f8      	str	r0, [r7, #12]
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	4611      	mov	r1, r2
 800068c:	461a      	mov	r2, r3
 800068e:	460b      	mov	r3, r1
 8000690:	80fb      	strh	r3, [r7, #6]
 8000692:	4613      	mov	r3, r2
 8000694:	80bb      	strh	r3, [r7, #4]
  uint32_t data = 0, tmp = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	617b      	str	r3, [r7, #20]
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));
  
  /* Calculate and set dual DAC data holding register value */
  if (DAC_Align == DAC_Align_8b_R)
 800069e:	68bb      	ldr	r3, [r7, #8]
 80006a0:	2b08      	cmp	r3, #8
 80006a2:	d105      	bne.n	80006b0 <DAC_SetDualChannelData+0x30>
  {
    data = ((uint32_t)Data2 << 8) | Data1; 
 80006a4:	88fb      	ldrh	r3, [r7, #6]
 80006a6:	021a      	lsls	r2, r3, #8
 80006a8:	88bb      	ldrh	r3, [r7, #4]
 80006aa:	4313      	orrs	r3, r2
 80006ac:	617b      	str	r3, [r7, #20]
 80006ae:	e004      	b.n	80006ba <DAC_SetDualChannelData+0x3a>
  }
  else
  {
    data = ((uint32_t)Data2 << 16) | Data1;
 80006b0:	88fb      	ldrh	r3, [r7, #6]
 80006b2:	041a      	lsls	r2, r3, #16
 80006b4:	88bb      	ldrh	r3, [r7, #4]
 80006b6:	4313      	orrs	r3, r2
 80006b8:	617b      	str	r3, [r7, #20]
  }
  
  tmp = (uint32_t)DACx;
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	613b      	str	r3, [r7, #16]
  tmp += DHR12RD_OFFSET + DAC_Align;
 80006be:	68ba      	ldr	r2, [r7, #8]
 80006c0:	693b      	ldr	r3, [r7, #16]
 80006c2:	4413      	add	r3, r2
 80006c4:	3320      	adds	r3, #32
 80006c6:	613b      	str	r3, [r7, #16]

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 80006c8:	693b      	ldr	r3, [r7, #16]
 80006ca:	697a      	ldr	r2, [r7, #20]
 80006cc:	601a      	str	r2, [r3, #0]
}
 80006ce:	bf00      	nop
 80006d0:	371c      	adds	r7, #28
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr

080006da <DAC_GetDataOutputValue>:
  *            @arg DAC_Channel_1: DAC Channel1 selected
  *            @arg DAC_Channel_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint16_t DAC_GetDataOutputValue(DAC_TypeDef* DACx, uint32_t DAC_Channel)
{
 80006da:	b480      	push	{r7}
 80006dc:	b085      	sub	sp, #20
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
 80006e2:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALL_PERIPH(DACx));
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  
  tmp = (uint32_t) DACx;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	60fb      	str	r3, [r7, #12]
  tmp += DOR_OFFSET + ((uint32_t)DAC_Channel >> 2);
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	089a      	lsrs	r2, r3, #2
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	4413      	add	r3, r2
 80006f4:	332c      	adds	r3, #44	; 0x2c
 80006f6:	60fb      	str	r3, [r7, #12]
  
  /* Returns the DAC channel data output register value */
  return (uint16_t) (*(__IO uint32_t*) tmp);
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	b29b      	uxth	r3, r3
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3714      	adds	r7, #20
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr

0800070a <DAC_DMACmd>:
  * @note The DAC channel1 (channel2) is mapped on DMA1 channel3 (channel4) which 
  *       must be already configured. 
  * @retval None
  */
void DAC_DMACmd(DAC_TypeDef* DACx, uint32_t DAC_Channel, FunctionalState NewState)
{
 800070a:	b480      	push	{r7}
 800070c:	b085      	sub	sp, #20
 800070e:	af00      	add	r7, sp, #0
 8000710:	60f8      	str	r0, [r7, #12]
 8000712:	60b9      	str	r1, [r7, #8]
 8000714:	4613      	mov	r3, r2
 8000716:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DAC_ALL_PERIPH(DACx));
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d00a      	beq.n	8000734 <DAC_DMACmd+0x2a>
  {
    /* Enable the selected DAC channel DMA request */
    DACx->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	fa01 f303 	lsl.w	r3, r1, r3
 800072c:	431a      	orrs	r2, r3
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DAC channel DMA request */
    DACx->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
  }
}
 8000732:	e00a      	b.n	800074a <DAC_DMACmd+0x40>
    DACx->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	fa01 f303 	lsl.w	r3, r1, r3
 8000742:	43db      	mvns	r3, r3
 8000744:	401a      	ands	r2, r3
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	601a      	str	r2, [r3, #0]
}
 800074a:	bf00      	nop
 800074c:	3714      	adds	r7, #20
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr

08000756 <DAC_ITConfig>:
  * @param  NewState: new state of the specified DAC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */ 
void DAC_ITConfig(DAC_TypeDef* DACx, uint32_t DAC_Channel, uint32_t DAC_IT, FunctionalState NewState)  
{
 8000756:	b480      	push	{r7}
 8000758:	b085      	sub	sp, #20
 800075a:	af00      	add	r7, sp, #0
 800075c:	60f8      	str	r0, [r7, #12]
 800075e:	60b9      	str	r1, [r7, #8]
 8000760:	607a      	str	r2, [r7, #4]
 8000762:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_DAC_ALL_PERIPH(DACx));
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_DAC_IT(DAC_IT)); 

  if (NewState != DISABLE)
 8000764:	78fb      	ldrb	r3, [r7, #3]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d009      	beq.n	800077e <DAC_ITConfig+0x28>
  {
    /* Enable the selected DAC interrupts */
    DACx->CR |=  (DAC_IT << DAC_Channel);
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	6879      	ldr	r1, [r7, #4]
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	fa01 f303 	lsl.w	r3, r1, r3
 8000776:	431a      	orrs	r2, r3
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DAC interrupts */
    DACx->CR &= (~(uint32_t)(DAC_IT << DAC_Channel));
  }
}
 800077c:	e009      	b.n	8000792 <DAC_ITConfig+0x3c>
    DACx->CR &= (~(uint32_t)(DAC_IT << DAC_Channel));
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	6879      	ldr	r1, [r7, #4]
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	fa01 f303 	lsl.w	r3, r1, r3
 800078a:	43db      	mvns	r3, r3
 800078c:	401a      	ands	r2, r3
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	601a      	str	r2, [r3, #0]
}
 8000792:	bf00      	nop
 8000794:	3714      	adds	r7, #20
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr

0800079e <DAC_GetFlagStatus>:
  * @note   The DMA underrun occurs when a second external trigger arrives before
  *         the acknowledgement for the first external trigger is received (first request).
  * @retval The new state of DAC_FLAG (SET or RESET).
  */
FlagStatus DAC_GetFlagStatus(DAC_TypeDef* DACx, uint32_t DAC_Channel, uint32_t DAC_FLAG)
{
 800079e:	b480      	push	{r7}
 80007a0:	b087      	sub	sp, #28
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	60f8      	str	r0, [r7, #12]
 80007a6:	60b9      	str	r1, [r7, #8]
 80007a8:	607a      	str	r2, [r7, #4]
  FlagStatus bitstatus = RESET;
 80007aa:	2300      	movs	r3, #0
 80007ac:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DAC_ALL_PERIPH(DACx));
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Check the status of the specified DAC flag */
  if ((DACx->SR & (DAC_FLAG << DAC_Channel)) != (uint8_t)RESET)
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007b2:	6879      	ldr	r1, [r7, #4]
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ba:	4013      	ands	r3, r2
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d002      	beq.n	80007c6 <DAC_GetFlagStatus+0x28>
  {
    /* DAC_FLAG is set */
    bitstatus = SET;
 80007c0:	2301      	movs	r3, #1
 80007c2:	75fb      	strb	r3, [r7, #23]
 80007c4:	e001      	b.n	80007ca <DAC_GetFlagStatus+0x2c>
  }
  else
  {
    /* DAC_FLAG is reset */
    bitstatus = RESET;
 80007c6:	2300      	movs	r3, #0
 80007c8:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the DAC_FLAG status */
  return  bitstatus;
 80007ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	371c      	adds	r7, #28
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <DAC_ClearFlag>:
  *          This parameter can be:
  *            @arg DAC_FLAG_DMAUDR: DMA underrun flag                          
  * @retval None
  */
void DAC_ClearFlag(DAC_TypeDef* DACx, uint32_t DAC_Channel, uint32_t DAC_FLAG)
{
 80007d8:	b480      	push	{r7}
 80007da:	b085      	sub	sp, #20
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_ALL_PERIPH(DACx));
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Clear the selected DAC flags */
  DACx->SR = (DAC_FLAG << DAC_Channel);
 80007e4:	687a      	ldr	r2, [r7, #4]
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	409a      	lsls	r2, r3
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	635a      	str	r2, [r3, #52]	; 0x34
}
 80007ee:	bf00      	nop
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr

080007fa <DAC_GetITStatus>:
  * @note   The DMA underrun occurs when a second external trigger arrives before
  *         the acknowledgement for the first external trigger is received (first request).
  * @retval The new state of DAC_IT (SET or RESET).
  */
ITStatus DAC_GetITStatus(DAC_TypeDef* DACx, uint32_t DAC_Channel, uint32_t DAC_IT)
{
 80007fa:	b480      	push	{r7}
 80007fc:	b087      	sub	sp, #28
 80007fe:	af00      	add	r7, sp, #0
 8000800:	60f8      	str	r0, [r7, #12]
 8000802:	60b9      	str	r1, [r7, #8]
 8000804:	607a      	str	r2, [r7, #4]
  ITStatus bitstatus = RESET;
 8000806:	2300      	movs	r3, #0
 8000808:	75fb      	strb	r3, [r7, #23]
  uint32_t enablestatus = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_ALL_PERIPH(DACx));
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT));

  /* Get the DAC_IT enable bit status */
  enablestatus = (DACx->CR & (DAC_IT << DAC_Channel)) ;
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	6879      	ldr	r1, [r7, #4]
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	fa01 f303 	lsl.w	r3, r1, r3
 800081a:	4013      	ands	r3, r2
 800081c:	613b      	str	r3, [r7, #16]
  
  /* Check the status of the specified DAC interrupt */
  if (((DACx->SR & (DAC_IT << DAC_Channel)) != (uint32_t)RESET) && enablestatus)
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000822:	6879      	ldr	r1, [r7, #4]
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	fa01 f303 	lsl.w	r3, r1, r3
 800082a:	4013      	ands	r3, r2
 800082c:	2b00      	cmp	r3, #0
 800082e:	d005      	beq.n	800083c <DAC_GetITStatus+0x42>
 8000830:	693b      	ldr	r3, [r7, #16]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d002      	beq.n	800083c <DAC_GetITStatus+0x42>
  {
    /* DAC_IT is set */
    bitstatus = SET;
 8000836:	2301      	movs	r3, #1
 8000838:	75fb      	strb	r3, [r7, #23]
 800083a:	e001      	b.n	8000840 <DAC_GetITStatus+0x46>
  }
  else
  {
    /* DAC_IT is reset */
    bitstatus = RESET;
 800083c:	2300      	movs	r3, #0
 800083e:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the DAC_IT status */
  return  bitstatus;
 8000840:	7dfb      	ldrb	r3, [r7, #23]
}
 8000842:	4618      	mov	r0, r3
 8000844:	371c      	adds	r7, #28
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr

0800084e <DAC_ClearITPendingBit>:
  *          This parameter can be the following values:
  *            @arg DAC_IT_DMAUDR: DMA underrun interrupt mask
  * @retval None
  */
void DAC_ClearITPendingBit(DAC_TypeDef* DACx, uint32_t DAC_Channel, uint32_t DAC_IT)
{
 800084e:	b480      	push	{r7}
 8000850:	b085      	sub	sp, #20
 8000852:	af00      	add	r7, sp, #0
 8000854:	60f8      	str	r0, [r7, #12]
 8000856:	60b9      	str	r1, [r7, #8]
 8000858:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_ALL_PERIPH(DACx));
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT)); 

  /* Clear the selected DAC interrupt pending bits */
  DACx->SR = (DAC_IT << DAC_Channel);
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	409a      	lsls	r2, r3
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000864:	bf00      	nop
 8000866:	3714      	adds	r7, #20
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <EXTI_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  EXTI->IMR    = 0x1F800000;
 8000874:	4b15      	ldr	r3, [pc, #84]	; (80008cc <EXTI_DeInit+0x5c>)
 8000876:	f04f 52fc 	mov.w	r2, #528482304	; 0x1f800000
 800087a:	601a      	str	r2, [r3, #0]
  EXTI->EMR    = 0x00000000;
 800087c:	4b13      	ldr	r3, [pc, #76]	; (80008cc <EXTI_DeInit+0x5c>)
 800087e:	2200      	movs	r2, #0
 8000880:	605a      	str	r2, [r3, #4]
  EXTI->RTSR   = 0x00000000;
 8000882:	4b12      	ldr	r3, [pc, #72]	; (80008cc <EXTI_DeInit+0x5c>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  EXTI->FTSR   = 0x00000000;
 8000888:	4b10      	ldr	r3, [pc, #64]	; (80008cc <EXTI_DeInit+0x5c>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  EXTI->SWIER  = 0x00000000;
 800088e:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <EXTI_DeInit+0x5c>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  EXTI->PR     = 0xE07FFFFF;
 8000894:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <EXTI_DeInit+0x5c>)
 8000896:	f06f 52fc 	mvn.w	r2, #528482304	; 0x1f800000
 800089a:	615a      	str	r2, [r3, #20]
  EXTI->IMR2   = 0x0000000C;
 800089c:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <EXTI_DeInit+0x5c>)
 800089e:	220c      	movs	r2, #12
 80008a0:	621a      	str	r2, [r3, #32]
  EXTI->EMR2   = 0x00000000;
 80008a2:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <EXTI_DeInit+0x5c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	625a      	str	r2, [r3, #36]	; 0x24
  EXTI->RTSR2  = 0x00000000;
 80008a8:	4b08      	ldr	r3, [pc, #32]	; (80008cc <EXTI_DeInit+0x5c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	629a      	str	r2, [r3, #40]	; 0x28
  EXTI->FTSR2  = 0x00000000;
 80008ae:	4b07      	ldr	r3, [pc, #28]	; (80008cc <EXTI_DeInit+0x5c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	62da      	str	r2, [r3, #44]	; 0x2c
  EXTI->SWIER2 = 0x00000000;
 80008b4:	4b05      	ldr	r3, [pc, #20]	; (80008cc <EXTI_DeInit+0x5c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	631a      	str	r2, [r3, #48]	; 0x30
  EXTI->PR2    = 0x00000003;
 80008ba:	4b04      	ldr	r3, [pc, #16]	; (80008cc <EXTI_DeInit+0x5c>)
 80008bc:	2203      	movs	r2, #3
 80008be:	635a      	str	r2, [r3, #52]	; 0x34
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	40010400 	.word	0x40010400

080008d0 <EXTI_Init>:
  * @retval None
  */
  

void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE_ALL(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 80008dc:	4b76      	ldr	r3, [pc, #472]	; (8000ab8 <EXTI_Init+0x1e8>)
 80008de:	60fb      	str	r3, [r7, #12]
      
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	799b      	ldrb	r3, [r3, #6]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	f000 80c8 	beq.w	8000a7a <EXTI_Init+0x1aa>
  {
    /* Clear EXTI line configuration */   
    *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));   
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	095b      	lsrs	r3, r3, #5
 80008f0:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80008f4:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 80008f8:	015b      	lsls	r3, r3, #5
 80008fa:	4618      	mov	r0, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	095b      	lsrs	r3, r3, #5
 8000902:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8000906:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800090a:	015b      	lsls	r3, r3, #5
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f003 031f 	and.w	r3, r3, #31
 8000916:	2101      	movs	r1, #1
 8000918:	fa01 f303 	lsl.w	r3, r1, r3
 800091c:	43db      	mvns	r3, r3
 800091e:	4013      	ands	r3, r2
 8000920:	6003      	str	r3, [r0, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->EMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	095b      	lsrs	r3, r3, #5
 8000928:	015a      	lsls	r2, r3, #5
 800092a:	4b64      	ldr	r3, [pc, #400]	; (8000abc <EXTI_Init+0x1ec>)
 800092c:	4413      	add	r3, r2
 800092e:	4618      	mov	r0, r3
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	095b      	lsrs	r3, r3, #5
 8000936:	015a      	lsls	r2, r3, #5
 8000938:	4b60      	ldr	r3, [pc, #384]	; (8000abc <EXTI_Init+0x1ec>)
 800093a:	4413      	add	r3, r2
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f003 031f 	and.w	r3, r3, #31
 8000946:	2101      	movs	r1, #1
 8000948:	fa01 f303 	lsl.w	r3, r1, r3
 800094c:	43db      	mvns	r3, r3
 800094e:	4013      	ands	r3, r2
 8000950:	6003      	str	r3, [r0, #0]
     
    tmp += EXTI_InitStruct->EXTI_Mode + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	791b      	ldrb	r3, [r3, #4]
 8000956:	461a      	mov	r2, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	095b      	lsrs	r3, r3, #5
 800095e:	015b      	lsls	r3, r3, #5
 8000960:	4413      	add	r3, r2
 8000962:	68fa      	ldr	r2, [r7, #12]
 8000964:	4413      	add	r3, r2
 8000966:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	68fa      	ldr	r2, [r7, #12]
 800096c:	6812      	ldr	r2, [r2, #0]
 800096e:	6879      	ldr	r1, [r7, #4]
 8000970:	6809      	ldr	r1, [r1, #0]
 8000972:	f001 011f 	and.w	r1, r1, #31
 8000976:	2001      	movs	r0, #1
 8000978:	fa00 f101 	lsl.w	r1, r0, r1
 800097c:	430a      	orrs	r2, r1
 800097e:	601a      	str	r2, [r3, #0]
    
    tmp = (uint32_t)EXTI_BASE;
 8000980:	4b4d      	ldr	r3, [pc, #308]	; (8000ab8 <EXTI_Init+0x1e8>)
 8000982:	60fb      	str	r3, [r7, #12]

    /* Clear Rising Falling edge configuration */
    *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	095b      	lsrs	r3, r3, #5
 800098a:	015a      	lsls	r2, r3, #5
 800098c:	4b4c      	ldr	r3, [pc, #304]	; (8000ac0 <EXTI_Init+0x1f0>)
 800098e:	4413      	add	r3, r2
 8000990:	4618      	mov	r0, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	095b      	lsrs	r3, r3, #5
 8000998:	015a      	lsls	r2, r3, #5
 800099a:	4b49      	ldr	r3, [pc, #292]	; (8000ac0 <EXTI_Init+0x1f0>)
 800099c:	4413      	add	r3, r2
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f003 031f 	and.w	r3, r3, #31
 80009a8:	2101      	movs	r1, #1
 80009aa:	fa01 f303 	lsl.w	r3, r1, r3
 80009ae:	43db      	mvns	r3, r3
 80009b0:	4013      	ands	r3, r2
 80009b2:	6003      	str	r3, [r0, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	095b      	lsrs	r3, r3, #5
 80009ba:	015a      	lsls	r2, r3, #5
 80009bc:	4b41      	ldr	r3, [pc, #260]	; (8000ac4 <EXTI_Init+0x1f4>)
 80009be:	4413      	add	r3, r2
 80009c0:	4618      	mov	r0, r3
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	095b      	lsrs	r3, r3, #5
 80009c8:	015a      	lsls	r2, r3, #5
 80009ca:	4b3e      	ldr	r3, [pc, #248]	; (8000ac4 <EXTI_Init+0x1f4>)
 80009cc:	4413      	add	r3, r2
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f003 031f 	and.w	r3, r3, #31
 80009d8:	2101      	movs	r1, #1
 80009da:	fa01 f303 	lsl.w	r3, r1, r3
 80009de:	43db      	mvns	r3, r3
 80009e0:	4013      	ands	r3, r2
 80009e2:	6003      	str	r3, [r0, #0]
    
      /* Select the trigger for the selected interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	795b      	ldrb	r3, [r3, #5]
 80009e8:	2b10      	cmp	r3, #16
 80009ea:	d12e      	bne.n	8000a4a <EXTI_Init+0x17a>
    {
      /* Rising Falling edge */
    *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	095b      	lsrs	r3, r3, #5
 80009f2:	015a      	lsls	r2, r3, #5
 80009f4:	4b32      	ldr	r3, [pc, #200]	; (8000ac0 <EXTI_Init+0x1f0>)
 80009f6:	4413      	add	r3, r2
 80009f8:	4618      	mov	r0, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	095b      	lsrs	r3, r3, #5
 8000a00:	015a      	lsls	r2, r3, #5
 8000a02:	4b2f      	ldr	r3, [pc, #188]	; (8000ac0 <EXTI_Init+0x1f0>)
 8000a04:	4413      	add	r3, r2
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	687a      	ldr	r2, [r7, #4]
 8000a0a:	6812      	ldr	r2, [r2, #0]
 8000a0c:	f002 021f 	and.w	r2, r2, #31
 8000a10:	2101      	movs	r1, #1
 8000a12:	fa01 f202 	lsl.w	r2, r1, r2
 8000a16:	4313      	orrs	r3, r2
 8000a18:	6003      	str	r3, [r0, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));      
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	095b      	lsrs	r3, r3, #5
 8000a20:	015a      	lsls	r2, r3, #5
 8000a22:	4b28      	ldr	r3, [pc, #160]	; (8000ac4 <EXTI_Init+0x1f4>)
 8000a24:	4413      	add	r3, r2
 8000a26:	4618      	mov	r0, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	095b      	lsrs	r3, r3, #5
 8000a2e:	015a      	lsls	r2, r3, #5
 8000a30:	4b24      	ldr	r3, [pc, #144]	; (8000ac4 <EXTI_Init+0x1f4>)
 8000a32:	4413      	add	r3, r2
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	6812      	ldr	r2, [r2, #0]
 8000a3a:	f002 021f 	and.w	r2, r2, #31
 8000a3e:	2101      	movs	r1, #1
 8000a40:	fa01 f202 	lsl.w	r2, r1, r2
 8000a44:	4313      	orrs	r3, r2
 8000a46:	6003      	str	r3, [r0, #0]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
  }
         
}
 8000a48:	e02f      	b.n	8000aaa <EXTI_Init+0x1da>
      tmp += EXTI_InitStruct->EXTI_Trigger + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	795b      	ldrb	r3, [r3, #5]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	095b      	lsrs	r3, r3, #5
 8000a56:	015b      	lsls	r3, r3, #5
 8000a58:	4413      	add	r3, r2
 8000a5a:	68fa      	ldr	r2, [r7, #12]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	68fa      	ldr	r2, [r7, #12]
 8000a64:	6812      	ldr	r2, [r2, #0]
 8000a66:	6879      	ldr	r1, [r7, #4]
 8000a68:	6809      	ldr	r1, [r1, #0]
 8000a6a:	f001 011f 	and.w	r1, r1, #31
 8000a6e:	2001      	movs	r0, #1
 8000a70:	fa00 f101 	lsl.w	r1, r0, r1
 8000a74:	430a      	orrs	r2, r1
 8000a76:	601a      	str	r2, [r3, #0]
}
 8000a78:	e017      	b.n	8000aaa <EXTI_Init+0x1da>
    tmp += EXTI_InitStruct->EXTI_Mode + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	791b      	ldrb	r3, [r3, #4]
 8000a7e:	461a      	mov	r2, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	095b      	lsrs	r3, r3, #5
 8000a86:	015b      	lsls	r3, r3, #5
 8000a88:	4413      	add	r3, r2
 8000a8a:	68fa      	ldr	r2, [r7, #12]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	68fa      	ldr	r2, [r7, #12]
 8000a94:	6811      	ldr	r1, [r2, #0]
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	6812      	ldr	r2, [r2, #0]
 8000a9a:	f002 021f 	and.w	r2, r2, #31
 8000a9e:	2001      	movs	r0, #1
 8000aa0:	fa00 f202 	lsl.w	r2, r0, r2
 8000aa4:	43d2      	mvns	r2, r2
 8000aa6:	400a      	ands	r2, r1
 8000aa8:	601a      	str	r2, [r3, #0]
}
 8000aaa:	bf00      	nop
 8000aac:	3714      	adds	r7, #20
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	40010400 	.word	0x40010400
 8000abc:	40010404 	.word	0x40010404
 8000ac0:	40010408 	.word	0x40010408
 8000ac4:	4001040c 	.word	0x4001040c

08000ac8 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2200      	movs	r2, #0
 8000ada:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2210      	movs	r2, #16
 8000ae0:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	719a      	strb	r2, [r3, #6]
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <EXTI_GenerateSWInterrupt>:
  *         will be generated.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE_EXT(EXTI_Line));

  *(__IO uint32_t *) (((uint32_t) &(EXTI->SWIER)) + ((EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_Line & 0x1F));
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	095b      	lsrs	r3, r3, #5
 8000b00:	015a      	lsls	r2, r3, #5
 8000b02:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <EXTI_GenerateSWInterrupt+0x3c>)
 8000b04:	4413      	add	r3, r2
 8000b06:	4618      	mov	r0, r3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	095b      	lsrs	r3, r3, #5
 8000b0c:	015a      	lsls	r2, r3, #5
 8000b0e:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <EXTI_GenerateSWInterrupt+0x3c>)
 8000b10:	4413      	add	r3, r2
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	f002 021f 	and.w	r2, r2, #31
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b20:	4313      	orrs	r3, r2
 8000b22:	6003      	str	r3, [r0, #0]

}
 8000b24:	bf00      	nop
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	40010410 	.word	0x40010410

08000b34 <EXTI_GetFlagStatus>:
  * @param  EXTI_Line: specifies the EXTI line flag to check.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval The new state of EXTI_Line (SET or RESET).                  
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
   
  if ((*(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + ((EXTI_Line) >> 5 ) * 0x20)& (uint32_t)(1 << (EXTI_Line & 0x1F))) != (uint32_t)RESET)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	095b      	lsrs	r3, r3, #5
 8000b44:	015a      	lsls	r2, r3, #5
 8000b46:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <EXTI_GetFlagStatus+0x44>)
 8000b48:	4413      	add	r3, r2
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	f002 021f 	and.w	r2, r2, #31
 8000b52:	2101      	movs	r1, #1
 8000b54:	fa01 f202 	lsl.w	r2, r1, r2
 8000b58:	4013      	ands	r3, r2
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d002      	beq.n	8000b64 <EXTI_GetFlagStatus+0x30>
  {
    bitstatus = SET;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	73fb      	strb	r3, [r7, #15]
 8000b62:	e001      	b.n	8000b68 <EXTI_GetFlagStatus+0x34>
  }
  else
  {
    bitstatus = RESET;
 8000b64:	2300      	movs	r3, #0
 8000b66:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3714      	adds	r7, #20
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	40010414 	.word	0x40010414

08000b7c <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE_EXT(EXTI_Line));

  *(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + ((EXTI_Line) >> 5 ) * 0x20) = (1 << (EXTI_Line & 0x1F));  
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	095b      	lsrs	r3, r3, #5
 8000b88:	015a      	lsls	r2, r3, #5
 8000b8a:	4b08      	ldr	r3, [pc, #32]	; (8000bac <EXTI_ClearFlag+0x30>)
 8000b8c:	4413      	add	r3, r2
 8000b8e:	4619      	mov	r1, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f003 031f 	and.w	r3, r3, #31
 8000b96:	2201      	movs	r2, #1
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	600b      	str	r3, [r1, #0]
}
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	40010414 	.word	0x40010414

08000bb0 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((*(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + ((EXTI_Line) >> 5 ) * 0x20)& (uint32_t)(1 << (EXTI_Line & 0x1F))) != (uint32_t)RESET)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	095b      	lsrs	r3, r3, #5
 8000bc0:	015a      	lsls	r2, r3, #5
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <EXTI_GetITStatus+0x44>)
 8000bc4:	4413      	add	r3, r2
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	f002 021f 	and.w	r2, r2, #31
 8000bce:	2101      	movs	r1, #1
 8000bd0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d002      	beq.n	8000be0 <EXTI_GetITStatus+0x30>
  {
    bitstatus = SET;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	73fb      	strb	r3, [r7, #15]
 8000bde:	e001      	b.n	8000be4 <EXTI_GetITStatus+0x34>
  }
  else
  {
    bitstatus = RESET;
 8000be0:	2300      	movs	r3, #0
 8000be2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000be4:	7bfb      	ldrb	r3, [r7, #15]
  
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3714      	adds	r7, #20
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	40010414 	.word	0x40010414

08000bf8 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE_EXT(EXTI_Line));
  
  *(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + ((EXTI_Line) >> 5 ) * 0x20) = (1 << (EXTI_Line & 0x1F));
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	095b      	lsrs	r3, r3, #5
 8000c04:	015a      	lsls	r2, r3, #5
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <EXTI_ClearITPendingBit+0x30>)
 8000c08:	4413      	add	r3, r2
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f003 031f 	and.w	r3, r3, #31
 8000c12:	2201      	movs	r2, #1
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	600b      	str	r3, [r1, #0]
}
 8000c1a:	bf00      	nop
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	40010414 	.word	0x40010414

08000c2c <FLASH_SetLatency>:
  *            @arg FLASH_Latency_1: FLASH One Latency cycle
  *            @arg FLASH_Latency_2: FLASH Two Latency cycles      
  * @retval None
  */
void FLASH_SetLatency(uint32_t FLASH_Latency)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
   uint32_t tmpreg = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Read the ACR register */
  tmpreg = FLASH->ACR;  
 8000c38:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <FLASH_SetLatency+0x34>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	60fb      	str	r3, [r7, #12]
  
  /* Sets the Latency value */
  tmpreg &= (uint32_t) (~((uint32_t)FLASH_ACR_LATENCY));
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	f023 0303 	bic.w	r3, r3, #3
 8000c44:	60fb      	str	r3, [r7, #12]
  tmpreg |= FLASH_Latency;
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	60fb      	str	r3, [r7, #12]
  
  /* Write the ACR register */
  FLASH->ACR = tmpreg;
 8000c4e:	4a04      	ldr	r2, [pc, #16]	; (8000c60 <FLASH_SetLatency+0x34>)
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	6013      	str	r3, [r2, #0]
}
 8000c54:	bf00      	nop
 8000c56:	3714      	adds	r7, #20
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	40022000 	.word	0x40022000

08000c64 <FLASH_HalfCycleAccessCmd>:
  *            @arg FLASH_HalfCycleAccess_Enable: FLASH Half Cycle Enable
  *            @arg FLASH_HalfCycleAccess_Disable: FLASH Half Cycle Disable
  * @retval None
  */
void FLASH_HalfCycleAccessCmd(FunctionalState NewState)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
   
  if(NewState != DISABLE)
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d006      	beq.n	8000c82 <FLASH_HalfCycleAccessCmd+0x1e>
  {
    FLASH->ACR |= FLASH_ACR_HLFCYA;
 8000c74:	4a09      	ldr	r2, [pc, #36]	; (8000c9c <FLASH_HalfCycleAccessCmd+0x38>)
 8000c76:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <FLASH_HalfCycleAccessCmd+0x38>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f043 0308 	orr.w	r3, r3, #8
 8000c7e:	6013      	str	r3, [r2, #0]
  }
  else
  {
    FLASH->ACR &= (uint32_t)(~((uint32_t)FLASH_ACR_HLFCYA));
  }
}
 8000c80:	e005      	b.n	8000c8e <FLASH_HalfCycleAccessCmd+0x2a>
    FLASH->ACR &= (uint32_t)(~((uint32_t)FLASH_ACR_HLFCYA));
 8000c82:	4a06      	ldr	r2, [pc, #24]	; (8000c9c <FLASH_HalfCycleAccessCmd+0x38>)
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <FLASH_HalfCycleAccessCmd+0x38>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f023 0308 	bic.w	r3, r3, #8
 8000c8c:	6013      	str	r3, [r2, #0]
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	40022000 	.word	0x40022000

08000ca0 <FLASH_PrefetchBufferCmd>:
  * @param  NewState: new state of the Prefetch Buffer.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_PrefetchBufferCmd(FunctionalState NewState)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
   
  if(NewState != DISABLE)
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d006      	beq.n	8000cbe <FLASH_PrefetchBufferCmd+0x1e>
  {
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000cb0:	4a09      	ldr	r2, [pc, #36]	; (8000cd8 <FLASH_PrefetchBufferCmd+0x38>)
 8000cb2:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <FLASH_PrefetchBufferCmd+0x38>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f043 0310 	orr.w	r3, r3, #16
 8000cba:	6013      	str	r3, [r2, #0]
  }
  else
  {
    FLASH->ACR &= (uint32_t)(~((uint32_t)FLASH_ACR_PRFTBE));
  }
}
 8000cbc:	e005      	b.n	8000cca <FLASH_PrefetchBufferCmd+0x2a>
    FLASH->ACR &= (uint32_t)(~((uint32_t)FLASH_ACR_PRFTBE));
 8000cbe:	4a06      	ldr	r2, [pc, #24]	; (8000cd8 <FLASH_PrefetchBufferCmd+0x38>)
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <FLASH_PrefetchBufferCmd+0x38>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f023 0310 	bic.w	r3, r3, #16
 8000cc8:	6013      	str	r3, [r2, #0]
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	40022000 	.word	0x40022000

08000cdc <FLASH_Unlock>:
  * @brief  Unlocks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 8000ce0:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <FLASH_Unlock+0x28>)
 8000ce2:	691b      	ldr	r3, [r3, #16]
 8000ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d005      	beq.n	8000cf8 <FLASH_Unlock+0x1c>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8000cec:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <FLASH_Unlock+0x28>)
 8000cee:	4a06      	ldr	r2, [pc, #24]	; (8000d08 <FLASH_Unlock+0x2c>)
 8000cf0:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 8000cf2:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <FLASH_Unlock+0x28>)
 8000cf4:	4a05      	ldr	r2, [pc, #20]	; (8000d0c <FLASH_Unlock+0x30>)
 8000cf6:	605a      	str	r2, [r3, #4]
  }  
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	40022000 	.word	0x40022000
 8000d08:	45670123 	.word	0x45670123
 8000d0c:	cdef89ab 	.word	0xcdef89ab

08000d10 <FLASH_Lock>:
  * @brief  Locks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Lock(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8000d14:	4a05      	ldr	r2, [pc, #20]	; (8000d2c <FLASH_Lock+0x1c>)
 8000d16:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <FLASH_Lock+0x1c>)
 8000d18:	691b      	ldr	r3, [r3, #16]
 8000d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d1e:	6113      	str	r3, [r2, #16]
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	40022000 	.word	0x40022000

08000d30 <FLASH_ErasePage>:
  *         is the start address of a page (multiple of 1024 bytes).  
  * @retval FLASH Status: The returned value can be: 
  *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  FLASH_Status status = FLASH_COMPLETE;
 8000d38:	2304      	movs	r3, #4
 8000d3a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Page_Address));
 
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000d3c:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8000d40:	f000 fc5a 	bl	80015f8 <FLASH_WaitForLastOperation>
 8000d44:	4603      	mov	r3, r0
 8000d46:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8000d48:	7bfb      	ldrb	r3, [r7, #15]
 8000d4a:	2b04      	cmp	r3, #4
 8000d4c:	d11a      	bne.n	8000d84 <FLASH_ErasePage+0x54>
  { 
    /* If the previous operation is completed, proceed to erase the page */
    FLASH->CR |= FLASH_CR_PER;
 8000d4e:	4a10      	ldr	r2, [pc, #64]	; (8000d90 <FLASH_ErasePage+0x60>)
 8000d50:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <FLASH_ErasePage+0x60>)
 8000d52:	691b      	ldr	r3, [r3, #16]
 8000d54:	f043 0302 	orr.w	r3, r3, #2
 8000d58:	6113      	str	r3, [r2, #16]
    FLASH->AR  = Page_Address; 
 8000d5a:	4a0d      	ldr	r2, [pc, #52]	; (8000d90 <FLASH_ErasePage+0x60>)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6153      	str	r3, [r2, #20]
    FLASH->CR |= FLASH_CR_STRT;
 8000d60:	4a0b      	ldr	r2, [pc, #44]	; (8000d90 <FLASH_ErasePage+0x60>)
 8000d62:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <FLASH_ErasePage+0x60>)
 8000d64:	691b      	ldr	r3, [r3, #16]
 8000d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d6a:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000d6c:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8000d70:	f000 fc42 	bl	80015f8 <FLASH_WaitForLastOperation>
 8000d74:	4603      	mov	r3, r0
 8000d76:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the PER Bit */
    FLASH->CR &= ~FLASH_CR_PER;
 8000d78:	4a05      	ldr	r2, [pc, #20]	; (8000d90 <FLASH_ErasePage+0x60>)
 8000d7a:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <FLASH_ErasePage+0x60>)
 8000d7c:	691b      	ldr	r3, [r3, #16]
 8000d7e:	f023 0302 	bic.w	r3, r3, #2
 8000d82:	6113      	str	r3, [r2, #16]
  }
    
  /* Return the Erase Status */
  return status;
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40022000 	.word	0x40022000

08000d94 <FLASH_EraseAllPages>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_EraseAllPages(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
  FLASH_Status status = FLASH_COMPLETE;
 8000d9a:	2304      	movs	r3, #4
 8000d9c:	71fb      	strb	r3, [r7, #7]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000d9e:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8000da2:	f000 fc29 	bl	80015f8 <FLASH_WaitForLastOperation>
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
  
  if(status == FLASH_COMPLETE)
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	2b04      	cmp	r3, #4
 8000dae:	d117      	bne.n	8000de0 <FLASH_EraseAllPages+0x4c>
  {
    /* if the previous operation is completed, proceed to erase all pages */
     FLASH->CR |= FLASH_CR_MER;
 8000db0:	4a0e      	ldr	r2, [pc, #56]	; (8000dec <FLASH_EraseAllPages+0x58>)
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <FLASH_EraseAllPages+0x58>)
 8000db4:	691b      	ldr	r3, [r3, #16]
 8000db6:	f043 0304 	orr.w	r3, r3, #4
 8000dba:	6113      	str	r3, [r2, #16]
     FLASH->CR |= FLASH_CR_STRT;
 8000dbc:	4a0b      	ldr	r2, [pc, #44]	; (8000dec <FLASH_EraseAllPages+0x58>)
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <FLASH_EraseAllPages+0x58>)
 8000dc0:	691b      	ldr	r3, [r3, #16]
 8000dc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dc6:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000dc8:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8000dcc:	f000 fc14 	bl	80015f8 <FLASH_WaitForLastOperation>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	71fb      	strb	r3, [r7, #7]

    /* Disable the MER Bit */
    FLASH->CR &= ~FLASH_CR_MER;
 8000dd4:	4a05      	ldr	r2, [pc, #20]	; (8000dec <FLASH_EraseAllPages+0x58>)
 8000dd6:	4b05      	ldr	r3, [pc, #20]	; (8000dec <FLASH_EraseAllPages+0x58>)
 8000dd8:	691b      	ldr	r3, [r3, #16]
 8000dda:	f023 0304 	bic.w	r3, r3, #4
 8000dde:	6113      	str	r3, [r2, #16]
  }

  /* Return the Erase Status */
  return status;
 8000de0:	79fb      	ldrb	r3, [r7, #7]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40022000 	.word	0x40022000

08000df0 <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
  FLASH_Status status = FLASH_COMPLETE;
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t tmp = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000e02:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8000e06:	f000 fbf7 	bl	80015f8 <FLASH_WaitForLastOperation>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
 8000e10:	2b04      	cmp	r3, #4
 8000e12:	d12e      	bne.n	8000e72 <FLASH_ProgramWord+0x82>
  {
    /* If the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= FLASH_CR_PG;
 8000e14:	4a19      	ldr	r2, [pc, #100]	; (8000e7c <FLASH_ProgramWord+0x8c>)
 8000e16:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <FLASH_ProgramWord+0x8c>)
 8000e18:	691b      	ldr	r3, [r3, #16]
 8000e1a:	f043 0301 	orr.w	r3, r3, #1
 8000e1e:	6113      	str	r3, [r2, #16]
  
    *(__IO uint16_t*)Address = (uint16_t)Data;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	683a      	ldr	r2, [r7, #0]
 8000e24:	b292      	uxth	r2, r2
 8000e26:	801a      	strh	r2, [r3, #0]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000e28:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8000e2c:	f000 fbe4 	bl	80015f8 <FLASH_WaitForLastOperation>
 8000e30:	4603      	mov	r3, r0
 8000e32:	73fb      	strb	r3, [r7, #15]
 
    if(status == FLASH_COMPLETE)
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
 8000e36:	2b04      	cmp	r3, #4
 8000e38:	d115      	bne.n	8000e66 <FLASH_ProgramWord+0x76>
    {
      /* If the previous operation is completed, proceed to program the new second 
      half word */
      tmp = Address + 2;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	3302      	adds	r3, #2
 8000e3e:	60bb      	str	r3, [r7, #8]

      *(__IO uint16_t*) tmp = Data >> 16;
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	461a      	mov	r2, r3
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	0c1b      	lsrs	r3, r3, #16
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	8013      	strh	r3, [r2, #0]
    
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000e4c:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8000e50:	f000 fbd2 	bl	80015f8 <FLASH_WaitForLastOperation>
 8000e54:	4603      	mov	r3, r0
 8000e56:	73fb      	strb	r3, [r7, #15]
        
      /* Disable the PG Bit */
      FLASH->CR &= ~FLASH_CR_PG;
 8000e58:	4a08      	ldr	r2, [pc, #32]	; (8000e7c <FLASH_ProgramWord+0x8c>)
 8000e5a:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <FLASH_ProgramWord+0x8c>)
 8000e5c:	691b      	ldr	r3, [r3, #16]
 8000e5e:	f023 0301 	bic.w	r3, r3, #1
 8000e62:	6113      	str	r3, [r2, #16]
 8000e64:	e005      	b.n	8000e72 <FLASH_ProgramWord+0x82>
    }
    else
    {
      /* Disable the PG Bit */
      FLASH->CR &= ~FLASH_CR_PG;
 8000e66:	4a05      	ldr	r2, [pc, #20]	; (8000e7c <FLASH_ProgramWord+0x8c>)
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <FLASH_ProgramWord+0x8c>)
 8000e6a:	691b      	ldr	r3, [r3, #16]
 8000e6c:	f023 0301 	bic.w	r3, r3, #1
 8000e70:	6113      	str	r3, [r2, #16]
    }
  }
   
  /* Return the Program Status */
  return status;
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40022000 	.word	0x40022000

08000e80 <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	807b      	strh	r3, [r7, #2]
  FLASH_Status status = FLASH_COMPLETE;
 8000e8c:	2304      	movs	r3, #4
 8000e8e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000e90:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8000e94:	f000 fbb0 	bl	80015f8 <FLASH_WaitForLastOperation>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8000e9c:	7bfb      	ldrb	r3, [r7, #15]
 8000e9e:	2b04      	cmp	r3, #4
 8000ea0:	d114      	bne.n	8000ecc <FLASH_ProgramHalfWord+0x4c>
  {
    /* If the previous operation is completed, proceed to program the new data */
    FLASH->CR |= FLASH_CR_PG;
 8000ea2:	4a0d      	ldr	r2, [pc, #52]	; (8000ed8 <FLASH_ProgramHalfWord+0x58>)
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <FLASH_ProgramHalfWord+0x58>)
 8000ea6:	691b      	ldr	r3, [r3, #16]
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	6113      	str	r3, [r2, #16]
  
    *(__IO uint16_t*)Address = Data;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	887a      	ldrh	r2, [r7, #2]
 8000eb2:	801a      	strh	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000eb4:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8000eb8:	f000 fb9e 	bl	80015f8 <FLASH_WaitForLastOperation>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the PG Bit */
    FLASH->CR &= ~FLASH_CR_PG;
 8000ec0:	4a05      	ldr	r2, [pc, #20]	; (8000ed8 <FLASH_ProgramHalfWord+0x58>)
 8000ec2:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <FLASH_ProgramHalfWord+0x58>)
 8000ec4:	691b      	ldr	r3, [r3, #16]
 8000ec6:	f023 0301 	bic.w	r3, r3, #1
 8000eca:	6113      	str	r3, [r2, #16]
  } 
  
  /* Return the Program Status */
  return status;
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40022000 	.word	0x40022000

08000edc <FLASH_OB_Unlock>:
  * @brief  Unlocks the option bytes block access.
  * @param  None
  * @retval None
  */
void FLASH_OB_Unlock(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_OPTWRE) == RESET)
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <FLASH_OB_Unlock+0x28>)
 8000ee2:	691b      	ldr	r3, [r3, #16]
 8000ee4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d105      	bne.n	8000ef8 <FLASH_OB_Unlock+0x1c>
  { 
    /* Unlocking the option bytes block access */
    FLASH->OPTKEYR = FLASH_OPTKEY1;
 8000eec:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <FLASH_OB_Unlock+0x28>)
 8000eee:	4a06      	ldr	r2, [pc, #24]	; (8000f08 <FLASH_OB_Unlock+0x2c>)
 8000ef0:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPTKEY2;
 8000ef2:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <FLASH_OB_Unlock+0x28>)
 8000ef4:	4a05      	ldr	r2, [pc, #20]	; (8000f0c <FLASH_OB_Unlock+0x30>)
 8000ef6:	609a      	str	r2, [r3, #8]
  }
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	40022000 	.word	0x40022000
 8000f08:	45670123 	.word	0x45670123
 8000f0c:	cdef89ab 	.word	0xcdef89ab

08000f10 <FLASH_OB_Lock>:
  * @brief  Locks the option bytes block access.
  * @param  None
  * @retval None
  */
void FLASH_OB_Lock(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* Set the OPTWREN Bit to lock the option bytes block access */
  FLASH->CR &= ~FLASH_CR_OPTWRE;
 8000f14:	4a05      	ldr	r2, [pc, #20]	; (8000f2c <FLASH_OB_Lock+0x1c>)
 8000f16:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <FLASH_OB_Lock+0x1c>)
 8000f18:	691b      	ldr	r3, [r3, #16]
 8000f1a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000f1e:	6113      	str	r3, [r2, #16]
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	40022000 	.word	0x40022000

08000f30 <FLASH_OB_Launch>:
  * @brief  Launch the option byte loading.
  * @param  None
  * @retval None
  */
void FLASH_OB_Launch(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* Set the OBL_Launch bit to launch the option byte loading */
  FLASH->CR |= FLASH_CR_OBL_LAUNCH; 
 8000f34:	4a05      	ldr	r2, [pc, #20]	; (8000f4c <FLASH_OB_Launch+0x1c>)
 8000f36:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <FLASH_OB_Launch+0x1c>)
 8000f38:	691b      	ldr	r3, [r3, #16]
 8000f3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f3e:	6113      	str	r3, [r2, #16]
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	40022000 	.word	0x40022000

08000f50 <FLASH_OB_Erase>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_OB_Erase(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
  uint16_t rdptmp = OB_RDP_Level_0;
 8000f56:	23aa      	movs	r3, #170	; 0xaa
 8000f58:	80fb      	strh	r3, [r7, #6]

  FLASH_Status status = FLASH_COMPLETE;
 8000f5a:	2304      	movs	r3, #4
 8000f5c:	717b      	strb	r3, [r7, #5]

  /* Get the actual read protection Option Byte value */ 
  if(FLASH_OB_GetRDP() != RESET)
 8000f5e:	f000 fabb 	bl	80014d8 <FLASH_OB_GetRDP>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <FLASH_OB_Erase+0x1c>
  {
    rdptmp = 0x00;  
 8000f68:	2300      	movs	r3, #0
 8000f6a:	80fb      	strh	r3, [r7, #6]
  }

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000f6c:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8000f70:	f000 fb42 	bl	80015f8 <FLASH_WaitForLastOperation>
 8000f74:	4603      	mov	r3, r0
 8000f76:	717b      	strb	r3, [r7, #5]

  if(status == FLASH_COMPLETE)
 8000f78:	797b      	ldrb	r3, [r7, #5]
 8000f7a:	2b04      	cmp	r3, #4
 8000f7c:	d13c      	bne.n	8000ff8 <FLASH_OB_Erase+0xa8>
  {   
    /* If the previous operation is completed, proceed to erase the option bytes */
    FLASH->CR |= FLASH_CR_OPTER;
 8000f7e:	4a21      	ldr	r2, [pc, #132]	; (8001004 <FLASH_OB_Erase+0xb4>)
 8000f80:	4b20      	ldr	r3, [pc, #128]	; (8001004 <FLASH_OB_Erase+0xb4>)
 8000f82:	691b      	ldr	r3, [r3, #16]
 8000f84:	f043 0320 	orr.w	r3, r3, #32
 8000f88:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_STRT;
 8000f8a:	4a1e      	ldr	r2, [pc, #120]	; (8001004 <FLASH_OB_Erase+0xb4>)
 8000f8c:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <FLASH_OB_Erase+0xb4>)
 8000f8e:	691b      	ldr	r3, [r3, #16]
 8000f90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f94:	6113      	str	r3, [r2, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000f96:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8000f9a:	f000 fb2d 	bl	80015f8 <FLASH_WaitForLastOperation>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	717b      	strb	r3, [r7, #5]
    
    if(status == FLASH_COMPLETE)
 8000fa2:	797b      	ldrb	r3, [r7, #5]
 8000fa4:	2b04      	cmp	r3, #4
 8000fa6:	d11e      	bne.n	8000fe6 <FLASH_OB_Erase+0x96>
    {
      /* If the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= ~FLASH_CR_OPTER;
 8000fa8:	4a16      	ldr	r2, [pc, #88]	; (8001004 <FLASH_OB_Erase+0xb4>)
 8000faa:	4b16      	ldr	r3, [pc, #88]	; (8001004 <FLASH_OB_Erase+0xb4>)
 8000fac:	691b      	ldr	r3, [r3, #16]
 8000fae:	f023 0320 	bic.w	r3, r3, #32
 8000fb2:	6113      	str	r3, [r2, #16]
       
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= FLASH_CR_OPTPG;
 8000fb4:	4a13      	ldr	r2, [pc, #76]	; (8001004 <FLASH_OB_Erase+0xb4>)
 8000fb6:	4b13      	ldr	r3, [pc, #76]	; (8001004 <FLASH_OB_Erase+0xb4>)
 8000fb8:	691b      	ldr	r3, [r3, #16]
 8000fba:	f043 0310 	orr.w	r3, r3, #16
 8000fbe:	6113      	str	r3, [r2, #16]

      /* Restore the last read protection Option Byte value */
      OB->RDP = (uint16_t)rdptmp; 
 8000fc0:	4a11      	ldr	r2, [pc, #68]	; (8001008 <FLASH_OB_Erase+0xb8>)
 8000fc2:	88fb      	ldrh	r3, [r7, #6]
 8000fc4:	8013      	strh	r3, [r2, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8000fc6:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8000fca:	f000 fb15 	bl	80015f8 <FLASH_WaitForLastOperation>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	717b      	strb	r3, [r7, #5]
 
      if(status != FLASH_TIMEOUT)
 8000fd2:	797b      	ldrb	r3, [r7, #5]
 8000fd4:	2b05      	cmp	r3, #5
 8000fd6:	d00f      	beq.n	8000ff8 <FLASH_OB_Erase+0xa8>
      {
        /* if the program operation is completed, disable the OPTPG Bit */
        FLASH->CR &= ~FLASH_CR_OPTPG;
 8000fd8:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <FLASH_OB_Erase+0xb4>)
 8000fda:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <FLASH_OB_Erase+0xb4>)
 8000fdc:	691b      	ldr	r3, [r3, #16]
 8000fde:	f023 0310 	bic.w	r3, r3, #16
 8000fe2:	6113      	str	r3, [r2, #16]
 8000fe4:	e008      	b.n	8000ff8 <FLASH_OB_Erase+0xa8>
      }
    }
    else
    {
      if (status != FLASH_TIMEOUT)
 8000fe6:	797b      	ldrb	r3, [r7, #5]
 8000fe8:	2b05      	cmp	r3, #5
 8000fea:	d005      	beq.n	8000ff8 <FLASH_OB_Erase+0xa8>
      {
        /* Disable the OPTPG Bit */
        FLASH->CR &= ~FLASH_CR_OPTPG;
 8000fec:	4a05      	ldr	r2, [pc, #20]	; (8001004 <FLASH_OB_Erase+0xb4>)
 8000fee:	4b05      	ldr	r3, [pc, #20]	; (8001004 <FLASH_OB_Erase+0xb4>)
 8000ff0:	691b      	ldr	r3, [r3, #16]
 8000ff2:	f023 0310 	bic.w	r3, r3, #16
 8000ff6:	6113      	str	r3, [r2, #16]
      }
    }  
  }
  /* Return the erase status */
  return status;
 8000ff8:	797b      	ldrb	r3, [r7, #5]
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40022000 	.word	0x40022000
 8001008:	1ffff800 	.word	0x1ffff800

0800100c <FLASH_OB_EnableWRP>:
  *     @arg OB_WRP_AllPages
  * @retval FLASH Status: The returned value can be: 
  *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_OB_EnableWRP(uint32_t OB_WRP)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint16_t WRP0_Data = 0xFFFF, WRP1_Data = 0xFFFF, WRP2_Data = 0xFFFF, WRP3_Data = 0xFFFF;
 8001014:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001018:	82bb      	strh	r3, [r7, #20]
 800101a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800101e:	827b      	strh	r3, [r7, #18]
 8001020:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001024:	823b      	strh	r3, [r7, #16]
 8001026:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800102a:	81fb      	strh	r3, [r7, #14]

  FLASH_Status status = FLASH_COMPLETE;
 800102c:	2304      	movs	r3, #4
 800102e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_OB_WRP(OB_WRP));

  OB_WRP = (uint32_t)(~OB_WRP);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	43db      	mvns	r3, r3
 8001034:	607b      	str	r3, [r7, #4]
  WRP0_Data = (uint16_t)(OB_WRP & OB_WRP0_WRP0);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	b29b      	uxth	r3, r3
 800103a:	b2db      	uxtb	r3, r3
 800103c:	82bb      	strh	r3, [r7, #20]
  WRP1_Data = (uint16_t)((OB_WRP >> 8) & OB_WRP0_WRP0);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	0a1b      	lsrs	r3, r3, #8
 8001042:	b29b      	uxth	r3, r3
 8001044:	b2db      	uxtb	r3, r3
 8001046:	827b      	strh	r3, [r7, #18]
  WRP2_Data = (uint16_t)((OB_WRP >> 16) & OB_WRP0_WRP0) ;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	0c1b      	lsrs	r3, r3, #16
 800104c:	b29b      	uxth	r3, r3
 800104e:	b2db      	uxtb	r3, r3
 8001050:	823b      	strh	r3, [r7, #16]
  WRP3_Data = (uint16_t)((OB_WRP >> 24) & OB_WRP0_WRP0) ;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	0e1b      	lsrs	r3, r3, #24
 8001056:	b29b      	uxth	r3, r3
 8001058:	b2db      	uxtb	r3, r3
 800105a:	81fb      	strh	r3, [r7, #14]
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 800105c:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8001060:	f000 faca 	bl	80015f8 <FLASH_WaitForLastOperation>
 8001064:	4603      	mov	r3, r0
 8001066:	75fb      	strb	r3, [r7, #23]

  if(status == FLASH_COMPLETE)
 8001068:	7dfb      	ldrb	r3, [r7, #23]
 800106a:	2b04      	cmp	r3, #4
 800106c:	d147      	bne.n	80010fe <FLASH_OB_EnableWRP+0xf2>
  {
    FLASH->CR |= FLASH_CR_OPTPG;
 800106e:	4a26      	ldr	r2, [pc, #152]	; (8001108 <FLASH_OB_EnableWRP+0xfc>)
 8001070:	4b25      	ldr	r3, [pc, #148]	; (8001108 <FLASH_OB_EnableWRP+0xfc>)
 8001072:	691b      	ldr	r3, [r3, #16]
 8001074:	f043 0310 	orr.w	r3, r3, #16
 8001078:	6113      	str	r3, [r2, #16]

    if(WRP0_Data != 0xFF)
 800107a:	8abb      	ldrh	r3, [r7, #20]
 800107c:	2bff      	cmp	r3, #255	; 0xff
 800107e:	d008      	beq.n	8001092 <FLASH_OB_EnableWRP+0x86>
    {
      OB->WRP0 = WRP0_Data;
 8001080:	4a22      	ldr	r2, [pc, #136]	; (800110c <FLASH_OB_EnableWRP+0x100>)
 8001082:	8abb      	ldrh	r3, [r7, #20]
 8001084:	8113      	strh	r3, [r2, #8]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8001086:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 800108a:	f000 fab5 	bl	80015f8 <FLASH_WaitForLastOperation>
 800108e:	4603      	mov	r3, r0
 8001090:	75fb      	strb	r3, [r7, #23]
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
 8001092:	7dfb      	ldrb	r3, [r7, #23]
 8001094:	2b04      	cmp	r3, #4
 8001096:	d10b      	bne.n	80010b0 <FLASH_OB_EnableWRP+0xa4>
 8001098:	8a7b      	ldrh	r3, [r7, #18]
 800109a:	2bff      	cmp	r3, #255	; 0xff
 800109c:	d008      	beq.n	80010b0 <FLASH_OB_EnableWRP+0xa4>
    {
      OB->WRP1 = WRP1_Data;
 800109e:	4a1b      	ldr	r2, [pc, #108]	; (800110c <FLASH_OB_EnableWRP+0x100>)
 80010a0:	8a7b      	ldrh	r3, [r7, #18]
 80010a2:	8153      	strh	r3, [r2, #10]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 80010a4:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 80010a8:	f000 faa6 	bl	80015f8 <FLASH_WaitForLastOperation>
 80010ac:	4603      	mov	r3, r0
 80010ae:	75fb      	strb	r3, [r7, #23]
    }
    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
 80010b0:	7dfb      	ldrb	r3, [r7, #23]
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	d10b      	bne.n	80010ce <FLASH_OB_EnableWRP+0xc2>
 80010b6:	8a3b      	ldrh	r3, [r7, #16]
 80010b8:	2bff      	cmp	r3, #255	; 0xff
 80010ba:	d008      	beq.n	80010ce <FLASH_OB_EnableWRP+0xc2>
    {
      OB->WRP2 = WRP2_Data;
 80010bc:	4a13      	ldr	r2, [pc, #76]	; (800110c <FLASH_OB_EnableWRP+0x100>)
 80010be:	8a3b      	ldrh	r3, [r7, #16]
 80010c0:	8193      	strh	r3, [r2, #12]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 80010c2:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 80010c6:	f000 fa97 	bl	80015f8 <FLASH_WaitForLastOperation>
 80010ca:	4603      	mov	r3, r0
 80010cc:	75fb      	strb	r3, [r7, #23]
    }    
    if((status == FLASH_COMPLETE) && (WRP3_Data != 0xFF))
 80010ce:	7dfb      	ldrb	r3, [r7, #23]
 80010d0:	2b04      	cmp	r3, #4
 80010d2:	d10b      	bne.n	80010ec <FLASH_OB_EnableWRP+0xe0>
 80010d4:	89fb      	ldrh	r3, [r7, #14]
 80010d6:	2bff      	cmp	r3, #255	; 0xff
 80010d8:	d008      	beq.n	80010ec <FLASH_OB_EnableWRP+0xe0>
    {
      OB->WRP3 = WRP3_Data;
 80010da:	4a0c      	ldr	r2, [pc, #48]	; (800110c <FLASH_OB_EnableWRP+0x100>)
 80010dc:	89fb      	ldrh	r3, [r7, #14]
 80010de:	81d3      	strh	r3, [r2, #14]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 80010e0:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 80010e4:	f000 fa88 	bl	80015f8 <FLASH_WaitForLastOperation>
 80010e8:	4603      	mov	r3, r0
 80010ea:	75fb      	strb	r3, [r7, #23]
    }  
    if(status != FLASH_TIMEOUT)
 80010ec:	7dfb      	ldrb	r3, [r7, #23]
 80010ee:	2b05      	cmp	r3, #5
 80010f0:	d005      	beq.n	80010fe <FLASH_OB_EnableWRP+0xf2>
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= ~FLASH_CR_OPTPG;
 80010f2:	4a05      	ldr	r2, [pc, #20]	; (8001108 <FLASH_OB_EnableWRP+0xfc>)
 80010f4:	4b04      	ldr	r3, [pc, #16]	; (8001108 <FLASH_OB_EnableWRP+0xfc>)
 80010f6:	691b      	ldr	r3, [r3, #16]
 80010f8:	f023 0310 	bic.w	r3, r3, #16
 80010fc:	6113      	str	r3, [r2, #16]
    }
  } 
  /* Return the write protection operation Status */
  return status; 
 80010fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001100:	4618      	mov	r0, r3
 8001102:	3718      	adds	r7, #24
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40022000 	.word	0x40022000
 800110c:	1ffff800 	.word	0x1ffff800

08001110 <FLASH_OB_RDPConfig>:
  *     @arg OB_RDP_Level_2: Chip protection
  *     @retval FLASH Status: The returned value can be: 
  * FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_OB_RDPConfig(uint8_t OB_RDP)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
  FLASH_Status status = FLASH_COMPLETE;
 800111a:	2304      	movs	r3, #4
 800111c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_RDP(OB_RDP));
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 800111e:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8001122:	f000 fa69 	bl	80015f8 <FLASH_WaitForLastOperation>
 8001126:	4603      	mov	r3, r0
 8001128:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 800112a:	7bfb      	ldrb	r3, [r7, #15]
 800112c:	2b04      	cmp	r3, #4
 800112e:	d13d      	bne.n	80011ac <FLASH_OB_RDPConfig+0x9c>
  {
    FLASH->CR |= FLASH_CR_OPTER;
 8001130:	4a21      	ldr	r2, [pc, #132]	; (80011b8 <FLASH_OB_RDPConfig+0xa8>)
 8001132:	4b21      	ldr	r3, [pc, #132]	; (80011b8 <FLASH_OB_RDPConfig+0xa8>)
 8001134:	691b      	ldr	r3, [r3, #16]
 8001136:	f043 0320 	orr.w	r3, r3, #32
 800113a:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_STRT;
 800113c:	4a1e      	ldr	r2, [pc, #120]	; (80011b8 <FLASH_OB_RDPConfig+0xa8>)
 800113e:	4b1e      	ldr	r3, [pc, #120]	; (80011b8 <FLASH_OB_RDPConfig+0xa8>)
 8001140:	691b      	ldr	r3, [r3, #16]
 8001142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001146:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8001148:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 800114c:	f000 fa54 	bl	80015f8 <FLASH_WaitForLastOperation>
 8001150:	4603      	mov	r3, r0
 8001152:	73fb      	strb	r3, [r7, #15]
    
    if(status == FLASH_COMPLETE)
 8001154:	7bfb      	ldrb	r3, [r7, #15]
 8001156:	2b04      	cmp	r3, #4
 8001158:	d11f      	bne.n	800119a <FLASH_OB_RDPConfig+0x8a>
    {
      /* If the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= ~FLASH_CR_OPTER;
 800115a:	4a17      	ldr	r2, [pc, #92]	; (80011b8 <FLASH_OB_RDPConfig+0xa8>)
 800115c:	4b16      	ldr	r3, [pc, #88]	; (80011b8 <FLASH_OB_RDPConfig+0xa8>)
 800115e:	691b      	ldr	r3, [r3, #16]
 8001160:	f023 0320 	bic.w	r3, r3, #32
 8001164:	6113      	str	r3, [r2, #16]
      
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= FLASH_CR_OPTPG;
 8001166:	4a14      	ldr	r2, [pc, #80]	; (80011b8 <FLASH_OB_RDPConfig+0xa8>)
 8001168:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <FLASH_OB_RDPConfig+0xa8>)
 800116a:	691b      	ldr	r3, [r3, #16]
 800116c:	f043 0310 	orr.w	r3, r3, #16
 8001170:	6113      	str	r3, [r2, #16]
       
      OB->RDP = OB_RDP;
 8001172:	4b12      	ldr	r3, [pc, #72]	; (80011bc <FLASH_OB_RDPConfig+0xac>)
 8001174:	79fa      	ldrb	r2, [r7, #7]
 8001176:	b292      	uxth	r2, r2
 8001178:	801a      	strh	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT); 
 800117a:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 800117e:	f000 fa3b 	bl	80015f8 <FLASH_WaitForLastOperation>
 8001182:	4603      	mov	r3, r0
 8001184:	73fb      	strb	r3, [r7, #15]
    
      if(status != FLASH_TIMEOUT)
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	2b05      	cmp	r3, #5
 800118a:	d00f      	beq.n	80011ac <FLASH_OB_RDPConfig+0x9c>
      {
        /* if the program operation is completed, disable the OPTPG Bit */
        FLASH->CR &= ~FLASH_CR_OPTPG;
 800118c:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <FLASH_OB_RDPConfig+0xa8>)
 800118e:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <FLASH_OB_RDPConfig+0xa8>)
 8001190:	691b      	ldr	r3, [r3, #16]
 8001192:	f023 0310 	bic.w	r3, r3, #16
 8001196:	6113      	str	r3, [r2, #16]
 8001198:	e008      	b.n	80011ac <FLASH_OB_RDPConfig+0x9c>
      }
    }
    else 
    {
      if(status != FLASH_TIMEOUT)
 800119a:	7bfb      	ldrb	r3, [r7, #15]
 800119c:	2b05      	cmp	r3, #5
 800119e:	d005      	beq.n	80011ac <FLASH_OB_RDPConfig+0x9c>
      {
        /* Disable the OPTER Bit */
        FLASH->CR &= ~FLASH_CR_OPTER;
 80011a0:	4a05      	ldr	r2, [pc, #20]	; (80011b8 <FLASH_OB_RDPConfig+0xa8>)
 80011a2:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <FLASH_OB_RDPConfig+0xa8>)
 80011a4:	691b      	ldr	r3, [r3, #16]
 80011a6:	f023 0320 	bic.w	r3, r3, #32
 80011aa:	6113      	str	r3, [r2, #16]
      }
    }
  }
  /* Return the protection operation Status */
  return status;             
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40022000 	.word	0x40022000
 80011bc:	1ffff800 	.word	0x1ffff800

080011c0 <FLASH_OB_UserConfig>:
  *     @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG, 
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
 80011ca:	460b      	mov	r3, r1
 80011cc:	71bb      	strb	r3, [r7, #6]
 80011ce:	4613      	mov	r3, r2
 80011d0:	717b      	strb	r3, [r7, #5]
  FLASH_Status status = FLASH_COMPLETE; 
 80011d2:	2304      	movs	r3, #4
 80011d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 80011d6:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <FLASH_OB_UserConfig+0x84>)
 80011d8:	4a1b      	ldr	r2, [pc, #108]	; (8001248 <FLASH_OB_UserConfig+0x88>)
 80011da:	609a      	str	r2, [r3, #8]
  FLASH->OPTKEYR = FLASH_KEY2;
 80011dc:	4b19      	ldr	r3, [pc, #100]	; (8001244 <FLASH_OB_UserConfig+0x84>)
 80011de:	4a1b      	ldr	r2, [pc, #108]	; (800124c <FLASH_OB_UserConfig+0x8c>)
 80011e0:	609a      	str	r2, [r3, #8]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 80011e2:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 80011e6:	f000 fa07 	bl	80015f8 <FLASH_WaitForLastOperation>
 80011ea:	4603      	mov	r3, r0
 80011ec:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
 80011f0:	2b04      	cmp	r3, #4
 80011f2:	d121      	bne.n	8001238 <FLASH_OB_UserConfig+0x78>
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= FLASH_CR_OPTPG; 
 80011f4:	4a13      	ldr	r2, [pc, #76]	; (8001244 <FLASH_OB_UserConfig+0x84>)
 80011f6:	4b13      	ldr	r3, [pc, #76]	; (8001244 <FLASH_OB_UserConfig+0x84>)
 80011f8:	691b      	ldr	r3, [r3, #16]
 80011fa:	f043 0310 	orr.w	r3, r3, #16
 80011fe:	6113      	str	r3, [r2, #16]
           
    OB->USER = (uint8_t)((uint8_t)(OB_IWDG | OB_STOP) | (uint8_t)(OB_STDBY |0xF8));
 8001200:	4913      	ldr	r1, [pc, #76]	; (8001250 <FLASH_OB_UserConfig+0x90>)
 8001202:	79fa      	ldrb	r2, [r7, #7]
 8001204:	79bb      	ldrb	r3, [r7, #6]
 8001206:	4313      	orrs	r3, r2
 8001208:	b2da      	uxtb	r2, r3
 800120a:	797b      	ldrb	r3, [r7, #5]
 800120c:	4313      	orrs	r3, r2
 800120e:	b2db      	uxtb	r3, r3
 8001210:	f063 0307 	orn	r3, r3, #7
 8001214:	b2db      	uxtb	r3, r3
 8001216:	b29b      	uxth	r3, r3
 8001218:	804b      	strh	r3, [r1, #2]
  
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 800121a:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 800121e:	f000 f9eb 	bl	80015f8 <FLASH_WaitForLastOperation>
 8001222:	4603      	mov	r3, r0
 8001224:	73fb      	strb	r3, [r7, #15]

    if(status != FLASH_TIMEOUT)
 8001226:	7bfb      	ldrb	r3, [r7, #15]
 8001228:	2b05      	cmp	r3, #5
 800122a:	d005      	beq.n	8001238 <FLASH_OB_UserConfig+0x78>
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= ~FLASH_CR_OPTPG;
 800122c:	4a05      	ldr	r2, [pc, #20]	; (8001244 <FLASH_OB_UserConfig+0x84>)
 800122e:	4b05      	ldr	r3, [pc, #20]	; (8001244 <FLASH_OB_UserConfig+0x84>)
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	f023 0310 	bic.w	r3, r3, #16
 8001236:	6113      	str	r3, [r2, #16]
    }
  }    
  /* Return the Option Byte program Status */
  return status;
 8001238:	7bfb      	ldrb	r3, [r7, #15]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40022000 	.word	0x40022000
 8001248:	45670123 	.word	0x45670123
 800124c:	cdef89ab 	.word	0xcdef89ab
 8001250:	1ffff800 	.word	0x1ffff800

08001254 <FLASH_OB_BOOTConfig>:
  *     @arg OB_BOOT1_RESET: BOOT1 Reset
  *     @arg OB_BOOT1_SET: BOOT1 Set
  * @retval None
  */
FLASH_Status FLASH_OB_BOOTConfig(uint8_t OB_BOOT1)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	71fb      	strb	r3, [r7, #7]
  FLASH_Status status = FLASH_COMPLETE; 
 800125e:	2304      	movs	r3, #4
 8001260:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_BOOT1(OB_BOOT1));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 8001262:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <FLASH_OB_BOOTConfig+0x70>)
 8001264:	4a18      	ldr	r2, [pc, #96]	; (80012c8 <FLASH_OB_BOOTConfig+0x74>)
 8001266:	609a      	str	r2, [r3, #8]
  FLASH->OPTKEYR = FLASH_KEY2;
 8001268:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <FLASH_OB_BOOTConfig+0x70>)
 800126a:	4a18      	ldr	r2, [pc, #96]	; (80012cc <FLASH_OB_BOOTConfig+0x78>)
 800126c:	609a      	str	r2, [r3, #8]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 800126e:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8001272:	f000 f9c1 	bl	80015f8 <FLASH_WaitForLastOperation>
 8001276:	4603      	mov	r3, r0
 8001278:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	2b04      	cmp	r3, #4
 800127e:	d11b      	bne.n	80012b8 <FLASH_OB_BOOTConfig+0x64>
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= FLASH_CR_OPTPG; 
 8001280:	4a10      	ldr	r2, [pc, #64]	; (80012c4 <FLASH_OB_BOOTConfig+0x70>)
 8001282:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <FLASH_OB_BOOTConfig+0x70>)
 8001284:	691b      	ldr	r3, [r3, #16]
 8001286:	f043 0310 	orr.w	r3, r3, #16
 800128a:	6113      	str	r3, [r2, #16]
           
	OB->USER = OB_BOOT1|0xEF;
 800128c:	4a10      	ldr	r2, [pc, #64]	; (80012d0 <FLASH_OB_BOOTConfig+0x7c>)
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	f063 0310 	orn	r3, r3, #16
 8001294:	b2db      	uxtb	r3, r3
 8001296:	b29b      	uxth	r3, r3
 8001298:	8053      	strh	r3, [r2, #2]
  
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 800129a:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 800129e:	f000 f9ab 	bl	80015f8 <FLASH_WaitForLastOperation>
 80012a2:	4603      	mov	r3, r0
 80012a4:	73fb      	strb	r3, [r7, #15]

    if(status != FLASH_TIMEOUT)
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
 80012a8:	2b05      	cmp	r3, #5
 80012aa:	d005      	beq.n	80012b8 <FLASH_OB_BOOTConfig+0x64>
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= ~FLASH_CR_OPTPG;
 80012ac:	4a05      	ldr	r2, [pc, #20]	; (80012c4 <FLASH_OB_BOOTConfig+0x70>)
 80012ae:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <FLASH_OB_BOOTConfig+0x70>)
 80012b0:	691b      	ldr	r3, [r3, #16]
 80012b2:	f023 0310 	bic.w	r3, r3, #16
 80012b6:	6113      	str	r3, [r2, #16]
    }
  }    
  /* Return the Option Byte program Status */
  return status;
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40022000 	.word	0x40022000
 80012c8:	45670123 	.word	0x45670123
 80012cc:	cdef89ab 	.word	0xcdef89ab
 80012d0:	1ffff800 	.word	0x1ffff800

080012d4 <FLASH_OB_VDDAConfig>:
  *     @arg OB_VDDA_ANALOG_ON: Analog monitoring on VDDA Power source ON
  *     @arg OB_VDDA_ANALOG_OFF: Analog monitoring on VDDA Power source OFF
  * @retval None
  */
FLASH_Status FLASH_OB_VDDAConfig(uint8_t OB_VDDA_ANALOG)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
  FLASH_Status status = FLASH_COMPLETE; 
 80012de:	2304      	movs	r3, #4
 80012e0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_VDDA_ANALOG(OB_VDDA_ANALOG));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 80012e2:	4b18      	ldr	r3, [pc, #96]	; (8001344 <FLASH_OB_VDDAConfig+0x70>)
 80012e4:	4a18      	ldr	r2, [pc, #96]	; (8001348 <FLASH_OB_VDDAConfig+0x74>)
 80012e6:	609a      	str	r2, [r3, #8]
  FLASH->OPTKEYR = FLASH_KEY2;
 80012e8:	4b16      	ldr	r3, [pc, #88]	; (8001344 <FLASH_OB_VDDAConfig+0x70>)
 80012ea:	4a18      	ldr	r2, [pc, #96]	; (800134c <FLASH_OB_VDDAConfig+0x78>)
 80012ec:	609a      	str	r2, [r3, #8]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 80012ee:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 80012f2:	f000 f981 	bl	80015f8 <FLASH_WaitForLastOperation>
 80012f6:	4603      	mov	r3, r0
 80012f8:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 80012fa:	7bfb      	ldrb	r3, [r7, #15]
 80012fc:	2b04      	cmp	r3, #4
 80012fe:	d11b      	bne.n	8001338 <FLASH_OB_VDDAConfig+0x64>
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= FLASH_CR_OPTPG; 
 8001300:	4a10      	ldr	r2, [pc, #64]	; (8001344 <FLASH_OB_VDDAConfig+0x70>)
 8001302:	4b10      	ldr	r3, [pc, #64]	; (8001344 <FLASH_OB_VDDAConfig+0x70>)
 8001304:	691b      	ldr	r3, [r3, #16]
 8001306:	f043 0310 	orr.w	r3, r3, #16
 800130a:	6113      	str	r3, [r2, #16]
           
	OB->USER = OB_VDDA_ANALOG |0xDF;
 800130c:	4a10      	ldr	r2, [pc, #64]	; (8001350 <FLASH_OB_VDDAConfig+0x7c>)
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	f063 0320 	orn	r3, r3, #32
 8001314:	b2db      	uxtb	r3, r3
 8001316:	b29b      	uxth	r3, r3
 8001318:	8053      	strh	r3, [r2, #2]
  
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 800131a:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 800131e:	f000 f96b 	bl	80015f8 <FLASH_WaitForLastOperation>
 8001322:	4603      	mov	r3, r0
 8001324:	73fb      	strb	r3, [r7, #15]

    if(status != FLASH_TIMEOUT)
 8001326:	7bfb      	ldrb	r3, [r7, #15]
 8001328:	2b05      	cmp	r3, #5
 800132a:	d005      	beq.n	8001338 <FLASH_OB_VDDAConfig+0x64>
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= ~FLASH_CR_OPTPG;
 800132c:	4a05      	ldr	r2, [pc, #20]	; (8001344 <FLASH_OB_VDDAConfig+0x70>)
 800132e:	4b05      	ldr	r3, [pc, #20]	; (8001344 <FLASH_OB_VDDAConfig+0x70>)
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	f023 0310 	bic.w	r3, r3, #16
 8001336:	6113      	str	r3, [r2, #16]
    }
  }    
  /* Return the Option Byte program Status */
  return status;
 8001338:	7bfb      	ldrb	r3, [r7, #15]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40022000 	.word	0x40022000
 8001348:	45670123 	.word	0x45670123
 800134c:	cdef89ab 	.word	0xcdef89ab
 8001350:	1ffff800 	.word	0x1ffff800

08001354 <FLASH_OB_SRAMParityConfig>:
  *             @arg OB_SRAM_PARITY_SET: Set SRAM parity.
  *             @arg OB_SRAM_PARITY_RESET: Reset SRAM parity.
  * @retval None
  */
FLASH_Status FLASH_OB_SRAMParityConfig(uint8_t OB_SRAM_Parity)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
  FLASH_Status status = FLASH_COMPLETE; 
 800135e:	2304      	movs	r3, #4
 8001360:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_SRAM_PARITY(OB_SRAM_Parity));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8001362:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8001366:	f000 f947 	bl	80015f8 <FLASH_WaitForLastOperation>
 800136a:	4603      	mov	r3, r0
 800136c:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 800136e:	7bfb      	ldrb	r3, [r7, #15]
 8001370:	2b04      	cmp	r3, #4
 8001372:	d11b      	bne.n	80013ac <FLASH_OB_SRAMParityConfig+0x58>
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= FLASH_CR_OPTPG; 
 8001374:	4a10      	ldr	r2, [pc, #64]	; (80013b8 <FLASH_OB_SRAMParityConfig+0x64>)
 8001376:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <FLASH_OB_SRAMParityConfig+0x64>)
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	f043 0310 	orr.w	r3, r3, #16
 800137e:	6113      	str	r3, [r2, #16]

    OB->USER = OB_SRAM_Parity | 0xBF;
 8001380:	4a0e      	ldr	r2, [pc, #56]	; (80013bc <FLASH_OB_SRAMParityConfig+0x68>)
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	f063 0340 	orn	r3, r3, #64	; 0x40
 8001388:	b2db      	uxtb	r3, r3
 800138a:	b29b      	uxth	r3, r3
 800138c:	8053      	strh	r3, [r2, #2]
  
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 800138e:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8001392:	f000 f931 	bl	80015f8 <FLASH_WaitForLastOperation>
 8001396:	4603      	mov	r3, r0
 8001398:	73fb      	strb	r3, [r7, #15]

    if(status != FLASH_TIMEOUT)
 800139a:	7bfb      	ldrb	r3, [r7, #15]
 800139c:	2b05      	cmp	r3, #5
 800139e:	d005      	beq.n	80013ac <FLASH_OB_SRAMParityConfig+0x58>
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= ~FLASH_CR_OPTPG;
 80013a0:	4a05      	ldr	r2, [pc, #20]	; (80013b8 <FLASH_OB_SRAMParityConfig+0x64>)
 80013a2:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <FLASH_OB_SRAMParityConfig+0x64>)
 80013a4:	691b      	ldr	r3, [r3, #16]
 80013a6:	f023 0310 	bic.w	r3, r3, #16
 80013aa:	6113      	str	r3, [r2, #16]
    }
  }
  /* Return the Option Byte program Status */
  return status;
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40022000 	.word	0x40022000
 80013bc:	1ffff800 	.word	0x1ffff800

080013c0 <FLASH_OB_WriteUser>:
  *     @arg OB_VDDA_ANALOG_ON / OB_VDDA_ANALOG_OFF: Analog monitoring on VDDA Power source ON / OFF
  * @retval FLASH Status: The returned value can be: 
  * FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_OB_WriteUser(uint8_t OB_USER)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	71fb      	strb	r3, [r7, #7]
  FLASH_Status status = FLASH_COMPLETE; 
 80013ca:	2304      	movs	r3, #4
 80013cc:	73fb      	strb	r3, [r7, #15]

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 80013ce:	4b18      	ldr	r3, [pc, #96]	; (8001430 <FLASH_OB_WriteUser+0x70>)
 80013d0:	4a18      	ldr	r2, [pc, #96]	; (8001434 <FLASH_OB_WriteUser+0x74>)
 80013d2:	609a      	str	r2, [r3, #8]
  FLASH->OPTKEYR = FLASH_KEY2;
 80013d4:	4b16      	ldr	r3, [pc, #88]	; (8001430 <FLASH_OB_WriteUser+0x70>)
 80013d6:	4a18      	ldr	r2, [pc, #96]	; (8001438 <FLASH_OB_WriteUser+0x78>)
 80013d8:	609a      	str	r2, [r3, #8]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 80013da:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 80013de:	f000 f90b 	bl	80015f8 <FLASH_WaitForLastOperation>
 80013e2:	4603      	mov	r3, r0
 80013e4:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
 80013e8:	2b04      	cmp	r3, #4
 80013ea:	d11b      	bne.n	8001424 <FLASH_OB_WriteUser+0x64>
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= FLASH_CR_OPTPG; 
 80013ec:	4a10      	ldr	r2, [pc, #64]	; (8001430 <FLASH_OB_WriteUser+0x70>)
 80013ee:	4b10      	ldr	r3, [pc, #64]	; (8001430 <FLASH_OB_WriteUser+0x70>)
 80013f0:	691b      	ldr	r3, [r3, #16]
 80013f2:	f043 0310 	orr.w	r3, r3, #16
 80013f6:	6113      	str	r3, [r2, #16]
           
	  OB->USER = OB_USER | 0x88;
 80013f8:	4a10      	ldr	r2, [pc, #64]	; (800143c <FLASH_OB_WriteUser+0x7c>)
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	f063 0377 	orn	r3, r3, #119	; 0x77
 8001400:	b2db      	uxtb	r3, r3
 8001402:	b29b      	uxth	r3, r3
 8001404:	8053      	strh	r3, [r2, #2]
  
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8001406:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 800140a:	f000 f8f5 	bl	80015f8 <FLASH_WaitForLastOperation>
 800140e:	4603      	mov	r3, r0
 8001410:	73fb      	strb	r3, [r7, #15]

    if(status != FLASH_TIMEOUT)
 8001412:	7bfb      	ldrb	r3, [r7, #15]
 8001414:	2b05      	cmp	r3, #5
 8001416:	d005      	beq.n	8001424 <FLASH_OB_WriteUser+0x64>
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= ~FLASH_CR_OPTPG;
 8001418:	4a05      	ldr	r2, [pc, #20]	; (8001430 <FLASH_OB_WriteUser+0x70>)
 800141a:	4b05      	ldr	r3, [pc, #20]	; (8001430 <FLASH_OB_WriteUser+0x70>)
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	f023 0310 	bic.w	r3, r3, #16
 8001422:	6113      	str	r3, [r2, #16]
    }
  }    
  /* Return the Option Byte program Status */
  return status;
 8001424:	7bfb      	ldrb	r3, [r7, #15]

}
 8001426:	4618      	mov	r0, r3
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40022000 	.word	0x40022000
 8001434:	45670123 	.word	0x45670123
 8001438:	cdef89ab 	.word	0xcdef89ab
 800143c:	1ffff800 	.word	0x1ffff800

08001440 <FLASH_ProgramOptionByteData>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_ProgramOptionByteData(uint32_t Address, uint8_t Data)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	460b      	mov	r3, r1
 800144a:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 800144c:	2304      	movs	r3, #4
 800144e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8001450:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8001454:	f000 f8d0 	bl	80015f8 <FLASH_WaitForLastOperation>
 8001458:	4603      	mov	r3, r0
 800145a:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	2b04      	cmp	r3, #4
 8001460:	d118      	bne.n	8001494 <FLASH_ProgramOptionByteData+0x54>
  {
    /* Enables the Option Bytes Programming operation */
    FLASH->CR |= FLASH_CR_OPTPG; 
 8001462:	4a0f      	ldr	r2, [pc, #60]	; (80014a0 <FLASH_ProgramOptionByteData+0x60>)
 8001464:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <FLASH_ProgramOptionByteData+0x60>)
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	f043 0310 	orr.w	r3, r3, #16
 800146c:	6113      	str	r3, [r2, #16]
    *(__IO uint16_t*)Address = Data;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	78fa      	ldrb	r2, [r7, #3]
 8001472:	b292      	uxth	r2, r2
 8001474:	801a      	strh	r2, [r3, #0]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8001476:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 800147a:	f000 f8bd 	bl	80015f8 <FLASH_WaitForLastOperation>
 800147e:	4603      	mov	r3, r0
 8001480:	73fb      	strb	r3, [r7, #15]
    
    if(status != FLASH_TIMEOUT)
 8001482:	7bfb      	ldrb	r3, [r7, #15]
 8001484:	2b05      	cmp	r3, #5
 8001486:	d005      	beq.n	8001494 <FLASH_ProgramOptionByteData+0x54>
    {
      /* If the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= ~FLASH_CR_OPTPG;
 8001488:	4a05      	ldr	r2, [pc, #20]	; (80014a0 <FLASH_ProgramOptionByteData+0x60>)
 800148a:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <FLASH_ProgramOptionByteData+0x60>)
 800148c:	691b      	ldr	r3, [r3, #16]
 800148e:	f023 0310 	bic.w	r3, r3, #16
 8001492:	6113      	str	r3, [r2, #16]
    }
  }
  /* Return the Option Byte Data Program Status */
  return status;
 8001494:	7bfb      	ldrb	r3, [r7, #15]
}
 8001496:	4618      	mov	r0, r3
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40022000 	.word	0x40022000

080014a4 <FLASH_OB_GetUser>:
  * @brief  Returns the FLASH User Option Bytes values.
  * @param  None
  * @retval The FLASH User Option Bytes .
  */
uint8_t FLASH_OB_GetUser(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return (uint8_t)(FLASH->OBR >> 8);
 80014a8:	4b04      	ldr	r3, [pc, #16]	; (80014bc <FLASH_OB_GetUser+0x18>)
 80014aa:	69db      	ldr	r3, [r3, #28]
 80014ac:	0a1b      	lsrs	r3, r3, #8
 80014ae:	b2db      	uxtb	r3, r3
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	40022000 	.word	0x40022000

080014c0 <FLASH_OB_GetWRP>:
  * @brief  Returns the FLASH Write Protection Option Bytes value.
  * @param  None
  * @retval The FLASH Write Protection Option Bytes value
  */
uint32_t FLASH_OB_GetWRP(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (uint32_t)(FLASH->WRPR);
 80014c4:	4b03      	ldr	r3, [pc, #12]	; (80014d4 <FLASH_OB_GetWRP+0x14>)
 80014c6:	6a1b      	ldr	r3, [r3, #32]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	40022000 	.word	0x40022000

080014d8 <FLASH_OB_GetRDP>:
  * @brief  Checks whether the FLASH Read out Protection Status is set or not.
  * @param  None
  * @retval FLASH ReadOut Protection Status(SET or RESET)
  */
FlagStatus FLASH_OB_GetRDP(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
  FlagStatus readstatus = RESET;
 80014de:	2300      	movs	r3, #0
 80014e0:	71fb      	strb	r3, [r7, #7]
  
  if ((uint8_t)(FLASH->OBR & (FLASH_OBR_RDPRT1 | FLASH_OBR_RDPRT2)) != RESET)
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <FLASH_OB_GetRDP+0x30>)
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	f003 0306 	and.w	r3, r3, #6
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d002      	beq.n	80014f6 <FLASH_OB_GetRDP+0x1e>
  {
    readstatus = SET;
 80014f0:	2301      	movs	r3, #1
 80014f2:	71fb      	strb	r3, [r7, #7]
 80014f4:	e001      	b.n	80014fa <FLASH_OB_GetRDP+0x22>
  }
  else
  {
    readstatus = RESET;
 80014f6:	2300      	movs	r3, #0
 80014f8:	71fb      	strb	r3, [r7, #7]
  }
  return readstatus;
 80014fa:	79fb      	ldrb	r3, [r7, #7]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	40022000 	.word	0x40022000

0800150c <FLASH_ITConfig>:
  *     @arg FLASH_IT_EOP: FLASH end of programming Interrupt
  *     @arg FLASH_IT_ERR: FLASH Error Interrupt 
  * @retval None 
  */
void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_IT(FLASH_IT)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 8001518:	78fb      	ldrb	r3, [r7, #3]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d006      	beq.n	800152c <FLASH_ITConfig+0x20>
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 800151e:	490a      	ldr	r1, [pc, #40]	; (8001548 <FLASH_ITConfig+0x3c>)
 8001520:	4b09      	ldr	r3, [pc, #36]	; (8001548 <FLASH_ITConfig+0x3c>)
 8001522:	691a      	ldr	r2, [r3, #16]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4313      	orrs	r3, r2
 8001528:	610b      	str	r3, [r1, #16]
  else
  {
    /* Disable the interrupt sources */
    FLASH->CR &= ~(uint32_t)FLASH_IT;
  }
}
 800152a:	e006      	b.n	800153a <FLASH_ITConfig+0x2e>
    FLASH->CR &= ~(uint32_t)FLASH_IT;
 800152c:	4906      	ldr	r1, [pc, #24]	; (8001548 <FLASH_ITConfig+0x3c>)
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <FLASH_ITConfig+0x3c>)
 8001530:	691a      	ldr	r2, [r3, #16]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	43db      	mvns	r3, r3
 8001536:	4013      	ands	r3, r2
 8001538:	610b      	str	r3, [r1, #16]
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	40022000 	.word	0x40022000

0800154c <FLASH_GetFlagStatus>:
  *     @arg FLASH_FLAG_WRPERR: FLASH Write protected error flag
  *     @arg FLASH_FLAG_EOP: FLASH End of Programming flag        
  * @retval The new state of FLASH_FLAG (SET or RESET).
  */
FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8001554:	2300      	movs	r3, #0
 8001556:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG));

  if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
 8001558:	4b08      	ldr	r3, [pc, #32]	; (800157c <FLASH_GetFlagStatus+0x30>)
 800155a:	68da      	ldr	r2, [r3, #12]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4013      	ands	r3, r2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d002      	beq.n	800156a <FLASH_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 8001564:	2301      	movs	r3, #1
 8001566:	73fb      	strb	r3, [r7, #15]
 8001568:	e001      	b.n	800156e <FLASH_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 800156a:	2300      	movs	r3, #0
 800156c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the new state of FLASH_FLAG (SET or RESET) */
  return bitstatus; 
 800156e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	40022000 	.word	0x40022000

08001580 <FLASH_ClearFlag>:
  *     @arg FLASH_FLAG_WRPERR: FLASH Write protected error flag
  *     @arg FLASH_FLAG_EOP: FLASH End of Programming flag                
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8001588:	4a04      	ldr	r2, [pc, #16]	; (800159c <FLASH_ClearFlag+0x1c>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	60d3      	str	r3, [r2, #12]
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	40022000 	.word	0x40022000

080015a0 <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: 
  *         FLASH_BUSY, FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP or FLASH_COMPLETE.
  */
FLASH_Status FLASH_GetStatus(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
  FLASH_Status FLASHstatus = FLASH_COMPLETE;
 80015a6:	2304      	movs	r3, #4
 80015a8:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 80015aa:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <FLASH_GetStatus+0x54>)
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d102      	bne.n	80015bc <FLASH_GetStatus+0x1c>
  {
    FLASHstatus = FLASH_BUSY;
 80015b6:	2301      	movs	r3, #1
 80015b8:	71fb      	strb	r3, [r7, #7]
 80015ba:	e013      	b.n	80015e4 <FLASH_GetStatus+0x44>
  }
  else 
  {  
    if((FLASH->SR & (uint32_t)FLASH_FLAG_WRPERR)!= (uint32_t)0x00)
 80015bc:	4b0d      	ldr	r3, [pc, #52]	; (80015f4 <FLASH_GetStatus+0x54>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	f003 0310 	and.w	r3, r3, #16
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d002      	beq.n	80015ce <FLASH_GetStatus+0x2e>
    { 
      FLASHstatus = FLASH_ERROR_WRP;
 80015c8:	2302      	movs	r3, #2
 80015ca:	71fb      	strb	r3, [r7, #7]
 80015cc:	e00a      	b.n	80015e4 <FLASH_GetStatus+0x44>
    }
    else 
    {
      if((FLASH->SR & (uint32_t)(FLASH_SR_PGERR)) != (uint32_t)0x00)
 80015ce:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <FLASH_GetStatus+0x54>)
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	f003 0304 	and.w	r3, r3, #4
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d002      	beq.n	80015e0 <FLASH_GetStatus+0x40>
      {
        FLASHstatus = FLASH_ERROR_PROGRAM; 
 80015da:	2303      	movs	r3, #3
 80015dc:	71fb      	strb	r3, [r7, #7]
 80015de:	e001      	b.n	80015e4 <FLASH_GetStatus+0x44>
      }
      else
      {
        FLASHstatus = FLASH_COMPLETE;
 80015e0:	2304      	movs	r3, #4
 80015e2:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
  /* Return the FLASH Status */
  return FLASHstatus;
 80015e4:	79fb      	ldrb	r3, [r7, #7]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	40022000 	.word	0x40022000

080015f8 <FLASH_WaitForLastOperation>:
  * @param  Timeout: FLASH programming Timeout
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, 
  *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  FLASH_Status status = FLASH_COMPLETE;
 8001600:	2304      	movs	r3, #4
 8001602:	73fb      	strb	r3, [r7, #15]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 8001604:	f7ff ffcc 	bl	80015a0 <FLASH_GetStatus>
 8001608:	4603      	mov	r3, r0
 800160a:	73fb      	strb	r3, [r7, #15]
  
  /* Wait for a FLASH operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 800160c:	e006      	b.n	800161c <FLASH_WaitForLastOperation+0x24>
  {
    status = FLASH_GetStatus();
 800160e:	f7ff ffc7 	bl	80015a0 <FLASH_GetStatus>
 8001612:	4603      	mov	r3, r0
 8001614:	73fb      	strb	r3, [r7, #15]
    Timeout--;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	3b01      	subs	r3, #1
 800161a:	607b      	str	r3, [r7, #4]
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d102      	bne.n	8001628 <FLASH_WaitForLastOperation+0x30>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1f2      	bne.n	800160e <FLASH_WaitForLastOperation+0x16>
  }
  
  if(Timeout == 0x00 )
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <FLASH_WaitForLastOperation+0x3a>
  {
    status = FLASH_TIMEOUT;
 800162e:	2305      	movs	r3, #5
 8001630:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the operation status */
  return status;
 8001632:	7bfb      	ldrb	r3, [r7, #15]
}
 8001634:	4618      	mov	r0, r3
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <FMC_NORSRAMDeInit>:
  *            @arg FMC_Bank1_NORSRAM3: FMC Bank1 NOR/SRAM3 
  *            @arg FMC_Bank1_NORSRAM4: FMC Bank1 NOR/SRAM4 
  * @retval None
  */
void FMC_NORSRAMDeInit(uint32_t FMC_Bank)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_NORSRAM_BANK(FMC_Bank));
  
  /* FMC_Bank1_NORSRAM1 */
  if(FMC_Bank == FMC_Bank1_NORSRAM1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d107      	bne.n	800165a <FMC_NORSRAMDeInit+0x1e>
  {
    FMC_Bank1->BTCR[FMC_Bank] = 0x000030DB;    
 800164a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f243 01db 	movw	r1, #12507	; 0x30db
 8001654:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001658:	e006      	b.n	8001668 <FMC_NORSRAMDeInit+0x2c>
  }
  /* FMC_Bank1_NORSRAM2,  FMC_Bank1_NORSRAM3 or FMC_Bank1_NORSRAM4 */
  else
  {   
    FMC_Bank1->BTCR[FMC_Bank] = 0x000030D2; 
 800165a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f243 01d2 	movw	r1, #12498	; 0x30d2
 8001664:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  }
  FMC_Bank1->BTCR[FMC_Bank + 1] = 0x0FFFFFFF;
 8001668:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3301      	adds	r3, #1
 8001670:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8001674:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  FMC_Bank1E->BWTR[FMC_Bank] = 0x0FFFFFFF;  
 8001678:	4a05      	ldr	r2, [pc, #20]	; (8001690 <FMC_NORSRAMDeInit+0x54>)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8001680:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	a0000104 	.word	0xa0000104

08001694 <FMC_NORSRAMInit>:
  *         that contains the configuration information for the FMC NOR/SRAM 
  *         specified Banks.                       
  * @retval None
  */
void FMC_NORSRAMInit(FMC_NORSRAMInitTypeDef* FMC_NORSRAMInitStruct)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision));
  assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode)); 
  
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 800169c:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	6851      	ldr	r1, [r2, #4]
            FMC_NORSRAMInitStruct->FMC_MemoryType |
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	6892      	ldr	r2, [r2, #8]
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
 80016ac:	4311      	orrs	r1, r2
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	68d2      	ldr	r2, [r2, #12]
            FMC_NORSRAMInitStruct->FMC_MemoryType |
 80016b2:	4311      	orrs	r1, r2
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	6912      	ldr	r2, [r2, #16]
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
 80016b8:	4311      	orrs	r1, r2
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	6952      	ldr	r2, [r2, #20]
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
 80016be:	4311      	orrs	r1, r2
            FMC_NORSRAMInitStruct->FMC_WrapMode |
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	6992      	ldr	r2, [r2, #24]
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
 80016c4:	4311      	orrs	r1, r2
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	69d2      	ldr	r2, [r2, #28]
            FMC_NORSRAMInitStruct->FMC_WrapMode |
 80016ca:	4311      	orrs	r1, r2
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	6a12      	ldr	r2, [r2, #32]
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
 80016d0:	4311      	orrs	r1, r2
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
 80016d6:	4311      	orrs	r1, r2
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	6a92      	ldr	r2, [r2, #40]	; 0x28
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
 80016dc:	4311      	orrs	r1, r2
            FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
 80016e2:	4311      	orrs	r1, r2
            FMC_NORSRAMInitStruct->FMC_WriteBurst;
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	6b12      	ldr	r2, [r2, #48]	; 0x30
            FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
 80016e8:	430a      	orrs	r2, r1
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 80016ea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

            
  if(FMC_NORSRAMInitStruct->FMC_MemoryType == FMC_MemoryType_NOR)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	2b08      	cmp	r3, #8
 80016f4:	d10d      	bne.n	8001712 <FMC_NORSRAMInit+0x7e>
  {
    FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
 80016f6:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	6812      	ldr	r2, [r2, #0]
 8001706:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800170a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800170e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
 8001712:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	3301      	adds	r3, #1
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001720:	6811      	ldr	r1, [r2, #0]
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001726:	6852      	ldr	r2, [r2, #4]
 8001728:	0112      	lsls	r2, r2, #4
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
 800172a:	4311      	orrs	r1, r2
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001730:	6892      	ldr	r2, [r2, #8]
 8001732:	0212      	lsls	r2, r2, #8
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
 8001734:	4311      	orrs	r1, r2
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800173a:	68d2      	ldr	r2, [r2, #12]
 800173c:	0412      	lsls	r2, r2, #16
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
 800173e:	4311      	orrs	r1, r2
            (((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision)-1) << 20) |
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001744:	6912      	ldr	r2, [r2, #16]
 8001746:	3a01      	subs	r2, #1
 8001748:	0512      	lsls	r2, r2, #20
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
 800174a:	4311      	orrs	r1, r2
            (((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency)-2) << 24) |
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001750:	6952      	ldr	r2, [r2, #20]
 8001752:	3a02      	subs	r2, #2
 8001754:	0612      	lsls	r2, r2, #24
            (((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision)-1) << 20) |
 8001756:	4311      	orrs	r1, r2
             FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode;
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800175c:	6992      	ldr	r2, [r2, #24]
            (((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency)-2) << 24) |
 800175e:	430a      	orrs	r2, r1
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
 8001760:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
     
  /* NOR/SRAM Bank timing register for write configuration, if extended mode is used */
  if(FMC_NORSRAMInitStruct->FMC_ExtendedMode == FMC_ExtendedMode_Enable)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001768:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800176c:	d122      	bne.n	80017b4 <FMC_NORSRAMInit+0x120>
    assert_param(IS_FMC_DATASETUP_TIME(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime));
    assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision));
    assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency));
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 800176e:	4818      	ldr	r0, [pc, #96]	; (80017d0 <FMC_NORSRAMInit+0x13c>)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001778:	6811      	ldr	r1, [r2, #0]
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800177e:	6852      	ldr	r2, [r2, #4]
 8001780:	0112      	lsls	r2, r2, #4
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
 8001782:	4311      	orrs	r1, r2
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001788:	6892      	ldr	r2, [r2, #8]
 800178a:	0212      	lsls	r2, r2, #8
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
 800178c:	4311      	orrs	r1, r2
               (((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision)-1) << 20) |
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001792:	6912      	ldr	r2, [r2, #16]
 8001794:	3a01      	subs	r2, #1
 8001796:	0512      	lsls	r2, r2, #20
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
 8001798:	4311      	orrs	r1, r2
               (((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency)-2) << 24) |
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800179e:	6952      	ldr	r2, [r2, #20]
 80017a0:	3a02      	subs	r2, #2
 80017a2:	0612      	lsls	r2, r2, #24
               (((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision)-1) << 20) |
 80017a4:	4311      	orrs	r1, r2
               FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode;
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80017aa:	6992      	ldr	r2, [r2, #24]
               (((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency)-2) << 24) |
 80017ac:	430a      	orrs	r2, r1
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 80017ae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  else
  {
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] = 0x0FFFFFFF;
  }
  
}
 80017b2:	e006      	b.n	80017c2 <FMC_NORSRAMInit+0x12e>
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] = 0x0FFFFFFF;
 80017b4:	4a06      	ldr	r2, [pc, #24]	; (80017d0 <FMC_NORSRAMInit+0x13c>)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80017be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	a0000104 	.word	0xa0000104

080017d4 <FMC_NORSRAMStructInit>:
  * @param  FMC_NORSRAMInitStruct: pointer to a FMC_NORSRAMInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void FMC_NORSRAMStructInit(FMC_NORSRAMInitTypeDef* FMC_NORSRAMInitStruct)
{  
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* Reset NOR/SRAM Init structure parameters values */
  FMC_NORSRAMInitStruct->FMC_Bank = FMC_Bank1_NORSRAM1;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
  FMC_NORSRAMInitStruct->FMC_DataAddressMux = FMC_DataAddressMux_Enable;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2202      	movs	r2, #2
 80017e6:	605a      	str	r2, [r3, #4]
  FMC_NORSRAMInitStruct->FMC_MemoryType = FMC_MemoryType_SRAM;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
  FMC_NORSRAMInitStruct->FMC_MemoryDataWidth = FMC_NORSRAM_MemoryDataWidth_16b;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2210      	movs	r2, #16
 80017f2:	60da      	str	r2, [r3, #12]
  FMC_NORSRAMInitStruct->FMC_BurstAccessMode = FMC_BurstAccessMode_Disable;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	611a      	str	r2, [r3, #16]
  FMC_NORSRAMInitStruct->FMC_AsynchronousWait = FMC_AsynchronousWait_Disable;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	62da      	str	r2, [r3, #44]	; 0x2c
  FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity = FMC_WaitSignalPolarity_Low;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	615a      	str	r2, [r3, #20]
  FMC_NORSRAMInitStruct->FMC_WrapMode = FMC_WrapMode_Disable;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	619a      	str	r2, [r3, #24]
  FMC_NORSRAMInitStruct->FMC_WaitSignalActive = FMC_WaitSignalActive_BeforeWaitState;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	61da      	str	r2, [r3, #28]
  FMC_NORSRAMInitStruct->FMC_WriteOperation = FMC_WriteOperation_Enable;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001818:	621a      	str	r2, [r3, #32]
  FMC_NORSRAMInitStruct->FMC_WaitSignal = FMC_WaitSignal_Enable;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001820:	625a      	str	r2, [r3, #36]	; 0x24
  FMC_NORSRAMInitStruct->FMC_ExtendedMode = FMC_ExtendedMode_Disable;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	629a      	str	r2, [r3, #40]	; 0x28
  FMC_NORSRAMInitStruct->FMC_WriteBurst = FMC_WriteBurst_Disable;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	631a      	str	r2, [r3, #48]	; 0x30
  
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime = 15;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001832:	220f      	movs	r2, #15
 8001834:	601a      	str	r2, [r3, #0]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime = 15;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800183a:	220f      	movs	r2, #15
 800183c:	605a      	str	r2, [r3, #4]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime = 255;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001842:	22ff      	movs	r2, #255	; 0xff
 8001844:	609a      	str	r2, [r3, #8]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration = 15;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800184a:	220f      	movs	r2, #15
 800184c:	60da      	str	r2, [r3, #12]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision = 15;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001852:	220f      	movs	r2, #15
 8001854:	611a      	str	r2, [r3, #16]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency = 15;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800185a:	220f      	movs	r2, #15
 800185c:	615a      	str	r2, [r3, #20]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode = FMC_AccessMode_A; 
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001862:	2200      	movs	r2, #0
 8001864:	619a      	str	r2, [r3, #24]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime = 15;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800186a:	220f      	movs	r2, #15
 800186c:	601a      	str	r2, [r3, #0]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime = 15;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001872:	220f      	movs	r2, #15
 8001874:	605a      	str	r2, [r3, #4]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime = 255;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800187a:	22ff      	movs	r2, #255	; 0xff
 800187c:	609a      	str	r2, [r3, #8]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_BusTurnAroundDuration = 15;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001882:	220f      	movs	r2, #15
 8001884:	60da      	str	r2, [r3, #12]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision = 16;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800188a:	2210      	movs	r2, #16
 800188c:	611a      	str	r2, [r3, #16]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency = 17;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001892:	2211      	movs	r2, #17
 8001894:	615a      	str	r2, [r3, #20]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode = FMC_AccessMode_A;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800189a:	2200      	movs	r2, #0
 800189c:	619a      	str	r2, [r3, #24]
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <FMC_NORSRAMCmd>:
  *            @arg FMC_Bank1_NORSRAM4: FMC Bank1 NOR/SRAM4 
  * @param  NewState: new state of the FMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_NORSRAMCmd(uint32_t FMC_Bank, FunctionalState NewState)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b083      	sub	sp, #12
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
 80018b2:	460b      	mov	r3, r1
 80018b4:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FMC_NORSRAM_BANK(FMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80018b6:	78fb      	ldrb	r3, [r7, #3]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d00c      	beq.n	80018d6 <FMC_NORSRAMCmd+0x2c>
  {
    /* Enable the selected NOR/SRAM Bank by setting the PBKEN bit in the BCRx register */
    FMC_Bank1->BTCR[FMC_Bank] |= BCR_MBKEN_SET;
 80018bc:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 80018c0:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ca:	f043 0201 	orr.w	r2, r3, #1
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  else
  {
    /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
    FMC_Bank1->BTCR[FMC_Bank] &= BCR_MBKEN_RESET;
  }
}
 80018d4:	e00b      	b.n	80018ee <FMC_NORSRAMCmd+0x44>
    FMC_Bank1->BTCR[FMC_Bank] &= BCR_MBKEN_RESET;
 80018d6:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 80018da:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018e4:	4b05      	ldr	r3, [pc, #20]	; (80018fc <FMC_NORSRAMCmd+0x52>)
 80018e6:	4013      	ands	r3, r2
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	000ffffe 	.word	0x000ffffe

08001900 <FMC_NANDDeInit>:
  *            @arg FMC_Bank2_NAND: FMC Bank2 NAND 
  *            @arg FMC_Bank3_NAND: FMC Bank3 NAND 
  * @retval None
  */
void FMC_NANDDeInit(uint32_t FMC_Bank)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_NAND_BANK(FMC_Bank));
  
  if(FMC_Bank == FMC_Bank2_NAND)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b10      	cmp	r3, #16
 800190c:	d10e      	bne.n	800192c <FMC_NANDDeInit+0x2c>
  {
    /* Set the FMC_Bank2 registers to their reset values */
    FMC_Bank2->PCR2 = 0x00000018;
 800190e:	4b11      	ldr	r3, [pc, #68]	; (8001954 <FMC_NANDDeInit+0x54>)
 8001910:	2218      	movs	r2, #24
 8001912:	601a      	str	r2, [r3, #0]
    FMC_Bank2->SR2 = 0x00000040;
 8001914:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <FMC_NANDDeInit+0x54>)
 8001916:	2240      	movs	r2, #64	; 0x40
 8001918:	605a      	str	r2, [r3, #4]
    FMC_Bank2->PMEM2 = 0xFCFCFCFC;
 800191a:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <FMC_NANDDeInit+0x54>)
 800191c:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8001920:	609a      	str	r2, [r3, #8]
    FMC_Bank2->PATT2 = 0xFCFCFCFC;  
 8001922:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <FMC_NANDDeInit+0x54>)
 8001924:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8001928:	60da      	str	r2, [r3, #12]
    FMC_Bank3->PCR3 = 0x00000018;
    FMC_Bank3->SR3 = 0x00000040;
    FMC_Bank3->PMEM3 = 0xFCFCFCFC;
    FMC_Bank3->PATT3 = 0xFCFCFCFC; 
  }  
}
 800192a:	e00d      	b.n	8001948 <FMC_NANDDeInit+0x48>
    FMC_Bank3->PCR3 = 0x00000018;
 800192c:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <FMC_NANDDeInit+0x58>)
 800192e:	2218      	movs	r2, #24
 8001930:	601a      	str	r2, [r3, #0]
    FMC_Bank3->SR3 = 0x00000040;
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <FMC_NANDDeInit+0x58>)
 8001934:	2240      	movs	r2, #64	; 0x40
 8001936:	605a      	str	r2, [r3, #4]
    FMC_Bank3->PMEM3 = 0xFCFCFCFC;
 8001938:	4b07      	ldr	r3, [pc, #28]	; (8001958 <FMC_NANDDeInit+0x58>)
 800193a:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800193e:	609a      	str	r2, [r3, #8]
    FMC_Bank3->PATT3 = 0xFCFCFCFC; 
 8001940:	4b05      	ldr	r3, [pc, #20]	; (8001958 <FMC_NANDDeInit+0x58>)
 8001942:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8001946:	60da      	str	r2, [r3, #12]
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	a0000060 	.word	0xa0000060
 8001958:	a0000080 	.word	0xa0000080

0800195c <FMC_NANDInit>:
  * @param  FMC_NANDInitStruct : pointer to a FMC_NANDInitTypeDef structure that
  *         contains the configuration information for the FMC NAND specified Banks.                       
  * @retval None
  */
void FMC_NANDInit(FMC_NANDInitTypeDef* FMC_NANDInitStruct)
{
 800195c:	b480      	push	{r7}
 800195e:	b087      	sub	sp, #28
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t tmppcr = 0x00000000, tmppmem = 0x00000000, tmppatt = 0x00000000; 
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	2300      	movs	r3, #0
 800196a:	613b      	str	r3, [r7, #16]
 800196c:	2300      	movs	r3, #0
 800196e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FMC_WAIT_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685a      	ldr	r2, [r3, #4]
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
            PCR_MEMORYTYPE_NAND |
 8001978:	431a      	orrs	r2, r3
            FMC_NANDInitStruct->FMC_ECC |
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68db      	ldr	r3, [r3, #12]
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
 800197e:	431a      	orrs	r2, r3
            FMC_NANDInitStruct->FMC_ECCPageSize |
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	691b      	ldr	r3, [r3, #16]
            FMC_NANDInitStruct->FMC_ECC |
 8001984:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	025b      	lsls	r3, r3, #9
            FMC_NANDInitStruct->FMC_ECCPageSize |
 800198c:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	035b      	lsls	r3, r3, #13
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
 8001994:	4313      	orrs	r3, r2
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
 8001996:	f043 0308 	orr.w	r3, r3, #8
 800199a:	617b      	str	r3, [r7, #20]
            
  /* Set tmppmem value according to FMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	69db      	ldr	r3, [r3, #28]
 80019a0:	681a      	ldr	r2, [r3, #0]
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	021b      	lsls	r3, r3, #8
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 80019aa:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	69db      	ldr	r3, [r3, #28]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	041b      	lsls	r3, r3, #16
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 80019b4:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	061b      	lsls	r3, r3, #24
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 80019be:	4313      	orrs	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
            
  /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a1b      	ldr	r3, [r3, #32]
 80019c6:	681a      	ldr	r2, [r3, #0]
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a1b      	ldr	r3, [r3, #32]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	021b      	lsls	r3, r3, #8
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 80019d0:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a1b      	ldr	r3, [r3, #32]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	041b      	lsls	r3, r3, #16
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 80019da:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	061b      	lsls	r3, r3, #24
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 80019e4:	4313      	orrs	r3, r2
 80019e6:	60fb      	str	r3, [r7, #12]
  
  if(FMC_NANDInitStruct->FMC_Bank == FMC_Bank2_NAND)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2b10      	cmp	r3, #16
 80019ee:	d109      	bne.n	8001a04 <FMC_NANDInit+0xa8>
  {
    /* FMC_Bank2_NAND registers configuration */
    FMC_Bank2->PCR2 = tmppcr;
 80019f0:	4a0c      	ldr	r2, [pc, #48]	; (8001a24 <FMC_NANDInit+0xc8>)
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	6013      	str	r3, [r2, #0]
    FMC_Bank2->PMEM2 = tmppmem;
 80019f6:	4a0b      	ldr	r2, [pc, #44]	; (8001a24 <FMC_NANDInit+0xc8>)
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	6093      	str	r3, [r2, #8]
    FMC_Bank2->PATT2 = tmppatt;
 80019fc:	4a09      	ldr	r2, [pc, #36]	; (8001a24 <FMC_NANDInit+0xc8>)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	60d3      	str	r3, [r2, #12]
    /* FMC_Bank3_NAND registers configuration */
    FMC_Bank3->PCR3 = tmppcr;
    FMC_Bank3->PMEM3 = tmppmem;
    FMC_Bank3->PATT3 = tmppatt;
  }
}
 8001a02:	e008      	b.n	8001a16 <FMC_NANDInit+0xba>
    FMC_Bank3->PCR3 = tmppcr;
 8001a04:	4a08      	ldr	r2, [pc, #32]	; (8001a28 <FMC_NANDInit+0xcc>)
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	6013      	str	r3, [r2, #0]
    FMC_Bank3->PMEM3 = tmppmem;
 8001a0a:	4a07      	ldr	r2, [pc, #28]	; (8001a28 <FMC_NANDInit+0xcc>)
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	6093      	str	r3, [r2, #8]
    FMC_Bank3->PATT3 = tmppatt;
 8001a10:	4a05      	ldr	r2, [pc, #20]	; (8001a28 <FMC_NANDInit+0xcc>)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	60d3      	str	r3, [r2, #12]
}
 8001a16:	bf00      	nop
 8001a18:	371c      	adds	r7, #28
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	a0000060 	.word	0xa0000060
 8001a28:	a0000080 	.word	0xa0000080

08001a2c <FMC_NANDStructInit>:
  * @param  FMC_NANDInitStruct: pointer to a FMC_NANDInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void FMC_NANDStructInit(FMC_NANDInitTypeDef* FMC_NANDInitStruct)
{ 
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Reset NAND Init structure parameters values */
  FMC_NANDInitStruct->FMC_Bank = FMC_Bank2_NAND;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2210      	movs	r2, #16
 8001a38:	601a      	str	r2, [r3, #0]
  FMC_NANDInitStruct->FMC_Waitfeature = FMC_Waitfeature_Disable;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	605a      	str	r2, [r3, #4]
  FMC_NANDInitStruct->FMC_MemoryDataWidth = FMC_NAND_MemoryDataWidth_16b;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2210      	movs	r2, #16
 8001a44:	609a      	str	r2, [r3, #8]
  FMC_NANDInitStruct->FMC_ECC = FMC_ECC_Disable;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	60da      	str	r2, [r3, #12]
  FMC_NANDInitStruct->FMC_ECCPageSize = FMC_ECCPageSize_256Bytes;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	611a      	str	r2, [r3, #16]
  FMC_NANDInitStruct->FMC_TCLRSetupTime = 0x0;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	615a      	str	r2, [r3, #20]
  FMC_NANDInitStruct->FMC_TARSetupTime = 0x0;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	619a      	str	r2, [r3, #24]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime = 252;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	22fc      	movs	r2, #252	; 0xfc
 8001a64:	601a      	str	r2, [r3, #0]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime = 252;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	22fc      	movs	r2, #252	; 0xfc
 8001a6c:	605a      	str	r2, [r3, #4]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime = 252;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	22fc      	movs	r2, #252	; 0xfc
 8001a74:	609a      	str	r2, [r3, #8]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime = 252;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	22fc      	movs	r2, #252	; 0xfc
 8001a7c:	60da      	str	r2, [r3, #12]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime = 252;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a1b      	ldr	r3, [r3, #32]
 8001a82:	22fc      	movs	r2, #252	; 0xfc
 8001a84:	601a      	str	r2, [r3, #0]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime = 252;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	22fc      	movs	r2, #252	; 0xfc
 8001a8c:	605a      	str	r2, [r3, #4]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime = 252;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	22fc      	movs	r2, #252	; 0xfc
 8001a94:	609a      	str	r2, [r3, #8]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime = 252;	  
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a1b      	ldr	r3, [r3, #32]
 8001a9a:	22fc      	movs	r2, #252	; 0xfc
 8001a9c:	60da      	str	r2, [r3, #12]
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <FMC_NANDCmd>:
  *            @arg FMC_Bank3_NAND: FMC Bank3 NAND
  * @param  NewState: new state of the FMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_NANDCmd(uint32_t FMC_Bank, FunctionalState NewState)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FMC_NAND_BANK(FMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001ab6:	78fb      	ldrb	r3, [r7, #3]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d010      	beq.n	8001ade <FMC_NANDCmd+0x34>
  {
    /* Enable the selected NAND Bank by setting the PBKEN bit in the PCRx register */
    if(FMC_Bank == FMC_Bank2_NAND)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b10      	cmp	r3, #16
 8001ac0:	d106      	bne.n	8001ad0 <FMC_NANDCmd+0x26>
    {
      FMC_Bank2->PCR2 |= PCR_PBKEN_SET;
 8001ac2:	4a12      	ldr	r2, [pc, #72]	; (8001b0c <FMC_NANDCmd+0x62>)
 8001ac4:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <FMC_NANDCmd+0x62>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f043 0304 	orr.w	r3, r3, #4
 8001acc:	6013      	str	r3, [r2, #0]
    else
    {
      FMC_Bank3->PCR3 &= PCR_PBKEN_RESET;
    }
  }
}
 8001ace:	e016      	b.n	8001afe <FMC_NANDCmd+0x54>
      FMC_Bank3->PCR3 |= PCR_PBKEN_SET;
 8001ad0:	4a0f      	ldr	r2, [pc, #60]	; (8001b10 <FMC_NANDCmd+0x66>)
 8001ad2:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <FMC_NANDCmd+0x66>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f043 0304 	orr.w	r3, r3, #4
 8001ada:	6013      	str	r3, [r2, #0]
}
 8001adc:	e00f      	b.n	8001afe <FMC_NANDCmd+0x54>
    if(FMC_Bank == FMC_Bank2_NAND)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2b10      	cmp	r3, #16
 8001ae2:	d106      	bne.n	8001af2 <FMC_NANDCmd+0x48>
      FMC_Bank2->PCR2 &= PCR_PBKEN_RESET;
 8001ae4:	4909      	ldr	r1, [pc, #36]	; (8001b0c <FMC_NANDCmd+0x62>)
 8001ae6:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <FMC_NANDCmd+0x62>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <FMC_NANDCmd+0x6a>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	600b      	str	r3, [r1, #0]
}
 8001af0:	e005      	b.n	8001afe <FMC_NANDCmd+0x54>
      FMC_Bank3->PCR3 &= PCR_PBKEN_RESET;
 8001af2:	4907      	ldr	r1, [pc, #28]	; (8001b10 <FMC_NANDCmd+0x66>)
 8001af4:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <FMC_NANDCmd+0x66>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <FMC_NANDCmd+0x6a>)
 8001afa:	4013      	ands	r3, r2
 8001afc:	600b      	str	r3, [r1, #0]
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	a0000060 	.word	0xa0000060
 8001b10:	a0000080 	.word	0xa0000080
 8001b14:	000ffffb 	.word	0x000ffffb

08001b18 <FMC_NANDECCCmd>:
  * @param  NewState: new state of the FMC NAND ECC feature.  
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_NANDECCCmd(uint32_t FMC_Bank, FunctionalState NewState)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	460b      	mov	r3, r1
 8001b22:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FMC_NAND_BANK(FMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001b24:	78fb      	ldrb	r3, [r7, #3]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d010      	beq.n	8001b4c <FMC_NANDECCCmd+0x34>
  {
    /* Enable the selected NAND Bank ECC function by setting the ECCEN bit in the PCRx register */
    if(FMC_Bank == FMC_Bank2_NAND)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2b10      	cmp	r3, #16
 8001b2e:	d106      	bne.n	8001b3e <FMC_NANDECCCmd+0x26>
    {
      FMC_Bank2->PCR2 |= PCR_ECCEN_SET;
 8001b30:	4a11      	ldr	r2, [pc, #68]	; (8001b78 <FMC_NANDECCCmd+0x60>)
 8001b32:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <FMC_NANDECCCmd+0x60>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b3a:	6013      	str	r3, [r2, #0]
    else
    {
      FMC_Bank3->PCR3 &= PCR_ECCEN_RESET;
    }
  }
}
 8001b3c:	e016      	b.n	8001b6c <FMC_NANDECCCmd+0x54>
      FMC_Bank3->PCR3 |= PCR_ECCEN_SET;
 8001b3e:	4a0f      	ldr	r2, [pc, #60]	; (8001b7c <FMC_NANDECCCmd+0x64>)
 8001b40:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <FMC_NANDECCCmd+0x64>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b48:	6013      	str	r3, [r2, #0]
}
 8001b4a:	e00f      	b.n	8001b6c <FMC_NANDECCCmd+0x54>
    if(FMC_Bank == FMC_Bank2_NAND)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b10      	cmp	r3, #16
 8001b50:	d106      	bne.n	8001b60 <FMC_NANDECCCmd+0x48>
      FMC_Bank2->PCR2 &= PCR_ECCEN_RESET;
 8001b52:	4909      	ldr	r1, [pc, #36]	; (8001b78 <FMC_NANDECCCmd+0x60>)
 8001b54:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <FMC_NANDECCCmd+0x60>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <FMC_NANDECCCmd+0x68>)
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	600b      	str	r3, [r1, #0]
}
 8001b5e:	e005      	b.n	8001b6c <FMC_NANDECCCmd+0x54>
      FMC_Bank3->PCR3 &= PCR_ECCEN_RESET;
 8001b60:	4906      	ldr	r1, [pc, #24]	; (8001b7c <FMC_NANDECCCmd+0x64>)
 8001b62:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <FMC_NANDECCCmd+0x64>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <FMC_NANDECCCmd+0x68>)
 8001b68:	4013      	ands	r3, r2
 8001b6a:	600b      	str	r3, [r1, #0]
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	a0000060 	.word	0xa0000060
 8001b7c:	a0000080 	.word	0xa0000080
 8001b80:	000fffbf 	.word	0x000fffbf

08001b84 <FMC_GetECC>:
  *            @arg FMC_Bank2_NAND: FMC Bank2 NAND 
  *            @arg FMC_Bank3_NAND: FMC Bank3 NAND
  * @retval The Error Correction Code (ECC) value.
  */
uint32_t FMC_GetECC(uint32_t FMC_Bank)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t eccval = 0x00000000;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60fb      	str	r3, [r7, #12]
  
  if(FMC_Bank == FMC_Bank2_NAND)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b10      	cmp	r3, #16
 8001b94:	d103      	bne.n	8001b9e <FMC_GetECC+0x1a>
  {
    /* Get the ECCR2 register value */
    eccval = FMC_Bank2->ECCR2;
 8001b96:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <FMC_GetECC+0x30>)
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	e002      	b.n	8001ba4 <FMC_GetECC+0x20>
  }
  else
  {
    /* Get the ECCR3 register value */
    eccval = FMC_Bank3->ECCR3;
 8001b9e:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <FMC_GetECC+0x34>)
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	60fb      	str	r3, [r7, #12]
  }
  /* Return the error correction code value */
  return(eccval);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3714      	adds	r7, #20
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	a0000060 	.word	0xa0000060
 8001bb8:	a0000080 	.word	0xa0000080

08001bbc <FMC_PCCARDDeInit>:
  * @brief  De-initializes the FMC PCCARD Bank registers to their default reset values.
  * @param  None                       
  * @retval None
  */
void FMC_PCCARDDeInit(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* Set the FMC_Bank4 registers to their reset values */
  FMC_Bank4->PCR4 = 0x00000018; 
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <FMC_PCCARDDeInit+0x34>)
 8001bc2:	2218      	movs	r2, #24
 8001bc4:	601a      	str	r2, [r3, #0]
  FMC_Bank4->SR4 = 0x00000000;	
 8001bc6:	4b0a      	ldr	r3, [pc, #40]	; (8001bf0 <FMC_PCCARDDeInit+0x34>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	605a      	str	r2, [r3, #4]
  FMC_Bank4->PMEM4 = 0xFCFCFCFC;
 8001bcc:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <FMC_PCCARDDeInit+0x34>)
 8001bce:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8001bd2:	609a      	str	r2, [r3, #8]
  FMC_Bank4->PATT4 = 0xFCFCFCFC;
 8001bd4:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <FMC_PCCARDDeInit+0x34>)
 8001bd6:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8001bda:	60da      	str	r2, [r3, #12]
  FMC_Bank4->PIO4 = 0xFCFCFCFC;
 8001bdc:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <FMC_PCCARDDeInit+0x34>)
 8001bde:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8001be2:	611a      	str	r2, [r3, #16]
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	a00000a0 	.word	0xa00000a0

08001bf4 <FMC_PCCARDInit>:
  * @param  FMC_PCCARDInitStruct : pointer to a FMC_PCCARDInitTypeDef structure
  *         that contains the configuration information for the FMC PCCARD Bank.                       
  * @retval None
  */
void FMC_PCCARDInit(FMC_PCCARDInitTypeDef* FMC_PCCARDInitStruct)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  assert_param(IS_FMC_WAIT_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FMC_PCCARDInitStruct parameters */
  FMC_Bank4->PCR4 = (uint32_t)FMC_PCCARDInitStruct->FMC_Waitfeature |
 8001bfc:	4927      	ldr	r1, [pc, #156]	; (8001c9c <FMC_PCCARDInit+0xa8>)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681a      	ldr	r2, [r3, #0]
                     FMC_NAND_MemoryDataWidth_16b |  
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	025b      	lsls	r3, r3, #9
                     FMC_NAND_MemoryDataWidth_16b |  
 8001c08:	431a      	orrs	r2, r3
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	035b      	lsls	r3, r3, #13
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
 8001c10:	4313      	orrs	r3, r2
 8001c12:	f043 0310 	orr.w	r3, r3, #16
  FMC_Bank4->PCR4 = (uint32_t)FMC_PCCARDInitStruct->FMC_Waitfeature |
 8001c16:	600b      	str	r3, [r1, #0]
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 8001c18:	4920      	ldr	r1, [pc, #128]	; (8001c9c <FMC_PCCARDInit+0xa8>)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	681a      	ldr	r2, [r3, #0]
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	021b      	lsls	r3, r3, #8
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 8001c28:	431a      	orrs	r2, r3
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	041b      	lsls	r3, r3, #16
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8001c32:	431a      	orrs	r2, r3
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	061b      	lsls	r3, r3, #24
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8001c3c:	4313      	orrs	r3, r2
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 8001c3e:	608b      	str	r3, [r1, #8]
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 8001c40:	4916      	ldr	r1, [pc, #88]	; (8001c9c <FMC_PCCARDInit+0xa8>)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	681a      	ldr	r2, [r3, #0]
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	021b      	lsls	r3, r3, #8
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 8001c50:	431a      	orrs	r2, r3
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	041b      	lsls	r3, r3, #16
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8001c5a:	431a      	orrs	r2, r3
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	061b      	lsls	r3, r3, #24
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8001c64:	4313      	orrs	r3, r2
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 8001c66:	60cb      	str	r3, [r1, #12]
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
 8001c68:	490c      	ldr	r1, [pc, #48]	; (8001c9c <FMC_PCCARDInit+0xa8>)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	681a      	ldr	r2, [r3, #0]
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	695b      	ldr	r3, [r3, #20]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	021b      	lsls	r3, r3, #8
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
 8001c78:	431a      	orrs	r2, r3
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	041b      	lsls	r3, r3, #16
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8001c82:	431a      	orrs	r2, r3
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime << 24);             
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	695b      	ldr	r3, [r3, #20]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	061b      	lsls	r3, r3, #24
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8001c8c:	4313      	orrs	r3, r2
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
 8001c8e:	610b      	str	r3, [r1, #16]
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	a00000a0 	.word	0xa00000a0

08001ca0 <FMC_PCCARDStructInit>:
  * @param  FMC_PCCARDInitStruct: pointer to a FMC_PCCARDInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void FMC_PCCARDStructInit(FMC_PCCARDInitTypeDef* FMC_PCCARDInitStruct)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Reset PCCARD Init structure parameters values */
  FMC_PCCARDInitStruct->FMC_Waitfeature = FMC_Waitfeature_Disable;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
  FMC_PCCARDInitStruct->FMC_TCLRSetupTime = 0;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	605a      	str	r2, [r3, #4]
  FMC_PCCARDInitStruct->FMC_TARSetupTime = 0;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	609a      	str	r2, [r3, #8]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime = 252;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	22fc      	movs	r2, #252	; 0xfc
 8001cc0:	601a      	str	r2, [r3, #0]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime = 252;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	22fc      	movs	r2, #252	; 0xfc
 8001cc8:	605a      	str	r2, [r3, #4]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime = 252;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	22fc      	movs	r2, #252	; 0xfc
 8001cd0:	609a      	str	r2, [r3, #8]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime = 252;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	22fc      	movs	r2, #252	; 0xfc
 8001cd8:	60da      	str	r2, [r3, #12]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime = 252;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	22fc      	movs	r2, #252	; 0xfc
 8001ce0:	601a      	str	r2, [r3, #0]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime = 252;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	22fc      	movs	r2, #252	; 0xfc
 8001ce8:	605a      	str	r2, [r3, #4]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime = 252;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	22fc      	movs	r2, #252	; 0xfc
 8001cf0:	609a      	str	r2, [r3, #8]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime = 252;	
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	22fc      	movs	r2, #252	; 0xfc
 8001cf8:	60da      	str	r2, [r3, #12]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime = 252;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	22fc      	movs	r2, #252	; 0xfc
 8001d00:	601a      	str	r2, [r3, #0]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime = 252;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	22fc      	movs	r2, #252	; 0xfc
 8001d08:	605a      	str	r2, [r3, #4]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime = 252;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	22fc      	movs	r2, #252	; 0xfc
 8001d10:	609a      	str	r2, [r3, #8]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime = 252;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	22fc      	movs	r2, #252	; 0xfc
 8001d18:	60da      	str	r2, [r3, #12]
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <FMC_PCCARDCmd>:
  * @param  NewState: new state of the PCCARD Memory Bank.  
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_PCCARDCmd(FunctionalState NewState)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d006      	beq.n	8001d44 <FMC_PCCARDCmd+0x1e>
  {
    /* Enable the PCCARD Bank by setting the PBKEN bit in the PCR4 register */
    FMC_Bank4->PCR4 |= PCR_PBKEN_SET;
 8001d36:	4a09      	ldr	r2, [pc, #36]	; (8001d5c <FMC_PCCARDCmd+0x36>)
 8001d38:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <FMC_PCCARDCmd+0x36>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f043 0304 	orr.w	r3, r3, #4
 8001d40:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the PCCARD Bank by clearing the PBKEN bit in the PCR4 register */
    FMC_Bank4->PCR4 &= PCR_PBKEN_RESET;
  }
}
 8001d42:	e005      	b.n	8001d50 <FMC_PCCARDCmd+0x2a>
    FMC_Bank4->PCR4 &= PCR_PBKEN_RESET;
 8001d44:	4905      	ldr	r1, [pc, #20]	; (8001d5c <FMC_PCCARDCmd+0x36>)
 8001d46:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <FMC_PCCARDCmd+0x36>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <FMC_PCCARDCmd+0x3a>)
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	600b      	str	r3, [r1, #0]
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	a00000a0 	.word	0xa00000a0
 8001d60:	000ffffb 	.word	0x000ffffb

08001d64 <FMC_ITConfig>:
  * @param  NewState: new state of the specified FMC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_ITConfig(uint32_t FMC_Bank, uint32_t FMC_IT, FunctionalState NewState)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_FMC_IT_BANK(FMC_Bank));
  assert_param(IS_FMC_IT(FMC_IT));	
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d01b      	beq.n	8001db0 <FMC_ITConfig+0x4c>
  {
    /* Enable the selected FMC_Bank2 interrupts */
    if(FMC_Bank == FMC_Bank2_NAND)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2b10      	cmp	r3, #16
 8001d7c:	d106      	bne.n	8001d8c <FMC_ITConfig+0x28>
    {
      FMC_Bank2->SR2 |= FMC_IT;
 8001d7e:	491e      	ldr	r1, [pc, #120]	; (8001df8 <FMC_ITConfig+0x94>)
 8001d80:	4b1d      	ldr	r3, [pc, #116]	; (8001df8 <FMC_ITConfig+0x94>)
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	604b      	str	r3, [r1, #4]
    else
    {
      FMC_Bank4->SR4 &= (uint32_t)~FMC_IT;    
    }
  }
}
 8001d8a:	e02f      	b.n	8001dec <FMC_ITConfig+0x88>
    else if (FMC_Bank == FMC_Bank3_NAND)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d92:	d106      	bne.n	8001da2 <FMC_ITConfig+0x3e>
      FMC_Bank3->SR3 |= FMC_IT;
 8001d94:	4919      	ldr	r1, [pc, #100]	; (8001dfc <FMC_ITConfig+0x98>)
 8001d96:	4b19      	ldr	r3, [pc, #100]	; (8001dfc <FMC_ITConfig+0x98>)
 8001d98:	685a      	ldr	r2, [r3, #4]
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	604b      	str	r3, [r1, #4]
}
 8001da0:	e024      	b.n	8001dec <FMC_ITConfig+0x88>
      FMC_Bank4->SR4 |= FMC_IT;    
 8001da2:	4917      	ldr	r1, [pc, #92]	; (8001e00 <FMC_ITConfig+0x9c>)
 8001da4:	4b16      	ldr	r3, [pc, #88]	; (8001e00 <FMC_ITConfig+0x9c>)
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	604b      	str	r3, [r1, #4]
}
 8001dae:	e01d      	b.n	8001dec <FMC_ITConfig+0x88>
    if(FMC_Bank == FMC_Bank2_NAND)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2b10      	cmp	r3, #16
 8001db4:	d107      	bne.n	8001dc6 <FMC_ITConfig+0x62>
      FMC_Bank2->SR2 &= (uint32_t)~FMC_IT;
 8001db6:	4910      	ldr	r1, [pc, #64]	; (8001df8 <FMC_ITConfig+0x94>)
 8001db8:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <FMC_ITConfig+0x94>)
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	604b      	str	r3, [r1, #4]
}
 8001dc4:	e012      	b.n	8001dec <FMC_ITConfig+0x88>
    else if (FMC_Bank == FMC_Bank3_NAND)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dcc:	d107      	bne.n	8001dde <FMC_ITConfig+0x7a>
      FMC_Bank3->SR3 &= (uint32_t)~FMC_IT;
 8001dce:	490b      	ldr	r1, [pc, #44]	; (8001dfc <FMC_ITConfig+0x98>)
 8001dd0:	4b0a      	ldr	r3, [pc, #40]	; (8001dfc <FMC_ITConfig+0x98>)
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	4013      	ands	r3, r2
 8001dda:	604b      	str	r3, [r1, #4]
}
 8001ddc:	e006      	b.n	8001dec <FMC_ITConfig+0x88>
      FMC_Bank4->SR4 &= (uint32_t)~FMC_IT;    
 8001dde:	4908      	ldr	r1, [pc, #32]	; (8001e00 <FMC_ITConfig+0x9c>)
 8001de0:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <FMC_ITConfig+0x9c>)
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	43db      	mvns	r3, r3
 8001de8:	4013      	ands	r3, r2
 8001dea:	604b      	str	r3, [r1, #4]
}
 8001dec:	bf00      	nop
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	a0000060 	.word	0xa0000060
 8001dfc:	a0000080 	.word	0xa0000080
 8001e00:	a00000a0 	.word	0xa00000a0

08001e04 <FMC_GetFlagStatus>:
  *            @arg FMC_FLAG_FallingEdge: Falling edge detection Flag.
  *            @arg FMC_FLAG_FEMPT: Fifo empty Flag.
  * @retval The new state of FMC_FLAG (SET or RESET).
  */
FlagStatus FMC_GetFlagStatus(uint32_t FMC_Bank, uint32_t FMC_FLAG)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsr = 0x00000000;
 8001e12:	2300      	movs	r3, #0
 8001e14:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_FMC_GETFLAG_BANK(FMC_Bank));
  assert_param(IS_FMC_GET_FLAG(FMC_FLAG));
  
  if(FMC_Bank == FMC_Bank2_NAND)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b10      	cmp	r3, #16
 8001e1a:	d103      	bne.n	8001e24 <FMC_GetFlagStatus+0x20>
  {
    tmpsr = FMC_Bank2->SR2;
 8001e1c:	4b10      	ldr	r3, [pc, #64]	; (8001e60 <FMC_GetFlagStatus+0x5c>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	60bb      	str	r3, [r7, #8]
 8001e22:	e00a      	b.n	8001e3a <FMC_GetFlagStatus+0x36>
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e2a:	d103      	bne.n	8001e34 <FMC_GetFlagStatus+0x30>
  {
    tmpsr = FMC_Bank3->SR3;
 8001e2c:	4b0d      	ldr	r3, [pc, #52]	; (8001e64 <FMC_GetFlagStatus+0x60>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	e002      	b.n	8001e3a <FMC_GetFlagStatus+0x36>
  }
  else
  {
    tmpsr = FMC_Bank4->SR4;
 8001e34:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <FMC_GetFlagStatus+0x64>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	60bb      	str	r3, [r7, #8]
  }
  
  /* Get the flag status */
  if ((tmpsr & FMC_FLAG) != FMC_FLAG )
 8001e3a:	68ba      	ldr	r2, [r7, #8]
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	401a      	ands	r2, r3
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d002      	beq.n	8001e4c <FMC_GetFlagStatus+0x48>
  {
    bitstatus = RESET;
 8001e46:	2300      	movs	r3, #0
 8001e48:	73fb      	strb	r3, [r7, #15]
 8001e4a:	e001      	b.n	8001e50 <FMC_GetFlagStatus+0x4c>
  }
  else
  {
    bitstatus = SET;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3714      	adds	r7, #20
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	a0000060 	.word	0xa0000060
 8001e64:	a0000080 	.word	0xa0000080
 8001e68:	a00000a0 	.word	0xa00000a0

08001e6c <FMC_ClearFlag>:
  *            @arg FMC_FLAG_Level: Level detection Flag.
  *            @arg FMC_FLAG_FallingEdge: Falling edge detection Flag.
  * @retval None
  */
void FMC_ClearFlag(uint32_t FMC_Bank, uint32_t FMC_FLAG)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
 /* Check the parameters */
  assert_param(IS_FMC_GETFLAG_BANK(FMC_Bank));
  assert_param(IS_FMC_CLEAR_FLAG(FMC_FLAG)) ;
    
  if(FMC_Bank == FMC_Bank2_NAND)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b10      	cmp	r3, #16
 8001e7a:	d107      	bne.n	8001e8c <FMC_ClearFlag+0x20>
  {
    FMC_Bank2->SR2 &= (~FMC_FLAG); 
 8001e7c:	4910      	ldr	r1, [pc, #64]	; (8001ec0 <FMC_ClearFlag+0x54>)
 8001e7e:	4b10      	ldr	r3, [pc, #64]	; (8001ec0 <FMC_ClearFlag+0x54>)
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	43db      	mvns	r3, r3
 8001e86:	4013      	ands	r3, r2
 8001e88:	604b      	str	r3, [r1, #4]
  else
  {
    FMC_Bank4->SR4 &= (~FMC_FLAG);
  }
  
}
 8001e8a:	e012      	b.n	8001eb2 <FMC_ClearFlag+0x46>
  else if(FMC_Bank == FMC_Bank3_NAND)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e92:	d107      	bne.n	8001ea4 <FMC_ClearFlag+0x38>
    FMC_Bank3->SR3 &= (~FMC_FLAG);
 8001e94:	490b      	ldr	r1, [pc, #44]	; (8001ec4 <FMC_ClearFlag+0x58>)
 8001e96:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <FMC_ClearFlag+0x58>)
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	604b      	str	r3, [r1, #4]
}
 8001ea2:	e006      	b.n	8001eb2 <FMC_ClearFlag+0x46>
    FMC_Bank4->SR4 &= (~FMC_FLAG);
 8001ea4:	4908      	ldr	r1, [pc, #32]	; (8001ec8 <FMC_ClearFlag+0x5c>)
 8001ea6:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <FMC_ClearFlag+0x5c>)
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	43db      	mvns	r3, r3
 8001eae:	4013      	ands	r3, r2
 8001eb0:	604b      	str	r3, [r1, #4]
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	a0000060 	.word	0xa0000060
 8001ec4:	a0000080 	.word	0xa0000080
 8001ec8:	a00000a0 	.word	0xa00000a0

08001ecc <FMC_GetITStatus>:
  *            @arg FMC_IT_Level: Level edge detection interrupt.
  *            @arg FMC_IT_FallingEdge: Falling edge detection interrupt.  
  * @retval The new state of FMC_IT (SET or RESET).
  */
ITStatus FMC_GetITStatus(uint32_t FMC_Bank, uint32_t FMC_IT)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b087      	sub	sp, #28
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsr    = 0;
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
  uint32_t itstatus = 0;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60fb      	str	r3, [r7, #12]
  uint32_t itenable = 0; 
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_FMC_IT_BANK(FMC_Bank));
  assert_param(IS_FMC_GET_IT(FMC_IT));
  
  if(FMC_Bank == FMC_Bank2_NAND)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b10      	cmp	r3, #16
 8001eea:	d103      	bne.n	8001ef4 <FMC_GetITStatus+0x28>
  {
    tmpsr = FMC_Bank2->SR2;
 8001eec:	4b14      	ldr	r3, [pc, #80]	; (8001f40 <FMC_GetITStatus+0x74>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	e00a      	b.n	8001f0a <FMC_GetITStatus+0x3e>
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001efa:	d103      	bne.n	8001f04 <FMC_GetITStatus+0x38>
  {
    tmpsr = FMC_Bank3->SR3;
 8001efc:	4b11      	ldr	r3, [pc, #68]	; (8001f44 <FMC_GetITStatus+0x78>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	e002      	b.n	8001f0a <FMC_GetITStatus+0x3e>
  }
  /* FMC_Bank4 PCCARD */  
  else
  {
    tmpsr = FMC_Bank4->SR4;
 8001f04:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <FMC_GetITStatus+0x7c>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	613b      	str	r3, [r7, #16]
  }
  
  /* get the IT enable bit status*/
  itenable = tmpsr & FMC_IT;
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	60bb      	str	r3, [r7, #8]
  
  /* get the corresponding IT Flag status*/
  itstatus = tmpsr & (FMC_IT >> 3);   
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	08da      	lsrs	r2, r3, #3
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	60fb      	str	r3, [r7, #12]
  
  if ((itstatus != (uint32_t)RESET)  && (itenable != (uint32_t)RESET))
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d005      	beq.n	8001f2e <FMC_GetITStatus+0x62>
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d002      	beq.n	8001f2e <FMC_GetITStatus+0x62>
  {
    bitstatus = SET;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	75fb      	strb	r3, [r7, #23]
 8001f2c:	e001      	b.n	8001f32 <FMC_GetITStatus+0x66>
  }
  else
  {
    bitstatus = RESET;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	75fb      	strb	r3, [r7, #23]
  }
  return bitstatus; 
 8001f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	371c      	adds	r7, #28
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	a0000060 	.word	0xa0000060
 8001f44:	a0000080 	.word	0xa0000080
 8001f48:	a00000a0 	.word	0xa00000a0

08001f4c <FMC_ClearITPendingBit>:
  *            @arg FMC_IT_Level: Level edge detection interrupt.
  *            @arg FMC_IT_FallingEdge: Falling edge detection interrupt.
  * @retval None
  */
void FMC_ClearITPendingBit(uint32_t FMC_Bank, uint32_t FMC_IT)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_IT_BANK(FMC_Bank));
  assert_param(IS_FMC_IT(FMC_IT));
    
  if(FMC_Bank == FMC_Bank2_NAND)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b10      	cmp	r3, #16
 8001f5a:	d108      	bne.n	8001f6e <FMC_ClearITPendingBit+0x22>
  {
    FMC_Bank2->SR2 &= ~(FMC_IT >> 3); 
 8001f5c:	4911      	ldr	r1, [pc, #68]	; (8001fa4 <FMC_ClearITPendingBit+0x58>)
 8001f5e:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <FMC_ClearITPendingBit+0x58>)
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	08db      	lsrs	r3, r3, #3
 8001f66:	43db      	mvns	r3, r3
 8001f68:	4013      	ands	r3, r2
 8001f6a:	604b      	str	r3, [r1, #4]
  /* FMC_Bank4 PCCARD */  
  else
  {
    FMC_Bank4->SR4 &= ~(FMC_IT >> 3);
  }
}
 8001f6c:	e014      	b.n	8001f98 <FMC_ClearITPendingBit+0x4c>
  else if(FMC_Bank == FMC_Bank3_NAND)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f74:	d108      	bne.n	8001f88 <FMC_ClearITPendingBit+0x3c>
    FMC_Bank3->SR3 &= ~(FMC_IT >> 3);
 8001f76:	490c      	ldr	r1, [pc, #48]	; (8001fa8 <FMC_ClearITPendingBit+0x5c>)
 8001f78:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <FMC_ClearITPendingBit+0x5c>)
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	08db      	lsrs	r3, r3, #3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	4013      	ands	r3, r2
 8001f84:	604b      	str	r3, [r1, #4]
}
 8001f86:	e007      	b.n	8001f98 <FMC_ClearITPendingBit+0x4c>
    FMC_Bank4->SR4 &= ~(FMC_IT >> 3);
 8001f88:	4908      	ldr	r1, [pc, #32]	; (8001fac <FMC_ClearITPendingBit+0x60>)
 8001f8a:	4b08      	ldr	r3, [pc, #32]	; (8001fac <FMC_ClearITPendingBit+0x60>)
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	08db      	lsrs	r3, r3, #3
 8001f92:	43db      	mvns	r3, r3
 8001f94:	4013      	ands	r3, r2
 8001f96:	604b      	str	r3, [r1, #4]
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	a0000060 	.word	0xa0000060
 8001fa8:	a0000080 	.word	0xa0000080
 8001fac:	a00000a0 	.word	0xa00000a0

08001fb0 <GPIO_DeInit>:
  *         values.
  * @param  GPIOx: where x can be (A, B, C, D, E or F) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fbe:	d10a      	bne.n	8001fd6 <GPIO_DeInit+0x26>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001fc6:	f004 fac1 	bl	800654c <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
 8001fca:	2100      	movs	r1, #0
 8001fcc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001fd0:	f004 fabc 	bl	800654c <RCC_AHBPeriphResetCmd>
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOH, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOH, DISABLE);
    }
  }
}
 8001fd4:	e067      	b.n	80020a6 <GPIO_DeInit+0xf6>
  else if(GPIOx == GPIOB)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a35      	ldr	r2, [pc, #212]	; (80020b0 <GPIO_DeInit+0x100>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d10a      	bne.n	8001ff4 <GPIO_DeInit+0x44>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8001fde:	2101      	movs	r1, #1
 8001fe0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001fe4:	f004 fab2 	bl	800654c <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
 8001fe8:	2100      	movs	r1, #0
 8001fea:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001fee:	f004 faad 	bl	800654c <RCC_AHBPeriphResetCmd>
}
 8001ff2:	e058      	b.n	80020a6 <GPIO_DeInit+0xf6>
  else if(GPIOx == GPIOC)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a2f      	ldr	r2, [pc, #188]	; (80020b4 <GPIO_DeInit+0x104>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d10a      	bne.n	8002012 <GPIO_DeInit+0x62>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002002:	f004 faa3 	bl	800654c <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
 8002006:	2100      	movs	r1, #0
 8002008:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800200c:	f004 fa9e 	bl	800654c <RCC_AHBPeriphResetCmd>
}
 8002010:	e049      	b.n	80020a6 <GPIO_DeInit+0xf6>
  else if(GPIOx == GPIOD)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a28      	ldr	r2, [pc, #160]	; (80020b8 <GPIO_DeInit+0x108>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d10a      	bne.n	8002030 <GPIO_DeInit+0x80>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
 800201a:	2101      	movs	r1, #1
 800201c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002020:	f004 fa94 	bl	800654c <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
 8002024:	2100      	movs	r1, #0
 8002026:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800202a:	f004 fa8f 	bl	800654c <RCC_AHBPeriphResetCmd>
}
 800202e:	e03a      	b.n	80020a6 <GPIO_DeInit+0xf6>
  else if(GPIOx == GPIOE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a22      	ldr	r2, [pc, #136]	; (80020bc <GPIO_DeInit+0x10c>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d10a      	bne.n	800204e <GPIO_DeInit+0x9e>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 8002038:	2101      	movs	r1, #1
 800203a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800203e:	f004 fa85 	bl	800654c <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, DISABLE);
 8002042:	2100      	movs	r1, #0
 8002044:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002048:	f004 fa80 	bl	800654c <RCC_AHBPeriphResetCmd>
}
 800204c:	e02b      	b.n	80020a6 <GPIO_DeInit+0xf6>
  else if(GPIOx == GPIOF)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a1b      	ldr	r2, [pc, #108]	; (80020c0 <GPIO_DeInit+0x110>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d10a      	bne.n	800206c <GPIO_DeInit+0xbc>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
 8002056:	2101      	movs	r1, #1
 8002058:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800205c:	f004 fa76 	bl	800654c <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
 8002060:	2100      	movs	r1, #0
 8002062:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002066:	f004 fa71 	bl	800654c <RCC_AHBPeriphResetCmd>
}
 800206a:	e01c      	b.n	80020a6 <GPIO_DeInit+0xf6>
  else if(GPIOx == GPIOG)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a15      	ldr	r2, [pc, #84]	; (80020c4 <GPIO_DeInit+0x114>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d10a      	bne.n	800208a <GPIO_DeInit+0xda>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOG, ENABLE);
 8002074:	2101      	movs	r1, #1
 8002076:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800207a:	f004 fa67 	bl	800654c <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOG, DISABLE);
 800207e:	2100      	movs	r1, #0
 8002080:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002084:	f004 fa62 	bl	800654c <RCC_AHBPeriphResetCmd>
}
 8002088:	e00d      	b.n	80020a6 <GPIO_DeInit+0xf6>
    if(GPIOx == GPIOH)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a0e      	ldr	r2, [pc, #56]	; (80020c8 <GPIO_DeInit+0x118>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d109      	bne.n	80020a6 <GPIO_DeInit+0xf6>
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOH, ENABLE);
 8002092:	2101      	movs	r1, #1
 8002094:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002098:	f004 fa58 	bl	800654c <RCC_AHBPeriphResetCmd>
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOH, DISABLE);
 800209c:	2100      	movs	r1, #0
 800209e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80020a2:	f004 fa53 	bl	800654c <RCC_AHBPeriphResetCmd>
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	48000400 	.word	0x48000400
 80020b4:	48000800 	.word	0x48000800
 80020b8:	48000c00 	.word	0x48000c00
 80020bc:	48001000 	.word	0x48001000
 80020c0:	48001400 	.word	0x48001400
 80020c4:	48001800 	.word	0x48001800
 80020c8:	48001c00 	.word	0x48001c00

080020cc <GPIO_Init>:
  *         GPIO_Pin_0->GPIO_Pin_2, GPIO_Pin_4, GPIO_Pin_6, GPIO_Pin_9 
  *                       and GPIO_Pin_10 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{ 
 80020cc:	b480      	push	{r7}
 80020ce:	b087      	sub	sp, #28
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80020d6:	2300      	movs	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]
 80020da:	2300      	movs	r3, #0
 80020dc:	613b      	str	r3, [r7, #16]
 80020de:	2300      	movs	r3, #0
 80020e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00;
 80020e2:	2300      	movs	r3, #0
 80020e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	e07e      	b.n	80021ea <GPIO_Init+0x11e>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80020ec:	2201      	movs	r2, #1
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	4013      	ands	r3, r2
 80020fe:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	429a      	cmp	r2, r3
 8002106:	d16d      	bne.n	80021e4 <GPIO_Init+0x118>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	791b      	ldrb	r3, [r3, #4]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d003      	beq.n	8002118 <GPIO_Init+0x4c>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	791b      	ldrb	r3, [r3, #4]
 8002114:	2b02      	cmp	r3, #2
 8002116:	d134      	bne.n	8002182 <GPIO_Init+0xb6>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	2103      	movs	r1, #3
 8002122:	fa01 f303 	lsl.w	r3, r1, r3
 8002126:	43db      	mvns	r3, r3
 8002128:	401a      	ands	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	795b      	ldrb	r3, [r3, #5]
 8002136:	4619      	mov	r1, r3
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	fa01 f303 	lsl.w	r3, r1, r3
 8002140:	431a      	orrs	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	889b      	ldrh	r3, [r3, #4]
 800214a:	b29a      	uxth	r2, r3
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	b29b      	uxth	r3, r3
 8002150:	4619      	mov	r1, r3
 8002152:	2301      	movs	r3, #1
 8002154:	408b      	lsls	r3, r1
 8002156:	b29b      	uxth	r3, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	b29b      	uxth	r3, r3
 800215c:	4013      	ands	r3, r2
 800215e:	b29a      	uxth	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	889b      	ldrh	r3, [r3, #4]
 8002168:	b29a      	uxth	r2, r3
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	799b      	ldrb	r3, [r3, #6]
 800216e:	4619      	mov	r1, r3
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	b29b      	uxth	r3, r3
 8002174:	fa01 f303 	lsl.w	r3, r1, r3
 8002178:	b29b      	uxth	r3, r3
 800217a:	4313      	orrs	r3, r2
 800217c:	b29a      	uxth	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	809a      	strh	r2, [r3, #4]
      }
      
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	2103      	movs	r1, #3
 800218c:	fa01 f303 	lsl.w	r3, r1, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	401a      	ands	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	791b      	ldrb	r3, [r3, #4]
 80021a0:	4619      	mov	r1, r3
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	fa01 f303 	lsl.w	r3, r1, r3
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	601a      	str	r2, [r3, #0]

      /* Use temporary variable to update PUPDR register configuration, to avoid 
         unexpected transition in the GPIO pin configuration. */
      tmpreg = GPIOx->PUPDR;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	2203      	movs	r2, #3
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43db      	mvns	r3, r3
 80021c4:	68ba      	ldr	r2, [r7, #8]
 80021c6:	4013      	ands	r3, r2
 80021c8:	60bb      	str	r3, [r7, #8]
      tmpreg |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	79db      	ldrb	r3, [r3, #7]
 80021ce:	461a      	mov	r2, r3
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	68ba      	ldr	r2, [r7, #8]
 80021da:	4313      	orrs	r3, r2
 80021dc:	60bb      	str	r3, [r7, #8]
      GPIOx->PUPDR = tmpreg;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68ba      	ldr	r2, [r7, #8]
 80021e2:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	3301      	adds	r3, #1
 80021e8:	617b      	str	r3, [r7, #20]
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	2b0f      	cmp	r3, #15
 80021ee:	f67f af7d 	bls.w	80020ec <GPIO_Init+0x20>
    }
  }
}
 80021f2:	bf00      	nop
 80021f4:	371c      	adds	r7, #28
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <GPIO_StructInit>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800220c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2202      	movs	r2, #2
 8002218:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	71da      	strb	r2, [r3, #7]
}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002232:	b480      	push	{r7}
 8002234:	b085      	sub	sp, #20
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	460b      	mov	r3, r1
 800223c:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
 800223e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002242:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 8002244:	887b      	ldrh	r3, [r7, #2]
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	4313      	orrs	r3, r2
 800224a:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8002252:	887a      	ldrh	r2, [r7, #2]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	69db      	ldr	r3, [r3, #28]
 8002268:	60fb      	str	r3, [r7, #12]
}
 800226a:	bf00      	nop
 800226c:	3714      	adds	r7, #20
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <GPIO_ReadInputDataBit>:
  *         (0..15) for GPIOA, GPIOB, GPIOC, GPIOD or GPIOE;
  *         (0..2, 4, 6, 9..10) for GPIOF.
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002276:	b480      	push	{r7}
 8002278:	b085      	sub	sp, #20
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
 800227e:	460b      	mov	r3, r1
 8002280:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8002282:	2300      	movs	r3, #0
 8002284:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	8a1b      	ldrh	r3, [r3, #16]
 800228a:	b29a      	uxth	r2, r3
 800228c:	887b      	ldrh	r3, [r7, #2]
 800228e:	4013      	ands	r3, r2
 8002290:	b29b      	uxth	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d002      	beq.n	800229c <GPIO_ReadInputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 8002296:	2301      	movs	r3, #1
 8002298:	73fb      	strb	r3, [r7, #15]
 800229a:	e001      	b.n	80022a0 <GPIO_ReadInputDataBit+0x2a>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800229c:	2300      	movs	r3, #0
 800229e:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3714      	adds	r7, #20
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <GPIO_ReadInputData>:
  * @brief  Reads the specified input port pin.
  * @param  GPIOx: where x can be (A, B, C, D, E, F, G or H) to select the GPIO peripheral.
  * @retval The input port pin value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	8a1b      	ldrh	r3, [r3, #16]
 80022ba:	b29b      	uxth	r3, r3
}
 80022bc:	4618      	mov	r0, r3
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <GPIO_ReadOutputDataBit>:
  *         (0..15) for GPIOA, GPIOB, GPIOC, GPIOD or GPIOE;
  *         (0..2, 4, 6, 9..10) for GPIOF.
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80022d4:	2300      	movs	r3, #0
 80022d6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	8a9b      	ldrh	r3, [r3, #20]
 80022dc:	b29a      	uxth	r2, r3
 80022de:	887b      	ldrh	r3, [r7, #2]
 80022e0:	4013      	ands	r3, r2
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d002      	beq.n	80022ee <GPIO_ReadOutputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 80022e8:	2301      	movs	r3, #1
 80022ea:	73fb      	strb	r3, [r7, #15]
 80022ec:	e001      	b.n	80022f2 <GPIO_ReadOutputDataBit+0x2a>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80022ee:	2300      	movs	r3, #0
 80022f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A, B, C, D, E, F, G or H) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->ODR);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	8a9b      	ldrh	r3, [r3, #20]
 800230c:	b29b      	uxth	r3, r3
}
 800230e:	4618      	mov	r0, r3
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <GPIO_SetBits>:
  *         (0..15) for GPIOA, GPIOB, GPIOC, GPIOD or GPIOE;
  *         (0..2, 4, 6, 9..10) for GPIOF.
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
 8002322:	460b      	mov	r3, r1
 8002324:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8002326:	887a      	ldrh	r2, [r7, #2]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	619a      	str	r2, [r3, #24]
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <GPIO_ResetBits>:
  *         (0..15) for GPIOA, GPIOB, GPIOC, GPIOD or GPIOE;
  *         (0..2, 4, 6, 9..10) for GPIOF.
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	460b      	mov	r3, r1
 8002342:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	887a      	ldrh	r2, [r7, #2]
 8002348:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
 800235e:	460b      	mov	r3, r1
 8002360:	807b      	strh	r3, [r7, #2]
 8002362:	4613      	mov	r3, r2
 8002364:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));
  
  if (BitVal != Bit_RESET)
 8002366:	787b      	ldrb	r3, [r7, #1]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d003      	beq.n	8002374 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800236c:	887a      	ldrh	r2, [r7, #2]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002372:	e002      	b.n	800237a <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin ;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	887a      	ldrh	r2, [r7, #2]
 8002378:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <GPIO_Write>:
  * @param  PortVal: specifies the value to be written to the port output data 
  *                  register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
 800238e:	460b      	mov	r3, r1
 8002390:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	887a      	ldrh	r2, [r7, #2]
 8002396:	829a      	strh	r2, [r3, #20]
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <GPIO_PinAFConfig>:
  *        for the detailed mapping of the system and peripherals alternate 
  *        function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	460b      	mov	r3, r1
 80023ae:	807b      	strh	r3, [r7, #2]
 80023b0:	4613      	mov	r3, r2
 80023b2:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80023b4:	2300      	movs	r3, #0
 80023b6:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80023b8:	2300      	movs	r3, #0
 80023ba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80023bc:	787a      	ldrb	r2, [r7, #1]
 80023be:	887b      	ldrh	r3, [r7, #2]
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80023cc:	887b      	ldrh	r3, [r7, #2]
 80023ce:	08db      	lsrs	r3, r3, #3
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	4618      	mov	r0, r3
 80023d4:	887b      	ldrh	r3, [r7, #2]
 80023d6:	08db      	lsrs	r3, r3, #3
 80023d8:	b29b      	uxth	r3, r3
 80023da:	461a      	mov	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3208      	adds	r2, #8
 80023e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80023e4:	887b      	ldrh	r3, [r7, #2]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	210f      	movs	r1, #15
 80023ee:	fa01 f303 	lsl.w	r3, r1, r3
 80023f2:	43db      	mvns	r3, r3
 80023f4:	ea02 0103 	and.w	r1, r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f100 0208 	add.w	r2, r0, #8
 80023fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8002402:	887b      	ldrh	r3, [r7, #2]
 8002404:	08db      	lsrs	r3, r3, #3
 8002406:	b29b      	uxth	r3, r3
 8002408:	461a      	mov	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	3208      	adds	r2, #8
 800240e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	4313      	orrs	r3, r2
 8002416:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8002418:	887b      	ldrh	r3, [r7, #2]
 800241a:	08db      	lsrs	r3, r3, #3
 800241c:	b29b      	uxth	r3, r3
 800241e:	461a      	mov	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3208      	adds	r2, #8
 8002424:	68b9      	ldr	r1, [r7, #8]
 8002426:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800242a:	bf00      	nop
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop

08002438 <HRTIM_SimpleBase_Init>:
  *           The timer period 
  *           The timer repetition counter.
  * @retval None
  */
void HRTIM_SimpleBase_Init(HRTIM_TypeDef* HRTIMx, uint32_t TimerIdx, HRTIM_BaseInitTypeDef* HRTIM_BaseInitStruct)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_MODE(HRTIM_BaseInitStruct->Mode));
   
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	2b05      	cmp	r3, #5
 8002448:	d104      	bne.n	8002454 <HRTIM_SimpleBase_Init+0x1c>
  {
    /* Configure master timer */
    HRTIM_MasterBase_Config(HRTIMx, HRTIM_BaseInitStruct);
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f002 f877 	bl	8004540 <HRTIM_MasterBase_Config>
  else
  {
    /* Configure timing unit */
    HRTIM_TimingUnitBase_Config(HRTIMx, TimerIdx, HRTIM_BaseInitStruct);
  }
}
 8002452:	e004      	b.n	800245e <HRTIM_SimpleBase_Init+0x26>
    HRTIM_TimingUnitBase_Config(HRTIMx, TimerIdx, HRTIM_BaseInitStruct);
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	68b9      	ldr	r1, [r7, #8]
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f002 f89e 	bl	800459a <HRTIM_TimingUnitBase_Config>
}
 800245e:	bf00      	nop
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HRTIM_SimpleOC_Init>:
  * @note   Initializes the time-base unit of the timer and prepare it to
  *         operate in output compare mode
  * @retval None
  */
void HRTIM_SimpleOC_Init(HRTIM_TypeDef * HRTIMx, uint32_t TimerIdx, HRTIM_BaseInitTypeDef* HRTIM_BaseInitStruct)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b084      	sub	sp, #16
 800246a:	af00      	add	r7, sp, #0
 800246c:	60f8      	str	r0, [r7, #12]
 800246e:	60b9      	str	r1, [r7, #8]
 8002470:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_MODE(HRTIM_BaseInitStruct->Mode));
   
  /* Configure timing unit */
  HRTIM_TimingUnitBase_Config(HRTIMx, TimerIdx, HRTIM_BaseInitStruct);
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	68b9      	ldr	r1, [r7, #8]
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f002 f88f 	bl	800459a <HRTIM_TimingUnitBase_Config>
}
 800247c:	bf00      	nop
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <HRTIM_SimplePWM_Init>:
  * @note   Initializes the time-base unit of the timer and prepare it to
  *         operate in capture mode
  * @retval None
  */
void HRTIM_SimplePWM_Init(HRTIM_TypeDef * HRTIMx, uint32_t TimerIdx, HRTIM_BaseInitTypeDef* HRTIM_BaseInitStruct)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_MODE(HRTIM_BaseInitStruct->Mode));
  
  /* Configure timing unit */
  HRTIM_TimingUnitBase_Config(HRTIMx, TimerIdx, HRTIM_BaseInitStruct);
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	68b9      	ldr	r1, [r7, #8]
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	f002 f880 	bl	800459a <HRTIM_TimingUnitBase_Config>
}
 800249a:	bf00      	nop
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HRTIM_SimpleCapture_Init>:
  *                   This parameter can be one of the following values:
  *                   @arg 0x1 to 0x5 for timers A to E 
  * @retval None
  */
void HRTIM_SimpleCapture_Init(HRTIM_TypeDef * HRTIMx, uint32_t TimerIdx, HRTIM_BaseInitTypeDef* HRTIM_BaseInitStruct)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b084      	sub	sp, #16
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	60f8      	str	r0, [r7, #12]
 80024aa:	60b9      	str	r1, [r7, #8]
 80024ac:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_MODE(HRTIM_BaseInitStruct->Mode));
  
  /* Configure timing unit */
  HRTIM_TimingUnitBase_Config(HRTIMx, TimerIdx, HRTIM_BaseInitStruct);
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	68b9      	ldr	r1, [r7, #8]
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f002 f871 	bl	800459a <HRTIM_TimingUnitBase_Config>
}
 80024b8:	bf00      	nop
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <HRTIM_SimpleOnePulse_Init>:
  *         operate in one pulse mode. In this mode the counter operates
  *         in single shot mode (retriggerable or not)
  * @retval None
  */
void HRTIM_SimpleOnePulse_Init(HRTIM_TypeDef * HRTIMx, uint32_t TimerIdx, HRTIM_BaseInitTypeDef* HRTIM_BaseInitStruct)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_MODE(HRTIM_BaseInitStruct->Mode));
  
  /* Configure timing unit */
  HRTIM_TimingUnitBase_Config(HRTIMx, TimerIdx, HRTIM_BaseInitStruct);
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	68b9      	ldr	r1, [r7, #8]
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f002 f862 	bl	800459a <HRTIM_TimingUnitBase_Config>
}
 80024d6:	bf00      	nop
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HRTIM_Waveform_Init>:
  */
void HRTIM_Waveform_Init(HRTIM_TypeDef * HRTIMx,
                                         uint32_t TimerIdx,
                                         HRTIM_BaseInitTypeDef* HRTIM_BaseInitStruct,
                                         HRTIM_TimerInitTypeDef* HRTIM_TimerInitStruct)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b084      	sub	sp, #16
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	60f8      	str	r0, [r7, #12]
 80024e6:	60b9      	str	r1, [r7, #8]
 80024e8:	607a      	str	r2, [r7, #4]
 80024ea:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_DACSYNC(HRTIM_TimerInitStruct->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(HRTIM_TimerInitStruct->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(HRTIM_TimerInitStruct->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(HRTIM_TimerInitStruct->RepetitionUpdate));
 
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	2b05      	cmp	r3, #5
 80024f0:	d108      	bne.n	8002504 <HRTIM_Waveform_Init+0x26>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(HRTIM_TimerInitStruct->UpdateGating));  
    
    /* Configure master timer */
    HRTIM_MasterBase_Config(HRTIMx, HRTIM_BaseInitStruct);
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f002 f823 	bl	8004540 <HRTIM_MasterBase_Config>
    HRTIM_MasterWaveform_Config(HRTIMx, HRTIM_TimerInitStruct);
 80024fa:	6839      	ldr	r1, [r7, #0]
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f002 f8a2 	bl	8004646 <HRTIM_MasterWaveform_Config>
    
    /* Configure timing unit */
    HRTIM_TimingUnitBase_Config(HRTIMx, TimerIdx, HRTIM_BaseInitStruct);
    HRTIM_TimingUnitWaveform_Config(HRTIMx, TimerIdx, HRTIM_TimerInitStruct);
  }
}
 8002502:	e009      	b.n	8002518 <HRTIM_Waveform_Init+0x3a>
    HRTIM_TimingUnitBase_Config(HRTIMx, TimerIdx, HRTIM_BaseInitStruct);
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	68b9      	ldr	r1, [r7, #8]
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f002 f846 	bl	800459a <HRTIM_TimingUnitBase_Config>
    HRTIM_TimingUnitWaveform_Config(HRTIMx, TimerIdx, HRTIM_TimerInitStruct);
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	68b9      	ldr	r1, [r7, #8]
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f002 f8f9 	bl	800470a <HRTIM_TimingUnitWaveform_Config>
}
 8002518:	bf00      	nop
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <HRTIM_DLLCalibrationStart>:
  *                    @arg HRTIM_CALIBRATIONRATE_114: 114 us
  *                    @arg HRTIM_CALIBRATIONRATE_14: 14 us
  * @retval None
  */
void HRTIM_DLLCalibrationStart(HRTIM_TypeDef * HRTIMx, uint32_t CalibrationRate)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  
   /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Configure DLL Calibration */
  HRTIM_dllcr = (HRTIMx->HRTIM_COMMON).DLLCR;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8002530:	60fb      	str	r3, [r7, #12]
  
  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002538:	d108      	bne.n	800254c <HRTIM_DLLCalibrationStart+0x2c>
  {
    /* One shot DLL calibration */
    HRTIM_dllcr &= ~(HRTIM_DLLCR_CALEN);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f023 0302 	bic.w	r3, r3, #2
 8002540:	60fb      	str	r3, [r7, #12]
    HRTIM_dllcr |= HRTIM_DLLCR_CAL;    
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	e009      	b.n	8002560 <HRTIM_DLLCalibrationStart+0x40>
  }
  else
  {
    /* Periodic DLL calibration */
    HRTIM_dllcr &= ~(HRTIM_DLLCR_CALRTE | HRTIM_DLLCR_CAL);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f023 030d 	bic.w	r3, r3, #13
 8002552:	60fb      	str	r3, [r7, #12]
    HRTIM_dllcr |= (CalibrationRate | HRTIM_DLLCR_CALEN);
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	4313      	orrs	r3, r2
 800255a:	f043 0302 	orr.w	r3, r3, #2
 800255e:	60fb      	str	r3, [r7, #12]
  }
               
  /* Update HRTIMx register */
  HRTIMx->HRTIM_COMMON.DLLCR = HRTIM_dllcr;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
  
}
 8002568:	bf00      	nop
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <HRTIM_SimpleBaseStart>:
  *                   @arg 0x5 for master timer
  *                   @arg 0x0 to 0x4 for timers A to E 
  * @retval None
  */
void HRTIM_SimpleBaseStart(HRTIM_TypeDef * HRTIMx, uint32_t TimerIdx)
{  
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  
  /* Enable the timer counter */
  __HRTIM_ENABLE(HRTIMx, TimerIdxToTimerId[TimerIdx]);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	4906      	ldr	r1, [pc, #24]	; (800259c <HRTIM_SimpleBaseStart+0x28>)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800258a:	431a      	orrs	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	601a      	str	r2, [r3, #0]
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	20000018 	.word	0x20000018

080025a0 <HRTIM_SimpleBaseStop>:
  *                   @arg 0x5 for master timer
  *                   @arg 0x0 to 0x4 for timers A to E 
  * @retval None
  */
void HRTIM_SimpleBaseStop(HRTIM_TypeDef * HRTIMx, uint32_t TimerIdx)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx)); 
  
  /* Disable the timer counter */
  __HRTIM_DISABLE(HRTIMx, TimerIdxToTimerId[TimerIdx]);
 80025aa:	4a3e      	ldr	r2, [pc, #248]	; (80026a4 <HRTIM_SimpleBaseStop+0x104>)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d005      	beq.n	80025c6 <HRTIM_SimpleBaseStop+0x26>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	4a37      	ldr	r2, [pc, #220]	; (80026a4 <HRTIM_SimpleBaseStop+0x104>)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00c      	beq.n	80025f0 <HRTIM_SimpleBaseStop+0x50>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f8d3 3394 	ldr.w	r3, [r3, #916]	; 0x394
 80025dc:	f003 0303 	and.w	r3, r3, #3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d105      	bne.n	80025f0 <HRTIM_SimpleBaseStop+0x50>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	4a2c      	ldr	r2, [pc, #176]	; (80026a4 <HRTIM_SimpleBaseStop+0x104>)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00c      	beq.n	800261a <HRTIM_SimpleBaseStop+0x7a>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f8d3 3394 	ldr.w	r3, [r3, #916]	; 0x394
 8002606:	f003 030c 	and.w	r3, r3, #12
 800260a:	2b00      	cmp	r3, #0
 800260c:	d105      	bne.n	800261a <HRTIM_SimpleBaseStop+0x7a>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	4a22      	ldr	r2, [pc, #136]	; (80026a4 <HRTIM_SimpleBaseStop+0x104>)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002622:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00c      	beq.n	8002644 <HRTIM_SimpleBaseStop+0xa4>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f8d3 3394 	ldr.w	r3, [r3, #916]	; 0x394
 8002630:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002634:	2b00      	cmp	r3, #0
 8002636:	d105      	bne.n	8002644 <HRTIM_SimpleBaseStop+0xa4>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	4a17      	ldr	r2, [pc, #92]	; (80026a4 <HRTIM_SimpleBaseStop+0x104>)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800264c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00c      	beq.n	800266e <HRTIM_SimpleBaseStop+0xce>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f8d3 3394 	ldr.w	r3, [r3, #916]	; 0x394
 800265a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d105      	bne.n	800266e <HRTIM_SimpleBaseStop+0xce>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	4a0d      	ldr	r2, [pc, #52]	; (80026a4 <HRTIM_SimpleBaseStop+0x104>)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002676:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00c      	beq.n	8002698 <HRTIM_SimpleBaseStop+0xf8>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f8d3 3394 	ldr.w	r3, [r3, #916]	; 0x394
 8002684:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002688:	2b00      	cmp	r3, #0
 800268a:	d105      	bne.n	8002698 <HRTIM_SimpleBaseStop+0xf8>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	601a      	str	r2, [r3, #0]
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	20000018 	.word	0x20000018

080026a8 <HRTIM_SimpleOCStart>:
  * @retval None
  */
void HRTIM_SimpleOCStart(HRTIM_TypeDef * HRTIMx,
                                         uint32_t TimerIdx,
                                         uint32_t OCChannel)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
   /* Check the parameters */
  assert_param(IS_HRTIM_TIMER_OUTPUT(TimerIdx, OCChannel));
  
  /* Enable the timer output */
   (HRTIMx->HRTIM_COMMON).OENR |= OCChannel;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f8d3 2394 	ldr.w	r2, [r3, #916]	; 0x394
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	431a      	orrs	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
       
    /* Enable the timer counter */
  __HRTIM_ENABLE(HRTIMx, TimerIdxToTimerId[TimerIdx]);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	4906      	ldr	r1, [pc, #24]	; (80026e4 <HRTIM_SimpleOCStart+0x3c>)
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80026d0:	431a      	orrs	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	601a      	str	r2, [r3, #0]
  
}
 80026d6:	bf00      	nop
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	20000018 	.word	0x20000018

080026e8 <HRTIM_SimpleOCStop>:
  * @retval None
  */
void HRTIM_SimpleOCStop(HRTIM_TypeDef * HRTIMx,
                                        uint32_t TimerIdx,
                                        uint32_t OCChannel)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
   /* Check the parameters */
  assert_param(IS_HRTIM_TIMER_OUTPUT(TimerIdx, OCChannel));
  
  /* Disable the timer output */
  HRTIMx->HRTIM_COMMON.DISR |= OCChannel;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f8d3 2398 	ldr.w	r2, [r3, #920]	; 0x398
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	431a      	orrs	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398
    
  /* Disable the timer counter */
   __HRTIM_DISABLE(HRTIMx, TimerIdxToTimerId[TimerIdx]);
 8002704:	4a3e      	ldr	r2, [pc, #248]	; (8002800 <HRTIM_SimpleOCStop+0x118>)
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800270c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d005      	beq.n	8002720 <HRTIM_SimpleOCStop+0x38>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	4a37      	ldr	r2, [pc, #220]	; (8002800 <HRTIM_SimpleOCStop+0x118>)
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00c      	beq.n	800274a <HRTIM_SimpleOCStop+0x62>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f8d3 3394 	ldr.w	r3, [r3, #916]	; 0x394
 8002736:	f003 0303 	and.w	r3, r3, #3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d105      	bne.n	800274a <HRTIM_SimpleOCStop+0x62>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	4a2d      	ldr	r2, [pc, #180]	; (8002800 <HRTIM_SimpleOCStop+0x118>)
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002752:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00c      	beq.n	8002774 <HRTIM_SimpleOCStop+0x8c>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f8d3 3394 	ldr.w	r3, [r3, #916]	; 0x394
 8002760:	f003 030c 	and.w	r3, r3, #12
 8002764:	2b00      	cmp	r3, #0
 8002766:	d105      	bne.n	8002774 <HRTIM_SimpleOCStop+0x8c>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	4a22      	ldr	r2, [pc, #136]	; (8002800 <HRTIM_SimpleOCStop+0x118>)
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800277c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00c      	beq.n	800279e <HRTIM_SimpleOCStop+0xb6>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f8d3 3394 	ldr.w	r3, [r3, #916]	; 0x394
 800278a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800278e:	2b00      	cmp	r3, #0
 8002790:	d105      	bne.n	800279e <HRTIM_SimpleOCStop+0xb6>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	4a18      	ldr	r2, [pc, #96]	; (8002800 <HRTIM_SimpleOCStop+0x118>)
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00c      	beq.n	80027c8 <HRTIM_SimpleOCStop+0xe0>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f8d3 3394 	ldr.w	r3, [r3, #916]	; 0x394
 80027b4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d105      	bne.n	80027c8 <HRTIM_SimpleOCStop+0xe0>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	4a0d      	ldr	r2, [pc, #52]	; (8002800 <HRTIM_SimpleOCStop+0x118>)
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00c      	beq.n	80027f2 <HRTIM_SimpleOCStop+0x10a>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f8d3 3394 	ldr.w	r3, [r3, #916]	; 0x394
 80027de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d105      	bne.n	80027f2 <HRTIM_SimpleOCStop+0x10a>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	601a      	str	r2, [r3, #0]
}
 80027f2:	bf00      	nop
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	20000018 	.word	0x20000018

08002804 <HRTIM_SimplePWMStart>:
  * @retval None
  */
void HRTIM_SimplePWMStart(HRTIM_TypeDef * HRTIMx,
                                          uint32_t TimerIdx,
                                          uint32_t PWMChannel)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
   /* Check the parameters */
  assert_param(IS_HRTIM_TIMER_OUTPUT(TimerIdx, PWMChannel));
  
  /* Enable the timer output */
  HRTIMx->HRTIM_COMMON.OENR |= PWMChannel;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f8d3 2394 	ldr.w	r2, [r3, #916]	; 0x394
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	431a      	orrs	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
    
  /* Enable the timer counter */
  __HRTIM_ENABLE(HRTIMx, TimerIdxToTimerId[TimerIdx]);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	4906      	ldr	r1, [pc, #24]	; (8002840 <HRTIM_SimplePWMStart+0x3c>)
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800282c:	431a      	orrs	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	601a      	str	r2, [r3, #0]
}
 8002832:	bf00      	nop
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	20000018 	.word	0x20000018

08002844 <HRTIM_SimplePWMStop>:
  * @retval None
  */
void HRTIM_SimplePWMStop(HRTIM_TypeDef * HRTIMx,
                                         uint32_t TimerIdx,
                                         uint32_t PWMChannel)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
   /* Check the parameters */
  assert_param(IS_HRTIM_TIMER_OUTPUT(TimerIdx, PWMChannel));
 
  /* Disable the timer output */
  HRTIMx->HRTIM_COMMON.DISR |= PWMChannel;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f8d3 2398 	ldr.w	r2, [r3, #920]	; 0x398
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	431a      	orrs	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398
    
  /* Disable the timer counter */
   __HRTIM_DISABLE(HRTIMx, TimerIdxToTimerId[TimerIdx]);
 8002860:	4a3e      	ldr	r2, [pc, #248]	; (800295c <HRTIM_SimplePWMStop+0x118>)
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d005      	beq.n	800287c <HRTIM_SimplePWMStop+0x38>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	4a37      	ldr	r2, [pc, #220]	; (800295c <HRTIM_SimplePWMStop+0x118>)
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00c      	beq.n	80028a6 <HRTIM_SimplePWMStop+0x62>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f8d3 3394 	ldr.w	r3, [r3, #916]	; 0x394
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d105      	bne.n	80028a6 <HRTIM_SimplePWMStop+0x62>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	4a2d      	ldr	r2, [pc, #180]	; (800295c <HRTIM_SimplePWMStop+0x118>)
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00c      	beq.n	80028d0 <HRTIM_SimplePWMStop+0x8c>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f8d3 3394 	ldr.w	r3, [r3, #916]	; 0x394
 80028bc:	f003 030c 	and.w	r3, r3, #12
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d105      	bne.n	80028d0 <HRTIM_SimplePWMStop+0x8c>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	4a22      	ldr	r2, [pc, #136]	; (800295c <HRTIM_SimplePWMStop+0x118>)
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00c      	beq.n	80028fa <HRTIM_SimplePWMStop+0xb6>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f8d3 3394 	ldr.w	r3, [r3, #916]	; 0x394
 80028e6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d105      	bne.n	80028fa <HRTIM_SimplePWMStop+0xb6>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	4a18      	ldr	r2, [pc, #96]	; (800295c <HRTIM_SimplePWMStop+0x118>)
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002902:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00c      	beq.n	8002924 <HRTIM_SimplePWMStop+0xe0>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f8d3 3394 	ldr.w	r3, [r3, #916]	; 0x394
 8002910:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d105      	bne.n	8002924 <HRTIM_SimplePWMStop+0xe0>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	4a0d      	ldr	r2, [pc, #52]	; (800295c <HRTIM_SimplePWMStop+0x118>)
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800292c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00c      	beq.n	800294e <HRTIM_SimplePWMStop+0x10a>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f8d3 3394 	ldr.w	r3, [r3, #916]	; 0x394
 800293a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800293e:	2b00      	cmp	r3, #0
 8002940:	d105      	bne.n	800294e <HRTIM_SimplePWMStop+0x10a>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	601a      	str	r2, [r3, #0]
}
 800294e:	bf00      	nop
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	20000018 	.word	0x20000018

08002960 <HRTIM_SimpleCaptureStart>:
  *        unit counter is enabled.
  */
void HRTIM_SimpleCaptureStart(HRTIM_TypeDef * HRTIMx,
                                              uint32_t TimerIdx,
                                              uint32_t CaptureChannel)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  /* Enable the timer counter */
  __HRTIM_ENABLE(HRTIMx, TimerIdxToTimerId[TimerIdx]);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	4906      	ldr	r1, [pc, #24]	; (800298c <HRTIM_SimpleCaptureStart+0x2c>)
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002978:	431a      	orrs	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	601a      	str	r2, [r3, #0]

}
 800297e:	bf00      	nop
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	20000018 	.word	0x20000018

08002990 <HRTIM_SimpleCaptureStop>:
  * @retval None
  */
void HRTIM_SimpleCaptureStop(HRTIM_TypeDef * HRTIMx,
                                             uint32_t TimerIdx,
                                             uint32_t CaptureChannel)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
   /* Check the parameters */
  assert_param(IS_HRTIM_TIMING_UNIT(TimerIdx));
  assert_param(IS_HRTIM_CAPTUREUNIT(CaptureChannel));
    
  /* Set the capture unit trigger */
  switch (CaptureChannel)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d002      	beq.n	80029a8 <HRTIM_SimpleCaptureStop+0x18>
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d008      	beq.n	80029b8 <HRTIM_SimpleCaptureStop+0x28>
    {
      HRTIMx->HRTIM_TIMERx[TimerIdx].CPT2xCR = HRTIM_CAPTURETRIGGER_NONE;
    }
    break;
    default:
    break;  
 80029a6:	e00f      	b.n	80029c8 <HRTIM_SimpleCaptureStop+0x38>
      HRTIMx->HRTIM_TIMERx[TimerIdx].CPT1xCR = HRTIM_CAPTURETRIGGER_NONE;
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	01db      	lsls	r3, r3, #7
 80029ae:	4413      	add	r3, r2
 80029b0:	33dc      	adds	r3, #220	; 0xdc
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]
    break;
 80029b6:	e007      	b.n	80029c8 <HRTIM_SimpleCaptureStop+0x38>
      HRTIMx->HRTIM_TIMERx[TimerIdx].CPT2xCR = HRTIM_CAPTURETRIGGER_NONE;
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	01db      	lsls	r3, r3, #7
 80029be:	4413      	add	r3, r2
 80029c0:	33e0      	adds	r3, #224	; 0xe0
 80029c2:	2200      	movs	r2, #0
 80029c4:	601a      	str	r2, [r3, #0]
    break;
 80029c6:	bf00      	nop
  }
  
  /* Disable the timer counter */
  if ((HRTIMx->HRTIM_TIMERx[TimerIdx].CPT1xCR == HRTIM_CAPTURETRIGGER_NONE) &&
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	01db      	lsls	r3, r3, #7
 80029ce:	4413      	add	r3, r2
 80029d0:	33dc      	adds	r3, #220	; 0xdc
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d17e      	bne.n	8002ad6 <HRTIM_SimpleCaptureStop+0x146>
      (HRTIMx->HRTIM_TIMERx[TimerIdx].CPT2xCR == HRTIM_CAPTURETRIGGER_NONE))
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	01db      	lsls	r3, r3, #7
 80029de:	4413      	add	r3, r2
 80029e0:	33e0      	adds	r3, #224	; 0xe0
 80029e2:	681b      	ldr	r3, [r3, #0]
  if ((HRTIMx->HRTIM_TIMERx[TimerIdx].CPT1xCR == HRTIM_CAPTURETRIGGER_NONE) &&
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d176      	bne.n	8002ad6 <HRTIM_SimpleCaptureStop+0x146>
  {
    __HRTIM_DISABLE(HRTIMx, TimerIdxToTimerId[TimerIdx]);
 80029e8:	4a3e      	ldr	r2, [pc, #248]	; (8002ae4 <HRTIM_SimpleCaptureStop+0x154>)
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d005      	beq.n	8002a04 <HRTIM_SimpleCaptureStop+0x74>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	4a37      	ldr	r2, [pc, #220]	; (8002ae4 <HRTIM_SimpleCaptureStop+0x154>)
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00c      	beq.n	8002a2e <HRTIM_SimpleCaptureStop+0x9e>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f8d3 3394 	ldr.w	r3, [r3, #916]	; 0x394
 8002a1a:	f003 0303 	and.w	r3, r3, #3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d105      	bne.n	8002a2e <HRTIM_SimpleCaptureStop+0x9e>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	4a2d      	ldr	r2, [pc, #180]	; (8002ae4 <HRTIM_SimpleCaptureStop+0x154>)
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00c      	beq.n	8002a58 <HRTIM_SimpleCaptureStop+0xc8>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f8d3 3394 	ldr.w	r3, [r3, #916]	; 0x394
 8002a44:	f003 030c 	and.w	r3, r3, #12
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d105      	bne.n	8002a58 <HRTIM_SimpleCaptureStop+0xc8>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	4a22      	ldr	r2, [pc, #136]	; (8002ae4 <HRTIM_SimpleCaptureStop+0x154>)
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00c      	beq.n	8002a82 <HRTIM_SimpleCaptureStop+0xf2>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f8d3 3394 	ldr.w	r3, [r3, #916]	; 0x394
 8002a6e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d105      	bne.n	8002a82 <HRTIM_SimpleCaptureStop+0xf2>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	4a18      	ldr	r2, [pc, #96]	; (8002ae4 <HRTIM_SimpleCaptureStop+0x154>)
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00c      	beq.n	8002aac <HRTIM_SimpleCaptureStop+0x11c>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f8d3 3394 	ldr.w	r3, [r3, #916]	; 0x394
 8002a98:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d105      	bne.n	8002aac <HRTIM_SimpleCaptureStop+0x11c>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	4a0d      	ldr	r2, [pc, #52]	; (8002ae4 <HRTIM_SimpleCaptureStop+0x154>)
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00c      	beq.n	8002ad6 <HRTIM_SimpleCaptureStop+0x146>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f8d3 3394 	ldr.w	r3, [r3, #916]	; 0x394
 8002ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d105      	bne.n	8002ad6 <HRTIM_SimpleCaptureStop+0x146>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	601a      	str	r2, [r3, #0]
  }
  
}
 8002ad6:	bf00      	nop
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	20000018 	.word	0x20000018

08002ae8 <HRTIM_SimpleOnePulseStart>:
  * @retval None
  */
void HRTIM_SimpleOnePulseStart(HRTIM_TypeDef * HRTIMx,
                                                uint32_t TimerIdx,
                                                uint32_t OnePulseChannel)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
   /* Check the parameters */
  assert_param(IS_HRTIM_TIMER_OUTPUT(TimerIdx, OnePulseChannel));
  
  /* Enable the timer output */
  HRTIMx->HRTIM_COMMON.OENR |= OnePulseChannel;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f8d3 2394 	ldr.w	r2, [r3, #916]	; 0x394
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	431a      	orrs	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
    
  /* Enable the timer counter */
  __HRTIM_ENABLE(HRTIMx, TimerIdxToTimerId[TimerIdx]);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	4906      	ldr	r1, [pc, #24]	; (8002b24 <HRTIM_SimpleOnePulseStart+0x3c>)
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002b10:	431a      	orrs	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	601a      	str	r2, [r3, #0]
}
 8002b16:	bf00      	nop
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	20000018 	.word	0x20000018

08002b28 <HRTIM_SimpleOnePulseStop>:
  * @retval None
  */
void HRTIM_SimpleOnePulseStop(HRTIM_TypeDef * HRTIMx,
                                              uint32_t TimerIdx,
                                              uint32_t OnePulseChannel)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
   /* Check the parameters */
  assert_param(IS_HRTIM_TIMER_OUTPUT(TimerIdx, OnePulseChannel));
   
  /* Disable the timer output */
  HRTIMx->HRTIM_COMMON.DISR |= OnePulseChannel;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f8d3 2398 	ldr.w	r2, [r3, #920]	; 0x398
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398
  
  /* Disable the timer counter */
  __HRTIM_DISABLE(HRTIMx, TimerIdxToTimerId[TimerIdx]);
 8002b44:	4a3e      	ldr	r2, [pc, #248]	; (8002c40 <HRTIM_SimpleOnePulseStop+0x118>)
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <HRTIM_SimpleOnePulseStop+0x38>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	4a37      	ldr	r2, [pc, #220]	; (8002c40 <HRTIM_SimpleOnePulseStop+0x118>)
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00c      	beq.n	8002b8a <HRTIM_SimpleOnePulseStop+0x62>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f8d3 3394 	ldr.w	r3, [r3, #916]	; 0x394
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d105      	bne.n	8002b8a <HRTIM_SimpleOnePulseStop+0x62>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	4a2d      	ldr	r2, [pc, #180]	; (8002c40 <HRTIM_SimpleOnePulseStop+0x118>)
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00c      	beq.n	8002bb4 <HRTIM_SimpleOnePulseStop+0x8c>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f8d3 3394 	ldr.w	r3, [r3, #916]	; 0x394
 8002ba0:	f003 030c 	and.w	r3, r3, #12
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d105      	bne.n	8002bb4 <HRTIM_SimpleOnePulseStop+0x8c>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	4a22      	ldr	r2, [pc, #136]	; (8002c40 <HRTIM_SimpleOnePulseStop+0x118>)
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00c      	beq.n	8002bde <HRTIM_SimpleOnePulseStop+0xb6>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f8d3 3394 	ldr.w	r3, [r3, #916]	; 0x394
 8002bca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d105      	bne.n	8002bde <HRTIM_SimpleOnePulseStop+0xb6>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	4a18      	ldr	r2, [pc, #96]	; (8002c40 <HRTIM_SimpleOnePulseStop+0x118>)
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00c      	beq.n	8002c08 <HRTIM_SimpleOnePulseStop+0xe0>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f8d3 3394 	ldr.w	r3, [r3, #916]	; 0x394
 8002bf4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d105      	bne.n	8002c08 <HRTIM_SimpleOnePulseStop+0xe0>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	4a0d      	ldr	r2, [pc, #52]	; (8002c40 <HRTIM_SimpleOnePulseStop+0x118>)
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00c      	beq.n	8002c32 <HRTIM_SimpleOnePulseStop+0x10a>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f8d3 3394 	ldr.w	r3, [r3, #916]	; 0x394
 8002c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d105      	bne.n	8002c32 <HRTIM_SimpleOnePulseStop+0x10a>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	601a      	str	r2, [r3, #0]
}
 8002c32:	bf00      	nop
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	20000018 	.word	0x20000018

08002c44 <HRTIM_WaveformCounterStart>:
  *                   @arg HRTIM_TIMERID_TIMER_E 
  * @retval None
  */
void HRTIM_WaveformCounterStart(HRTIM_TypeDef * HRTIMx,
                                                 uint32_t TimersToStart)
{ 
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
   /* Enable timer(s) counter */
   HRTIMx->HRTIM_MASTER.MCR |= TimersToStart;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	431a      	orrs	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	601a      	str	r2, [r3, #0]
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <HRTIM_WaveformCounterStop>:
  *                   @arg HRTIM_TIMERID_TIMER_E 
  * @retval None
  */
void HRTIM_WaveformCounterStop(HRTIM_TypeDef * HRTIMx,
                                                uint32_t TimersToStop)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b083      	sub	sp, #12
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
 8002c6e:	6039      	str	r1, [r7, #0]
  /* Disable timer(s) counter */
  HRTIMx->HRTIM_MASTER.MCR &= ~TimersToStop;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	43db      	mvns	r3, r3
 8002c78:	401a      	ands	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	601a      	str	r2, [r3, #0]
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval None
  */
void HRTIM_WaveformOutputStart(HRTIM_TypeDef * HRTIMx,
                                                uint32_t OutputsToStart)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
 8002c92:	6039      	str	r1, [r7, #0]
  /* Enable the HRTIM outputs */
  HRTIMx->HRTIM_COMMON.OENR = OutputsToStart;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <HRTIM_WaveformOutputStop>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval None
  */
void HRTIM_WaveformOutputStop(HRTIM_TypeDef * HRTIMx,
                                               uint32_t OutputsToStop)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  /* Disable the HRTIM outputs */
  HRTIMx->HRTIM_COMMON.DISR = OutputsToStop;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <HRTIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void HRTIM_ITConfig(HRTIM_TypeDef * HRTIMx, uint32_t TimerIdx, uint32_t HRTIM_IT, FunctionalState NewState)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b085      	sub	sp, #20
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	60f8      	str	r0, [r7, #12]
 8002cce:	60b9      	str	r1, [r7, #8]
 8002cd0:	607a      	str	r2, [r7, #4]
 8002cd2:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
   
  switch(TimerIdx)
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	d914      	bls.n	8002d04 <HRTIM_ITConfig+0x3e>
 8002cda:	2b05      	cmp	r3, #5
 8002cdc:	d000      	beq.n	8002ce0 <HRTIM_ITConfig+0x1a>
      }
    }
    break;
    
    default:
    break;  
 8002cde:	e033      	b.n	8002d48 <HRTIM_ITConfig+0x82>
      if(NewState != DISABLE)
 8002ce0:	78fb      	ldrb	r3, [r7, #3]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d006      	beq.n	8002cf4 <HRTIM_ITConfig+0x2e>
        HRTIMx->HRTIM_MASTER.MDIER |= HRTIM_IT;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	68da      	ldr	r2, [r3, #12]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	431a      	orrs	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	60da      	str	r2, [r3, #12]
    break;
 8002cf2:	e029      	b.n	8002d48 <HRTIM_ITConfig+0x82>
        HRTIMx->HRTIM_MASTER.MDIER &= ~HRTIM_IT;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	68da      	ldr	r2, [r3, #12]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	43db      	mvns	r3, r3
 8002cfc:	401a      	ands	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	60da      	str	r2, [r3, #12]
    break;
 8002d02:	e021      	b.n	8002d48 <HRTIM_ITConfig+0x82>
      if(NewState != DISABLE)
 8002d04:	78fb      	ldrb	r3, [r7, #3]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00e      	beq.n	8002d28 <HRTIM_ITConfig+0x62>
        HRTIMx->HRTIM_TIMERx[TimerIdx].TIMxDIER |= HRTIM_IT;
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	01db      	lsls	r3, r3, #7
 8002d10:	4413      	add	r3, r2
 8002d12:	338c      	adds	r3, #140	; 0x8c
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	68f9      	ldr	r1, [r7, #12]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	01db      	lsls	r3, r3, #7
 8002d20:	440b      	add	r3, r1
 8002d22:	338c      	adds	r3, #140	; 0x8c
 8002d24:	601a      	str	r2, [r3, #0]
    break;
 8002d26:	e00e      	b.n	8002d46 <HRTIM_ITConfig+0x80>
        HRTIMx->HRTIM_TIMERx[TimerIdx].TIMxDIER &= ~HRTIM_IT;
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	01db      	lsls	r3, r3, #7
 8002d2e:	4413      	add	r3, r2
 8002d30:	338c      	adds	r3, #140	; 0x8c
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	43db      	mvns	r3, r3
 8002d38:	401a      	ands	r2, r3
 8002d3a:	68f9      	ldr	r1, [r7, #12]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	01db      	lsls	r3, r3, #7
 8002d40:	440b      	add	r3, r1
 8002d42:	338c      	adds	r3, #140	; 0x8c
 8002d44:	601a      	str	r2, [r3, #0]
    break;
 8002d46:	bf00      	nop
  }    
}
 8002d48:	bf00      	nop
 8002d4a:	3714      	adds	r7, #20
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <HRTIM_ITCommonConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void HRTIM_ITCommonConfig(HRTIM_TypeDef * HRTIMx, uint32_t HRTIM_CommonIT, FunctionalState NewState)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	71fb      	strb	r3, [r7, #7]
   if(NewState != DISABLE)
 8002d62:	79fb      	ldrb	r3, [r7, #7]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d008      	beq.n	8002d7a <HRTIM_ITCommonConfig+0x26>
    {
      HRTIMx->HRTIM_COMMON.IER |= HRTIM_CommonIT;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	431a      	orrs	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
    }
    else
    {
      HRTIMx->HRTIM_COMMON.IER &= ~HRTIM_CommonIT;
    }
}
 8002d78:	e008      	b.n	8002d8c <HRTIM_ITCommonConfig+0x38>
      HRTIMx->HRTIM_COMMON.IER &= ~HRTIM_CommonIT;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	43db      	mvns	r3, r3
 8002d84:	401a      	ands	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
}
 8002d8c:	bf00      	nop
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HRTIM_ClearFlag>:
  *            @arg HRTIM_TIM_FLAG_RST: Timer reset Interrupt flag
  *            @arg HRTIM_TIM_FLAG_DLYPRT1: Timer delay protection Interrupt flag
  * @retval None
  */
void HRTIM_ClearFlag(HRTIM_TypeDef * HRTIMx, uint32_t TimerIdx, uint32_t HRTIM_FLAG)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  
  switch(TimerIdx)
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	d909      	bls.n	8002dbe <HRTIM_ClearFlag+0x26>
 8002daa:	2b05      	cmp	r3, #5
 8002dac:	d000      	beq.n	8002db0 <HRTIM_ClearFlag+0x18>
      HRTIMx->HRTIM_TIMERx[TimerIdx].TIMxICR |= HRTIM_FLAG;
    }
    break;
    
    default:
    break;  
 8002dae:	e015      	b.n	8002ddc <HRTIM_ClearFlag+0x44>
      HRTIMx->HRTIM_MASTER.MICR |= HRTIM_FLAG;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	431a      	orrs	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	609a      	str	r2, [r3, #8]
    break;
 8002dbc:	e00e      	b.n	8002ddc <HRTIM_ClearFlag+0x44>
      HRTIMx->HRTIM_TIMERx[TimerIdx].TIMxICR |= HRTIM_FLAG;
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	01db      	lsls	r3, r3, #7
 8002dc4:	4413      	add	r3, r2
 8002dc6:	3388      	adds	r3, #136	; 0x88
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	68f9      	ldr	r1, [r7, #12]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	01db      	lsls	r3, r3, #7
 8002dd4:	440b      	add	r3, r1
 8002dd6:	3388      	adds	r3, #136	; 0x88
 8002dd8:	601a      	str	r2, [r3, #0]
    break;
 8002dda:	bf00      	nop
  }    
}
 8002ddc:	bf00      	nop
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <HRTIM_ClearCommonFlag>:
  *            @arg HRTIM_FLAG_DLLRDY: DLL ready Interrupt flag
  *            @arg HRTIM_FLAG_BMPER: Burst mode period Interrupt flag
  * @retval None
  */
void HRTIM_ClearCommonFlag(HRTIM_TypeDef * HRTIMx, uint32_t HRTIM_CommonFLAG)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  HRTIMx->HRTIM_COMMON.ICR |= HRTIM_CommonFLAG;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f8d3 238c 	ldr.w	r2, [r3, #908]	; 0x38c
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <HRTIM_ClearITPendingBit>:
  *            @arg HRTIM_TIM_IT_RST: Timer reset Interrupt source
  *            @arg HRTIM_TIM_IT_DLYPRT: Timer delay protection Interrupt source
  * @retval None
  */
void HRTIM_ClearITPendingBit(HRTIM_TypeDef * HRTIMx, uint32_t TimerIdx, uint32_t HRTIM_IT)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b085      	sub	sp, #20
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	60f8      	str	r0, [r7, #12]
 8002e16:	60b9      	str	r1, [r7, #8]
 8002e18:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  
  switch(TimerIdx)
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	2b04      	cmp	r3, #4
 8002e1e:	d909      	bls.n	8002e34 <HRTIM_ClearITPendingBit+0x26>
 8002e20:	2b05      	cmp	r3, #5
 8002e22:	d000      	beq.n	8002e26 <HRTIM_ClearITPendingBit+0x18>
      HRTIMx->HRTIM_TIMERx[TimerIdx].TIMxICR |= HRTIM_IT;
    }
    break;
 
    default:
    break;  
 8002e24:	e015      	b.n	8002e52 <HRTIM_ClearITPendingBit+0x44>
      HRTIMx->HRTIM_MASTER.MICR |= HRTIM_IT;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	689a      	ldr	r2, [r3, #8]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	609a      	str	r2, [r3, #8]
    break;
 8002e32:	e00e      	b.n	8002e52 <HRTIM_ClearITPendingBit+0x44>
      HRTIMx->HRTIM_TIMERx[TimerIdx].TIMxICR |= HRTIM_IT;
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	01db      	lsls	r3, r3, #7
 8002e3a:	4413      	add	r3, r2
 8002e3c:	3388      	adds	r3, #136	; 0x88
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	431a      	orrs	r2, r3
 8002e44:	68f9      	ldr	r1, [r7, #12]
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	01db      	lsls	r3, r3, #7
 8002e4a:	440b      	add	r3, r1
 8002e4c:	3388      	adds	r3, #136	; 0x88
 8002e4e:	601a      	str	r2, [r3, #0]
    break;
 8002e50:	bf00      	nop
  }    
}
 8002e52:	bf00      	nop
 8002e54:	3714      	adds	r7, #20
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <HRTIM_ClearCommonITPendingBit>:
  *            @arg HRTIM_IT_DLLRDY: DLL ready Interrupt source
  *            @arg HRTIM_IT_BMPER: Burst mode period Interrupt source
  * @retval None
  */
void HRTIM_ClearCommonITPendingBit(HRTIM_TypeDef * HRTIMx, uint32_t HRTIM_CommonIT)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
 8002e66:	6039      	str	r1, [r7, #0]
  HRTIMx->HRTIM_COMMON.ICR |= HRTIM_CommonIT;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f8d3 238c 	ldr.w	r2, [r3, #908]	; 0x38c
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	431a      	orrs	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <HRTIM_GetFlagStatus>:
  *            @arg HRTIM_TIM_FLAG_RST: Timer reset Interrupt flag
  *            @arg HRTIM_TIM_FLAG_DLYPRT: Timer delay protection Interrupt flag
  * @retval The new state of HRTIM_FLAG (SET or RESET).
  */
FlagStatus HRTIM_GetFlagStatus(HRTIM_TypeDef * HRTIMx, uint32_t TimerIdx, uint32_t HRTIM_FLAG)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b087      	sub	sp, #28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  
  FlagStatus bitstatus = RESET;  
 8002e90:	2300      	movs	r3, #0
 8002e92:	75fb      	strb	r3, [r7, #23]
  
  switch(TimerIdx)
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	d90e      	bls.n	8002eb8 <HRTIM_GetFlagStatus+0x34>
 8002e9a:	2b05      	cmp	r3, #5
 8002e9c:	d000      	beq.n	8002ea0 <HRTIM_GetFlagStatus+0x1c>
      }
    }
    break;
 
    default:
    break;  
 8002e9e:	e01c      	b.n	8002eda <HRTIM_GetFlagStatus+0x56>
      if ((HRTIMx->HRTIM_MASTER.MISR & HRTIM_FLAG) != RESET)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d002      	beq.n	8002eb2 <HRTIM_GetFlagStatus+0x2e>
        bitstatus = SET;
 8002eac:	2301      	movs	r3, #1
 8002eae:	75fb      	strb	r3, [r7, #23]
    break;
 8002eb0:	e013      	b.n	8002eda <HRTIM_GetFlagStatus+0x56>
        bitstatus = RESET;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	75fb      	strb	r3, [r7, #23]
    break;
 8002eb6:	e010      	b.n	8002eda <HRTIM_GetFlagStatus+0x56>
      if ((HRTIMx->HRTIM_TIMERx[TimerIdx].TIMxISR & HRTIM_FLAG) != RESET)
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	01db      	lsls	r3, r3, #7
 8002ec0:	4413      	add	r3, r2
 8002ec2:	3304      	adds	r3, #4
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <HRTIM_GetFlagStatus+0x50>
        bitstatus = SET;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	75fb      	strb	r3, [r7, #23]
    break;
 8002ed2:	e001      	b.n	8002ed8 <HRTIM_GetFlagStatus+0x54>
        bitstatus = RESET;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	75fb      	strb	r3, [r7, #23]
    break;
 8002ed8:	bf00      	nop
  }    
  return bitstatus;
 8002eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	371c      	adds	r7, #28
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <HRTIM_GetCommonFlagStatus>:
  *            @arg HRTIM_FLAG_DLLRDY: DLL ready Interrupt flag
  *            @arg HRTIM_FLAG_BMPER: Burst mode period Interrupt flag
  * @retval The new state of HRTIM_FLAG (SET or RESET).
  */
FlagStatus HRTIM_GetCommonFlagStatus(HRTIM_TypeDef * HRTIMx, uint32_t HRTIM_CommonFLAG)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;  
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	73fb      	strb	r3, [r7, #15]

  if((HRTIMx->HRTIM_COMMON.ISR & HRTIM_CommonFLAG) != RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f8d3 2388 	ldr.w	r2, [r3, #904]	; 0x388
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	4013      	ands	r3, r2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d002      	beq.n	8002f0a <HRTIM_GetCommonFlagStatus+0x22>
    {
      bitstatus = SET;
 8002f04:	2301      	movs	r3, #1
 8002f06:	73fb      	strb	r3, [r7, #15]
 8002f08:	e001      	b.n	8002f0e <HRTIM_GetCommonFlagStatus+0x26>
    }
    else
    {
      bitstatus = RESET;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	73fb      	strb	r3, [r7, #15]
    }
  return bitstatus;
 8002f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3714      	adds	r7, #20
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <HRTIM_GetITStatus>:
  *            @arg HRTIM_TIM_IT_RST: Timer reset Interrupt 
  *            @arg HRTIM_TIM_IT_DLYPRT: Timer delay protection Interrupt 
  * @retval The new state of the HRTIM_IT(SET or RESET).
  */
ITStatus HRTIM_GetITStatus(HRTIM_TypeDef * HRTIMx, uint32_t TimerIdx, uint32_t HRTIM_IT)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b087      	sub	sp, #28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
  ITStatus bitstatus = RESET;  
 8002f28:	2300      	movs	r3, #0
 8002f2a:	75fb      	strb	r3, [r7, #23]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	82bb      	strh	r3, [r7, #20]
 8002f30:	2300      	movs	r3, #0
 8002f32:	827b      	strh	r3, [r7, #18]
  
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  
  switch(TimerIdx)
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	2b04      	cmp	r3, #4
 8002f38:	d91c      	bls.n	8002f74 <HRTIM_GetITStatus+0x58>
 8002f3a:	2b05      	cmp	r3, #5
 8002f3c:	d000      	beq.n	8002f40 <HRTIM_GetITStatus+0x24>
      }
    }
    break;
 
    default:
    break;  
 8002f3e:	e03c      	b.n	8002fba <HRTIM_GetITStatus+0x9e>
      itstatus = HRTIMx->HRTIM_MASTER.MISR & HRTIM_IT;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	82bb      	strh	r3, [r7, #20]
      itenable = HRTIMx->HRTIM_MASTER.MDIER & HRTIM_IT;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	4013      	ands	r3, r2
 8002f5a:	827b      	strh	r3, [r7, #18]
      if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8002f5c:	8abb      	ldrh	r3, [r7, #20]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d005      	beq.n	8002f6e <HRTIM_GetITStatus+0x52>
 8002f62:	8a7b      	ldrh	r3, [r7, #18]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d002      	beq.n	8002f6e <HRTIM_GetITStatus+0x52>
        bitstatus = SET;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	75fb      	strb	r3, [r7, #23]
    break;
 8002f6c:	e025      	b.n	8002fba <HRTIM_GetITStatus+0x9e>
        bitstatus = RESET;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	75fb      	strb	r3, [r7, #23]
    break;
 8002f72:	e022      	b.n	8002fba <HRTIM_GetITStatus+0x9e>
      itstatus = HRTIMx->HRTIM_TIMERx[TimerIdx].TIMxISR & HRTIM_IT;
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	01db      	lsls	r3, r3, #7
 8002f7c:	4413      	add	r3, r2
 8002f7e:	3304      	adds	r3, #4
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	4013      	ands	r3, r2
 8002f8a:	82bb      	strh	r3, [r7, #20]
      itenable = HRTIMx->HRTIM_TIMERx[TimerIdx].TIMxDIER & HRTIM_IT;
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	01db      	lsls	r3, r3, #7
 8002f92:	4413      	add	r3, r2
 8002f94:	338c      	adds	r3, #140	; 0x8c
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	827b      	strh	r3, [r7, #18]
      if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8002fa2:	8abb      	ldrh	r3, [r7, #20]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d005      	beq.n	8002fb4 <HRTIM_GetITStatus+0x98>
 8002fa8:	8a7b      	ldrh	r3, [r7, #18]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d002      	beq.n	8002fb4 <HRTIM_GetITStatus+0x98>
        bitstatus = SET;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	75fb      	strb	r3, [r7, #23]
    break;
 8002fb2:	e001      	b.n	8002fb8 <HRTIM_GetITStatus+0x9c>
        bitstatus = RESET;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	75fb      	strb	r3, [r7, #23]
    break;
 8002fb8:	bf00      	nop
  }    
  return bitstatus;
 8002fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	371c      	adds	r7, #28
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <HRTIM_GetCommonITStatus>:
  *            @arg HRTIM_IT_DLLRDY: DLL ready Interrupt flag
  *            @arg HRTIM_IT_BMPER: Burst mode period Interrupt 
  * @retval The new state of HRTIM_FLAG (SET or RESET).
  */
ITStatus HRTIM_GetCommonITStatus(HRTIM_TypeDef * HRTIMx, uint32_t HRTIM_CommonIT)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;  
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	81bb      	strh	r3, [r7, #12]
 8002fda:	2300      	movs	r3, #0
 8002fdc:	817b      	strh	r3, [r7, #10]
 
  itstatus = HRTIMx->HRTIM_COMMON.ISR & HRTIM_CommonIT; 
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	4013      	ands	r3, r2
 8002fec:	81bb      	strh	r3, [r7, #12]
  itenable = HRTIMx->HRTIM_COMMON.IER & HRTIM_CommonIT;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	817b      	strh	r3, [r7, #10]
  
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8002ffe:	89bb      	ldrh	r3, [r7, #12]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d005      	beq.n	8003010 <HRTIM_GetCommonITStatus+0x48>
 8003004:	897b      	ldrh	r3, [r7, #10]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d002      	beq.n	8003010 <HRTIM_GetCommonITStatus+0x48>
  {
    bitstatus = SET;
 800300a:	2301      	movs	r3, #1
 800300c:	73fb      	strb	r3, [r7, #15]
 800300e:	e001      	b.n	8003014 <HRTIM_GetCommonITStatus+0x4c>
  }
  else
  {
    bitstatus = RESET;
 8003010:	2300      	movs	r3, #0
 8003012:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 8003014:	7bfb      	ldrb	r3, [r7, #15]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr

08003022 <HRTIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void HRTIM_DMACmd(HRTIM_TypeDef* HRTIMx, uint32_t TimerIdx, uint32_t HRTIM_DMA, FunctionalState NewState)
{
 8003022:	b480      	push	{r7}
 8003024:	b085      	sub	sp, #20
 8003026:	af00      	add	r7, sp, #0
 8003028:	60f8      	str	r0, [r7, #12]
 800302a:	60b9      	str	r1, [r7, #8]
 800302c:	607a      	str	r2, [r7, #4]
 800302e:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  switch(TimerIdx)
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2b04      	cmp	r3, #4
 8003034:	d914      	bls.n	8003060 <HRTIM_DMACmd+0x3e>
 8003036:	2b05      	cmp	r3, #5
 8003038:	d000      	beq.n	800303c <HRTIM_DMACmd+0x1a>
      }
    }
    break;
    
    default:
    break;  
 800303a:	e033      	b.n	80030a4 <HRTIM_DMACmd+0x82>
      if(NewState != DISABLE)
 800303c:	78fb      	ldrb	r3, [r7, #3]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d006      	beq.n	8003050 <HRTIM_DMACmd+0x2e>
        HRTIMx->HRTIM_MASTER.MDIER |= HRTIM_DMA;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	68da      	ldr	r2, [r3, #12]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	431a      	orrs	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	60da      	str	r2, [r3, #12]
    break;
 800304e:	e029      	b.n	80030a4 <HRTIM_DMACmd+0x82>
        HRTIMx->HRTIM_MASTER.MDIER &= ~HRTIM_DMA;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	68da      	ldr	r2, [r3, #12]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	43db      	mvns	r3, r3
 8003058:	401a      	ands	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	60da      	str	r2, [r3, #12]
    break;
 800305e:	e021      	b.n	80030a4 <HRTIM_DMACmd+0x82>
      if(NewState != DISABLE)
 8003060:	78fb      	ldrb	r3, [r7, #3]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00e      	beq.n	8003084 <HRTIM_DMACmd+0x62>
        HRTIMx->HRTIM_TIMERx[TimerIdx].TIMxDIER |= HRTIM_DMA;
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	01db      	lsls	r3, r3, #7
 800306c:	4413      	add	r3, r2
 800306e:	338c      	adds	r3, #140	; 0x8c
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	431a      	orrs	r2, r3
 8003076:	68f9      	ldr	r1, [r7, #12]
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	01db      	lsls	r3, r3, #7
 800307c:	440b      	add	r3, r1
 800307e:	338c      	adds	r3, #140	; 0x8c
 8003080:	601a      	str	r2, [r3, #0]
    break;
 8003082:	e00e      	b.n	80030a2 <HRTIM_DMACmd+0x80>
        HRTIMx->HRTIM_TIMERx[TimerIdx].TIMxDIER &= ~HRTIM_DMA;
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	01db      	lsls	r3, r3, #7
 800308a:	4413      	add	r3, r2
 800308c:	338c      	adds	r3, #140	; 0x8c
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	43db      	mvns	r3, r3
 8003094:	401a      	ands	r2, r3
 8003096:	68f9      	ldr	r1, [r7, #12]
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	01db      	lsls	r3, r3, #7
 800309c:	440b      	add	r3, r1
 800309e:	338c      	adds	r3, #140	; 0x8c
 80030a0:	601a      	str	r2, [r3, #0]
    break;
 80030a2:	bf00      	nop
  }      
}
 80030a4:	bf00      	nop
 80030a6:	3714      	adds	r7, #20
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <HRTIM_SimpleOCChannelConfig>:
  */
void HRTIM_SimpleOCChannelConfig(HRTIM_TypeDef * HRTIMx,
                                                 uint32_t TimerIdx,
                                                 uint32_t OCChannel,
                                                 HRTIM_BasicOCChannelCfgTypeDef* pBasicOCChannelCfg)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b090      	sub	sp, #64	; 0x40
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
 80030bc:	603b      	str	r3, [r7, #0]
  uint32_t CompareUnit = HRTIM_COMPAREUNIT_1;
 80030be:	2301      	movs	r3, #1
 80030c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  assert_param(IS_HRTIM_BASICOCMODE(pBasicOCChannelCfg->Mode));
  assert_param(IS_HRTIM_OUTPUTPOLARITY(pBasicOCChannelCfg->Polarity));
  assert_param(IS_HRTIM_OUTPUTIDLESTATE(pBasicOCChannelCfg->IdleState));
    
  /* Configure timer compare unit */  
  switch (OCChannel)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b10      	cmp	r3, #16
 80030c6:	d01d      	beq.n	8003104 <HRTIM_SimpleOCChannelConfig+0x54>
 80030c8:	2b10      	cmp	r3, #16
 80030ca:	d80b      	bhi.n	80030e4 <HRTIM_SimpleOCChannelConfig+0x34>
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d01c      	beq.n	800310a <HRTIM_SimpleOCChannelConfig+0x5a>
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d802      	bhi.n	80030da <HRTIM_SimpleOCChannelConfig+0x2a>
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d015      	beq.n	8003104 <HRTIM_SimpleOCChannelConfig+0x54>
    {
      CompareUnit = HRTIM_COMPAREUNIT_2;
    }
    break;
    default:
    break;
 80030d8:	e01a      	b.n	8003110 <HRTIM_SimpleOCChannelConfig+0x60>
  switch (OCChannel)
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d012      	beq.n	8003104 <HRTIM_SimpleOCChannelConfig+0x54>
 80030de:	2b08      	cmp	r3, #8
 80030e0:	d013      	beq.n	800310a <HRTIM_SimpleOCChannelConfig+0x5a>
    break;
 80030e2:	e015      	b.n	8003110 <HRTIM_SimpleOCChannelConfig+0x60>
  switch (OCChannel)
 80030e4:	2b80      	cmp	r3, #128	; 0x80
 80030e6:	d010      	beq.n	800310a <HRTIM_SimpleOCChannelConfig+0x5a>
 80030e8:	2b80      	cmp	r3, #128	; 0x80
 80030ea:	d804      	bhi.n	80030f6 <HRTIM_SimpleOCChannelConfig+0x46>
 80030ec:	2b20      	cmp	r3, #32
 80030ee:	d00c      	beq.n	800310a <HRTIM_SimpleOCChannelConfig+0x5a>
 80030f0:	2b40      	cmp	r3, #64	; 0x40
 80030f2:	d007      	beq.n	8003104 <HRTIM_SimpleOCChannelConfig+0x54>
    break;
 80030f4:	e00c      	b.n	8003110 <HRTIM_SimpleOCChannelConfig+0x60>
  switch (OCChannel)
 80030f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030fa:	d003      	beq.n	8003104 <HRTIM_SimpleOCChannelConfig+0x54>
 80030fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003100:	d003      	beq.n	800310a <HRTIM_SimpleOCChannelConfig+0x5a>
    break;
 8003102:	e005      	b.n	8003110 <HRTIM_SimpleOCChannelConfig+0x60>
      CompareUnit = HRTIM_COMPAREUNIT_1;
 8003104:	2301      	movs	r3, #1
 8003106:	63fb      	str	r3, [r7, #60]	; 0x3c
    break;
 8003108:	e002      	b.n	8003110 <HRTIM_SimpleOCChannelConfig+0x60>
      CompareUnit = HRTIM_COMPAREUNIT_2;
 800310a:	2302      	movs	r3, #2
 800310c:	63fb      	str	r3, [r7, #60]	; 0x3c
    break;
 800310e:	bf00      	nop
  }
  
  CompareCfg.CompareValue = pBasicOCChannelCfg->Pulse;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	633b      	str	r3, [r7, #48]	; 0x30
  CompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8003116:	2300      	movs	r3, #0
 8003118:	637b      	str	r3, [r7, #52]	; 0x34
  CompareCfg.AutoDelayedTimeout = 0;
 800311a:	2300      	movs	r3, #0
 800311c:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HRTIM_CompareUnitConfig(HRTIMx,
 800311e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003122:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003124:	68b9      	ldr	r1, [r7, #8]
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f001 fb9d 	bl	8004866 <HRTIM_CompareUnitConfig>
                          TimerIdx,
                          CompareUnit,
                          &CompareCfg);
  
  /* Configure timer output */
  OutputCfg.Polarity = pBasicOCChannelCfg->Polarity;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	613b      	str	r3, [r7, #16]
  OutputCfg.IdleState = pBasicOCChannelCfg->IdleState;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	623b      	str	r3, [r7, #32]
  OutputCfg.FaultState = HRTIM_OUTPUTFAULTSTATE_NONE;
 8003138:	2300      	movs	r3, #0
 800313a:	627b      	str	r3, [r7, #36]	; 0x24
  OutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 800313c:	2300      	movs	r3, #0
 800313e:	61fb      	str	r3, [r7, #28]
  OutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8003140:	2300      	movs	r3, #0
 8003142:	62bb      	str	r3, [r7, #40]	; 0x28
  OutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8003144:	2300      	movs	r3, #0
 8003146:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  switch (pBasicOCChannelCfg->Mode)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2b02      	cmp	r3, #2
 800314e:	d01a      	beq.n	8003186 <HRTIM_SimpleOCChannelConfig+0xd6>
 8003150:	2b03      	cmp	r3, #3
 8003152:	d00d      	beq.n	8003170 <HRTIM_SimpleOCChannelConfig+0xc0>
 8003154:	2b01      	cmp	r3, #1
 8003156:	d000      	beq.n	800315a <HRTIM_SimpleOCChannelConfig+0xaa>
      }
      OutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
    }
    break;
    default:
    break;  
 8003158:	e020      	b.n	800319c <HRTIM_SimpleOCChannelConfig+0xec>
      if (CompareUnit == HRTIM_COMPAREUNIT_1)
 800315a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800315c:	2b01      	cmp	r3, #1
 800315e:	d102      	bne.n	8003166 <HRTIM_SimpleOCChannelConfig+0xb6>
        OutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1;
 8003160:	2308      	movs	r3, #8
 8003162:	617b      	str	r3, [r7, #20]
 8003164:	e001      	b.n	800316a <HRTIM_SimpleOCChannelConfig+0xba>
        OutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP2;
 8003166:	2310      	movs	r3, #16
 8003168:	617b      	str	r3, [r7, #20]
      OutputCfg.ResetSource = OutputCfg.SetSource;
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	61bb      	str	r3, [r7, #24]
    break;
 800316e:	e015      	b.n	800319c <HRTIM_SimpleOCChannelConfig+0xec>
      if (CompareUnit == HRTIM_COMPAREUNIT_1)
 8003170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003172:	2b01      	cmp	r3, #1
 8003174:	d102      	bne.n	800317c <HRTIM_SimpleOCChannelConfig+0xcc>
        OutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1;
 8003176:	2308      	movs	r3, #8
 8003178:	617b      	str	r3, [r7, #20]
 800317a:	e001      	b.n	8003180 <HRTIM_SimpleOCChannelConfig+0xd0>
        OutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP2;
 800317c:	2310      	movs	r3, #16
 800317e:	617b      	str	r3, [r7, #20]
      OutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8003180:	2300      	movs	r3, #0
 8003182:	61bb      	str	r3, [r7, #24]
    break;
 8003184:	e00a      	b.n	800319c <HRTIM_SimpleOCChannelConfig+0xec>
      if (CompareUnit == HRTIM_COMPAREUNIT_1)
 8003186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003188:	2b01      	cmp	r3, #1
 800318a:	d102      	bne.n	8003192 <HRTIM_SimpleOCChannelConfig+0xe2>
        OutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 800318c:	2308      	movs	r3, #8
 800318e:	61bb      	str	r3, [r7, #24]
 8003190:	e001      	b.n	8003196 <HRTIM_SimpleOCChannelConfig+0xe6>
        OutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 8003192:	2310      	movs	r3, #16
 8003194:	61bb      	str	r3, [r7, #24]
      OutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 8003196:	2300      	movs	r3, #0
 8003198:	617b      	str	r3, [r7, #20]
    break;
 800319a:	bf00      	nop
  }
  
  HRTIM_OutputConfig(HRTIMx, TimerIdx, OCChannel, &OutputCfg);   
 800319c:	f107 0310 	add.w	r3, r7, #16
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	68b9      	ldr	r1, [r7, #8]
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f001 fc40 	bl	8004a2a <HRTIM_OutputConfig>
}
 80031aa:	bf00      	nop
 80031ac:	3740      	adds	r7, #64	; 0x40
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <HRTIM_SimplePWMChannelConfig>:
  */
void HRTIM_SimplePWMChannelConfig(HRTIM_TypeDef * HRTIMx,
                                                  uint32_t TimerIdx,
                                                  uint32_t PWMChannel,
                                                  HRTIM_BasicPWMChannelCfgTypeDef* pBasicPWMChannelCfg)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b090      	sub	sp, #64	; 0x40
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	60f8      	str	r0, [r7, #12]
 80031ba:	60b9      	str	r1, [r7, #8]
 80031bc:	607a      	str	r2, [r7, #4]
 80031be:	603b      	str	r3, [r7, #0]
  uint32_t CompareUnit = HRTIM_COMPAREUNIT_1;
 80031c0:	2301      	movs	r3, #1
 80031c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  assert_param(IS_HRTIM_TIMER_OUTPUT(TimerIdx, PWMChannel));
  assert_param(IS_HRTIM_OUTPUTPOLARITY(pBasicPWMChannelCfg->Polarity));
  assert_param(IS_HRTIM_OUTPUTIDLESTATE(pBasicPWMChannelCfg->IdleState));

  /* Configure timer compare unit */  
  switch (PWMChannel)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b10      	cmp	r3, #16
 80031c8:	d01d      	beq.n	8003206 <HRTIM_SimplePWMChannelConfig+0x54>
 80031ca:	2b10      	cmp	r3, #16
 80031cc:	d80b      	bhi.n	80031e6 <HRTIM_SimplePWMChannelConfig+0x34>
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d01c      	beq.n	800320c <HRTIM_SimplePWMChannelConfig+0x5a>
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d802      	bhi.n	80031dc <HRTIM_SimplePWMChannelConfig+0x2a>
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d015      	beq.n	8003206 <HRTIM_SimplePWMChannelConfig+0x54>
    {
      CompareUnit = HRTIM_COMPAREUNIT_2;
    }
    break;
    default:
    break;  
 80031da:	e01a      	b.n	8003212 <HRTIM_SimplePWMChannelConfig+0x60>
  switch (PWMChannel)
 80031dc:	2b04      	cmp	r3, #4
 80031de:	d012      	beq.n	8003206 <HRTIM_SimplePWMChannelConfig+0x54>
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d013      	beq.n	800320c <HRTIM_SimplePWMChannelConfig+0x5a>
    break;  
 80031e4:	e015      	b.n	8003212 <HRTIM_SimplePWMChannelConfig+0x60>
  switch (PWMChannel)
 80031e6:	2b80      	cmp	r3, #128	; 0x80
 80031e8:	d010      	beq.n	800320c <HRTIM_SimplePWMChannelConfig+0x5a>
 80031ea:	2b80      	cmp	r3, #128	; 0x80
 80031ec:	d804      	bhi.n	80031f8 <HRTIM_SimplePWMChannelConfig+0x46>
 80031ee:	2b20      	cmp	r3, #32
 80031f0:	d00c      	beq.n	800320c <HRTIM_SimplePWMChannelConfig+0x5a>
 80031f2:	2b40      	cmp	r3, #64	; 0x40
 80031f4:	d007      	beq.n	8003206 <HRTIM_SimplePWMChannelConfig+0x54>
    break;  
 80031f6:	e00c      	b.n	8003212 <HRTIM_SimplePWMChannelConfig+0x60>
  switch (PWMChannel)
 80031f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031fc:	d003      	beq.n	8003206 <HRTIM_SimplePWMChannelConfig+0x54>
 80031fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003202:	d003      	beq.n	800320c <HRTIM_SimplePWMChannelConfig+0x5a>
    break;  
 8003204:	e005      	b.n	8003212 <HRTIM_SimplePWMChannelConfig+0x60>
      CompareUnit = HRTIM_COMPAREUNIT_1;
 8003206:	2301      	movs	r3, #1
 8003208:	63fb      	str	r3, [r7, #60]	; 0x3c
    break;
 800320a:	e002      	b.n	8003212 <HRTIM_SimplePWMChannelConfig+0x60>
      CompareUnit = HRTIM_COMPAREUNIT_2;
 800320c:	2302      	movs	r3, #2
 800320e:	63fb      	str	r3, [r7, #60]	; 0x3c
    break;
 8003210:	bf00      	nop
  }
  
  CompareCfg.CompareValue = pBasicPWMChannelCfg->Pulse;
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	633b      	str	r3, [r7, #48]	; 0x30
  CompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8003218:	2300      	movs	r3, #0
 800321a:	637b      	str	r3, [r7, #52]	; 0x34
  CompareCfg.AutoDelayedTimeout = 0;
 800321c:	2300      	movs	r3, #0
 800321e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HRTIM_CompareUnitConfig(HRTIMx,
 8003220:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003224:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003226:	68b9      	ldr	r1, [r7, #8]
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f001 fb1c 	bl	8004866 <HRTIM_CompareUnitConfig>
                          TimerIdx,
                          CompareUnit,
                          &CompareCfg);
  
  /* Configure timer output */
  OutputCfg.Polarity = pBasicPWMChannelCfg->Polarity;
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	613b      	str	r3, [r7, #16]
  OutputCfg.IdleState = pBasicPWMChannelCfg->IdleState;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	623b      	str	r3, [r7, #32]
  OutputCfg.FaultState = HRTIM_OUTPUTFAULTSTATE_NONE;
 800323a:	2300      	movs	r3, #0
 800323c:	627b      	str	r3, [r7, #36]	; 0x24
  OutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 800323e:	2300      	movs	r3, #0
 8003240:	61fb      	str	r3, [r7, #28]
  OutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8003242:	2300      	movs	r3, #0
 8003244:	62bb      	str	r3, [r7, #40]	; 0x28
  OutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8003246:	2300      	movs	r3, #0
 8003248:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (CompareUnit == HRTIM_COMPAREUNIT_1)
 800324a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800324c:	2b01      	cmp	r3, #1
 800324e:	d102      	bne.n	8003256 <HRTIM_SimplePWMChannelConfig+0xa4>
  {
    OutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1;
 8003250:	2308      	movs	r3, #8
 8003252:	617b      	str	r3, [r7, #20]
 8003254:	e001      	b.n	800325a <HRTIM_SimplePWMChannelConfig+0xa8>
  }
  else
  {
    OutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP2;
 8003256:	2310      	movs	r3, #16
 8003258:	617b      	str	r3, [r7, #20]
  }
  OutputCfg.ResetSource = HRTIM_OUTPUTSET_TIMPER;
 800325a:	2304      	movs	r3, #4
 800325c:	61bb      	str	r3, [r7, #24]
  
  HRTIM_OutputConfig(HRTIMx, TimerIdx, PWMChannel, &OutputCfg);  
 800325e:	f107 0310 	add.w	r3, r7, #16
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	68b9      	ldr	r1, [r7, #8]
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f001 fbdf 	bl	8004a2a <HRTIM_OutputConfig>
}
 800326c:	bf00      	nop
 800326e:	3740      	adds	r7, #64	; 0x40
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <HRTIM_SimpleCaptureChannelConfig>:
  */
void HRTIM_SimpleCaptureChannelConfig(HRTIM_TypeDef * HRTIMx,
                                                      uint32_t TimerIdx,
                                                      uint32_t CaptureChannel,
                                                      HRTIM_BasicCaptureChannelCfgTypeDef* pBasicCaptureChannelCfg)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b08a      	sub	sp, #40	; 0x28
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
 8003280:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_EVENTPOLARITY(pBasicCaptureChannelCfg->EventPolarity));
  assert_param(IS_HRTIM_EVENTSENSITIVITY(pBasicCaptureChannelCfg->EventSensitivity));
  assert_param(IS_HRTIM_EVENTFILTER(pBasicCaptureChannelCfg->EventFilter));
  
  /* Configure external event channel */
  EventCfg.FastMode = HRTIM_EVENTFASTMODE_DISABLE;
 8003282:	2300      	movs	r3, #0
 8003284:	627b      	str	r3, [r7, #36]	; 0x24
  EventCfg.Filter = pBasicCaptureChannelCfg->EventFilter;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	623b      	str	r3, [r7, #32]
  EventCfg.Polarity = pBasicCaptureChannelCfg->EventPolarity;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	61bb      	str	r3, [r7, #24]
  EventCfg.Sensitivity = pBasicCaptureChannelCfg->EventSensitivity;
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	61fb      	str	r3, [r7, #28]
  EventCfg.Source = HRTIM_EVENTSRC_1;
 8003298:	2300      	movs	r3, #0
 800329a:	617b      	str	r3, [r7, #20]
    
  HRTIM_ExternalEventConfig(HRTIMx,
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f107 0214 	add.w	r2, r7, #20
 80032a4:	4619      	mov	r1, r3
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f001 fc5b 	bl	8004b62 <HRTIM_ExternalEventConfig>
                    pBasicCaptureChannelCfg->Event,
                    &EventCfg);

  /* Memorize capture trigger (will be configured when the capture is started */  
  HRTIM_CaptureUnitConfig(HRTIMx,
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	68b9      	ldr	r1, [r7, #8]
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f001 fb50 	bl	800495a <HRTIM_CaptureUnitConfig>
                          TimerIdx,
                          CaptureChannel,
                          pBasicCaptureChannelCfg->Event); 
}
 80032ba:	bf00      	nop
 80032bc:	3728      	adds	r7, #40	; 0x28
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HRTIM_SimpleOnePulseChannelConfig>:
  */
void HRTIM_SimpleOnePulseChannelConfig(HRTIM_TypeDef * HRTIMx,
                                                       uint32_t TimerIdx,
                                                       uint32_t OnePulseChannel,
                                                       HRTIM_BasicOnePulseChannelCfgTypeDef* pBasicOnePulseChannelCfg)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b096      	sub	sp, #88	; 0x58
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	60f8      	str	r0, [r7, #12]
 80032ca:	60b9      	str	r1, [r7, #8]
 80032cc:	607a      	str	r2, [r7, #4]
 80032ce:	603b      	str	r3, [r7, #0]
  uint32_t CompareUnit = HRTIM_COMPAREUNIT_1;
 80032d0:	2301      	movs	r3, #1
 80032d2:	657b      	str	r3, [r7, #84]	; 0x54
  assert_param(IS_HRTIM_EVENTPOLARITY(pBasicOnePulseChannelCfg->EventPolarity));
  assert_param(IS_HRTIM_EVENTSENSITIVITY(pBasicOnePulseChannelCfg->EventSensitivity));
  assert_param(IS_HRTIM_EVENTFILTER(pBasicOnePulseChannelCfg->EventFilter));
  
  /* Configure timer compare unit */  
  switch (OnePulseChannel)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b10      	cmp	r3, #16
 80032d8:	d01d      	beq.n	8003316 <HRTIM_SimpleOnePulseChannelConfig+0x54>
 80032da:	2b10      	cmp	r3, #16
 80032dc:	d80b      	bhi.n	80032f6 <HRTIM_SimpleOnePulseChannelConfig+0x34>
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d01c      	beq.n	800331c <HRTIM_SimpleOnePulseChannelConfig+0x5a>
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d802      	bhi.n	80032ec <HRTIM_SimpleOnePulseChannelConfig+0x2a>
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d015      	beq.n	8003316 <HRTIM_SimpleOnePulseChannelConfig+0x54>
    {
      CompareUnit = HRTIM_COMPAREUNIT_2;
    }
    break;
    default:
    break;      
 80032ea:	e01a      	b.n	8003322 <HRTIM_SimpleOnePulseChannelConfig+0x60>
  switch (OnePulseChannel)
 80032ec:	2b04      	cmp	r3, #4
 80032ee:	d012      	beq.n	8003316 <HRTIM_SimpleOnePulseChannelConfig+0x54>
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d013      	beq.n	800331c <HRTIM_SimpleOnePulseChannelConfig+0x5a>
    break;      
 80032f4:	e015      	b.n	8003322 <HRTIM_SimpleOnePulseChannelConfig+0x60>
  switch (OnePulseChannel)
 80032f6:	2b80      	cmp	r3, #128	; 0x80
 80032f8:	d010      	beq.n	800331c <HRTIM_SimpleOnePulseChannelConfig+0x5a>
 80032fa:	2b80      	cmp	r3, #128	; 0x80
 80032fc:	d804      	bhi.n	8003308 <HRTIM_SimpleOnePulseChannelConfig+0x46>
 80032fe:	2b20      	cmp	r3, #32
 8003300:	d00c      	beq.n	800331c <HRTIM_SimpleOnePulseChannelConfig+0x5a>
 8003302:	2b40      	cmp	r3, #64	; 0x40
 8003304:	d007      	beq.n	8003316 <HRTIM_SimpleOnePulseChannelConfig+0x54>
    break;      
 8003306:	e00c      	b.n	8003322 <HRTIM_SimpleOnePulseChannelConfig+0x60>
  switch (OnePulseChannel)
 8003308:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800330c:	d003      	beq.n	8003316 <HRTIM_SimpleOnePulseChannelConfig+0x54>
 800330e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003312:	d003      	beq.n	800331c <HRTIM_SimpleOnePulseChannelConfig+0x5a>
    break;      
 8003314:	e005      	b.n	8003322 <HRTIM_SimpleOnePulseChannelConfig+0x60>
      CompareUnit = HRTIM_COMPAREUNIT_1;
 8003316:	2301      	movs	r3, #1
 8003318:	657b      	str	r3, [r7, #84]	; 0x54
    break;
 800331a:	e002      	b.n	8003322 <HRTIM_SimpleOnePulseChannelConfig+0x60>
      CompareUnit = HRTIM_COMPAREUNIT_2;
 800331c:	2302      	movs	r3, #2
 800331e:	657b      	str	r3, [r7, #84]	; 0x54
    break;
 8003320:	bf00      	nop
  }
  
  CompareCfg.CompareValue = pBasicOnePulseChannelCfg->Pulse;
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	64bb      	str	r3, [r7, #72]	; 0x48
  CompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8003328:	2300      	movs	r3, #0
 800332a:	64fb      	str	r3, [r7, #76]	; 0x4c
  CompareCfg.AutoDelayedTimeout = 0;
 800332c:	2300      	movs	r3, #0
 800332e:	653b      	str	r3, [r7, #80]	; 0x50
  
  HRTIM_CompareUnitConfig(HRTIMx,
 8003330:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003334:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003336:	68b9      	ldr	r1, [r7, #8]
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f001 fa94 	bl	8004866 <HRTIM_CompareUnitConfig>
                          TimerIdx,
                          CompareUnit,
                          &CompareCfg);
  
  /* Configure timer output */
  OutputCfg.Polarity = pBasicOnePulseChannelCfg->OutputPolarity;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	62bb      	str	r3, [r7, #40]	; 0x28
  OutputCfg.IdleState = pBasicOnePulseChannelCfg->OutputIdleState;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	63bb      	str	r3, [r7, #56]	; 0x38
  OutputCfg.FaultState = HRTIM_OUTPUTFAULTSTATE_NONE;
 800334a:	2300      	movs	r3, #0
 800334c:	63fb      	str	r3, [r7, #60]	; 0x3c
  OutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 800334e:	2300      	movs	r3, #0
 8003350:	637b      	str	r3, [r7, #52]	; 0x34
  OutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8003352:	2300      	movs	r3, #0
 8003354:	643b      	str	r3, [r7, #64]	; 0x40
  OutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8003356:	2300      	movs	r3, #0
 8003358:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (CompareUnit == HRTIM_COMPAREUNIT_1)
 800335a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800335c:	2b01      	cmp	r3, #1
 800335e:	d102      	bne.n	8003366 <HRTIM_SimpleOnePulseChannelConfig+0xa4>
  {
    OutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1;
 8003360:	2308      	movs	r3, #8
 8003362:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003364:	e001      	b.n	800336a <HRTIM_SimpleOnePulseChannelConfig+0xa8>
  }
  else
  {
    OutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP2;
 8003366:	2310      	movs	r3, #16
 8003368:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  OutputCfg.ResetSource = HRTIM_OUTPUTSET_TIMPER;
 800336a:	2304      	movs	r3, #4
 800336c:	633b      	str	r3, [r7, #48]	; 0x30
  
  HRTIM_OutputConfig(HRTIMx,
 800336e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	68b9      	ldr	r1, [r7, #8]
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f001 fb57 	bl	8004a2a <HRTIM_OutputConfig>
                     TimerIdx,
                     OnePulseChannel,
                     &OutputCfg);  
  
  /* Configure external event channel */
  EventCfg.FastMode = HRTIM_EVENTFASTMODE_DISABLE;
 800337c:	2300      	movs	r3, #0
 800337e:	627b      	str	r3, [r7, #36]	; 0x24
  EventCfg.Filter = pBasicOnePulseChannelCfg->EventFilter;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	623b      	str	r3, [r7, #32]
  EventCfg.Polarity = pBasicOnePulseChannelCfg->EventPolarity;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	61bb      	str	r3, [r7, #24]
  EventCfg.Sensitivity = pBasicOnePulseChannelCfg->EventSensitivity;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	61fb      	str	r3, [r7, #28]
  EventCfg.Source = HRTIM_EVENTSRC_1;
 8003392:	2300      	movs	r3, #0
 8003394:	617b      	str	r3, [r7, #20]
    
  HRTIM_ExternalEventConfig(HRTIMx,
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	f107 0214 	add.w	r2, r7, #20
 800339e:	4619      	mov	r1, r3
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f001 fbde 	bl	8004b62 <HRTIM_ExternalEventConfig>
                    pBasicOnePulseChannelCfg->Event,
                    &EventCfg);

  /* Configure the timer reset register */
  HRTIM_TIM_ResetConfig(HRTIMx,
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	461a      	mov	r2, r3
 80033ac:	68b9      	ldr	r1, [r7, #8]
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f001 fd95 	bl	8004ede <HRTIM_TIM_ResetConfig>
                        TimerIdx, 
                        pBasicOnePulseChannelCfg->Event);  
}
 80033b4:	bf00      	nop
 80033b6:	3758      	adds	r7, #88	; 0x58
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <HRTIM_WaveformTimerConfig>:
  * @retval None
  */
void HRTIM_WaveformTimerConfig(HRTIM_TypeDef * HRTIMx,
                                                uint32_t TimerIdx,
                                                HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80033bc:	b480      	push	{r7}
 80033be:	b089      	sub	sp, #36	; 0x24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger)); 
  assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
  assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

  /* Configure timing unit (Timer A to Timer E) */
  HRTIM_timcr = HRTIMx->HRTIM_TIMERx[TimerIdx].TIMxCR;
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	3301      	adds	r3, #1
 80033ce:	01db      	lsls	r3, r3, #7
 80033d0:	4413      	add	r3, r2
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	61fb      	str	r3, [r7, #28]
  HRTIM_timfltr  = HRTIMx->HRTIM_TIMERx[TimerIdx].FLTxR;
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	01db      	lsls	r3, r3, #7
 80033dc:	4413      	add	r3, r2
 80033de:	33e8      	adds	r3, #232	; 0xe8
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	61bb      	str	r3, [r7, #24]
  HRTIM_timoutr  = HRTIMx->HRTIM_TIMERx[TimerIdx].OUTxR;
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	01db      	lsls	r3, r3, #7
 80033ea:	4413      	add	r3, r2
 80033ec:	33e4      	adds	r3, #228	; 0xe4
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	617b      	str	r3, [r7, #20]
  HRTIM_timrstr  = HRTIMx->HRTIM_TIMERx[TimerIdx].RSTxR;
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	01db      	lsls	r3, r3, #7
 80033f8:	4413      	add	r3, r2
 80033fa:	33d4      	adds	r3, #212	; 0xd4
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	613b      	str	r3, [r7, #16]
  
  /* Set the push-pull mode */
  HRTIM_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003406:	61fb      	str	r3, [r7, #28]
  HRTIM_timcr |= pTimerCfg->PushPull;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	69fa      	ldr	r2, [r7, #28]
 800340e:	4313      	orrs	r3, r2
 8003410:	61fb      	str	r3, [r7, #28]
  
  /* Enable/Disable registers update on timer counter reset */
  HRTIM_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003418:	61fb      	str	r3, [r7, #28]
  HRTIM_timcr |= pTimerCfg->ResetUpdate;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	69fa      	ldr	r2, [r7, #28]
 8003420:	4313      	orrs	r3, r2
 8003422:	61fb      	str	r3, [r7, #28]
  
  /* Set the timer update trigger */
  HRTIM_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 800342a:	61fb      	str	r3, [r7, #28]
  HRTIM_timcr |= pTimerCfg->UpdateTrigger;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	69fa      	ldr	r2, [r7, #28]
 8003432:	4313      	orrs	r3, r2
 8003434:	61fb      	str	r3, [r7, #28]
  
  /* Enable/Disable the fault channel at timer level */
  HRTIM_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	f023 031f 	bic.w	r3, r3, #31
 800343c:	61bb      	str	r3, [r7, #24]
  HRTIM_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f003 031f 	and.w	r3, r3, #31
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	4313      	orrs	r3, r2
 800344a:	61bb      	str	r3, [r7, #24]
  
  /* Lock/Unlock fault sources at timer level */
  HRTIM_timfltr &= ~(HRTIM_FLTR_FLTCLK);
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003452:	61bb      	str	r3, [r7, #24]
  HRTIM_timfltr |= pTimerCfg->FaultLock;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	4313      	orrs	r3, r2
 800345c:	61bb      	str	r3, [r7, #24]
  
  /* Enable/Disable dead time insertion at timer level */
  HRTIM_timoutr &= ~(HRTIM_OUTR_DTEN);
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003464:	617b      	str	r3, [r7, #20]
  HRTIM_timoutr |= pTimerCfg->DeadTimeInsertion;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	4313      	orrs	r3, r2
 800346e:	617b      	str	r3, [r7, #20]

  /* Enable/Disable delayed protection at timer level */
  HRTIM_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8003476:	617b      	str	r3, [r7, #20]
  HRTIM_timoutr |= pTimerCfg->DelayedProtectionMode;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	4313      	orrs	r3, r2
 8003480:	617b      	str	r3, [r7, #20]
  
  /* Set the timer counter reset trigger */
  HRTIM_timrstr = pTimerCfg->ResetTrigger;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	613b      	str	r3, [r7, #16]

  /* Update the HRTIMx registers */
  HRTIMx->HRTIM_TIMERx[TimerIdx].TIMxCR  = HRTIM_timcr;
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	3301      	adds	r3, #1
 800348e:	01db      	lsls	r3, r3, #7
 8003490:	4413      	add	r3, r2
 8003492:	69fa      	ldr	r2, [r7, #28]
 8003494:	601a      	str	r2, [r3, #0]
  HRTIMx->HRTIM_TIMERx[TimerIdx].FLTxR = HRTIM_timfltr;
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	01db      	lsls	r3, r3, #7
 800349c:	4413      	add	r3, r2
 800349e:	33e8      	adds	r3, #232	; 0xe8
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	601a      	str	r2, [r3, #0]
  HRTIMx->HRTIM_TIMERx[TimerIdx].OUTxR = HRTIM_timoutr;
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	01db      	lsls	r3, r3, #7
 80034aa:	4413      	add	r3, r2
 80034ac:	33e4      	adds	r3, #228	; 0xe4
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	601a      	str	r2, [r3, #0]
  HRTIMx->HRTIM_TIMERx[TimerIdx].RSTxR = HRTIM_timrstr;
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	01db      	lsls	r3, r3, #7
 80034b8:	4413      	add	r3, r2
 80034ba:	33d4      	adds	r3, #212	; 0xd4
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	601a      	str	r2, [r3, #0]
 }
 80034c0:	bf00      	nop
 80034c2:	3724      	adds	r7, #36	; 0x24
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <HRTIM_WaveformCompareConfig>:
  */
 void HRTIM_WaveformCompareConfig(HRTIM_TypeDef * HRTIMx,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b087      	sub	sp, #28
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
 80034d8:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMING_UNIT(TimerIdx));
  assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));
  
  /* Configure the compare unit */
  switch (CompareUnit)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	3b01      	subs	r3, #1
 80034de:	2b07      	cmp	r3, #7
 80034e0:	f200 80a5 	bhi.w	800362e <HRTIM_WaveformCompareConfig+0x162>
 80034e4:	a201      	add	r2, pc, #4	; (adr r2, 80034ec <HRTIM_WaveformCompareConfig+0x20>)
 80034e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ea:	bf00      	nop
 80034ec:	0800350d 	.word	0x0800350d
 80034f0:	0800351f 	.word	0x0800351f
 80034f4:	0800362f 	.word	0x0800362f
 80034f8:	0800359d 	.word	0x0800359d
 80034fc:	0800362f 	.word	0x0800362f
 8003500:	0800362f 	.word	0x0800362f
 8003504:	0800362f 	.word	0x0800362f
 8003508:	080035af 	.word	0x080035af
  {
    case HRTIM_COMPAREUNIT_1:
    {
      /* Set the compare value */
      HRTIMx->HRTIM_TIMERx[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68f9      	ldr	r1, [r7, #12]
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	01db      	lsls	r3, r3, #7
 8003516:	440b      	add	r3, r1
 8003518:	339c      	adds	r3, #156	; 0x9c
 800351a:	601a      	str	r2, [r3, #0]
    }
    break;
 800351c:	e08c      	b.n	8003638 <HRTIM_WaveformCompareConfig+0x16c>
    case HRTIM_COMPAREUNIT_2:
    {
      /* Set the compare value */
      HRTIMx->HRTIM_TIMERx[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68f9      	ldr	r1, [r7, #12]
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	01db      	lsls	r3, r3, #7
 8003528:	440b      	add	r3, r1
 800352a:	33a4      	adds	r3, #164	; 0xa4
 800352c:	601a      	str	r2, [r3, #0]
      
      if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d07d      	beq.n	8003632 <HRTIM_WaveformCompareConfig+0x166>
      {
        /* Configure auto-delayed mode */
        HRTIM_timcr = HRTIMx->HRTIM_TIMERx[TimerIdx].TIMxCR;
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	3301      	adds	r3, #1
 800353c:	01db      	lsls	r3, r3, #7
 800353e:	4413      	add	r3, r2
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	617b      	str	r3, [r7, #20]
        HRTIM_timcr &= ~HRTIM_TIMCR_DELCMP2;
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800354a:	617b      	str	r3, [r7, #20]
        HRTIM_timcr |= pCompareCfg->AutoDelayedMode;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	4313      	orrs	r3, r2
 8003554:	617b      	str	r3, [r7, #20]
        HRTIMx->HRTIM_TIMERx[TimerIdx].TIMxCR = HRTIM_timcr;
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	3301      	adds	r3, #1
 800355c:	01db      	lsls	r3, r3, #7
 800355e:	4413      	add	r3, r2
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	601a      	str	r2, [r3, #0]
        
        /* Set the compare value for timeout compare unit (if any) */
        if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800356c:	d108      	bne.n	8003580 <HRTIM_WaveformCompareConfig+0xb4>
        {
          HRTIMx->HRTIM_TIMERx[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	689a      	ldr	r2, [r3, #8]
 8003572:	68f9      	ldr	r1, [r7, #12]
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	01db      	lsls	r3, r3, #7
 8003578:	440b      	add	r3, r1
 800357a:	339c      	adds	r3, #156	; 0x9c
 800357c:	601a      	str	r2, [r3, #0]
        {
          HRTIMx->HRTIM_TIMERx[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
        }
      }
    }
    break;
 800357e:	e058      	b.n	8003632 <HRTIM_WaveformCompareConfig+0x166>
        else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003588:	d153      	bne.n	8003632 <HRTIM_WaveformCompareConfig+0x166>
          HRTIMx->HRTIM_TIMERx[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	689a      	ldr	r2, [r3, #8]
 800358e:	68f9      	ldr	r1, [r7, #12]
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	01db      	lsls	r3, r3, #7
 8003594:	440b      	add	r3, r1
 8003596:	33a8      	adds	r3, #168	; 0xa8
 8003598:	601a      	str	r2, [r3, #0]
    break;
 800359a:	e04a      	b.n	8003632 <HRTIM_WaveformCompareConfig+0x166>
    case HRTIM_COMPAREUNIT_3:
    {
      /* Set the compare value */
      HRTIMx->HRTIM_TIMERx[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	68f9      	ldr	r1, [r7, #12]
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	01db      	lsls	r3, r3, #7
 80035a6:	440b      	add	r3, r1
 80035a8:	33a8      	adds	r3, #168	; 0xa8
 80035aa:	601a      	str	r2, [r3, #0]
    }
    break;
 80035ac:	e044      	b.n	8003638 <HRTIM_WaveformCompareConfig+0x16c>
    case HRTIM_COMPAREUNIT_4:
    {
      /* Set the compare value */
      HRTIMx->HRTIM_TIMERx[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	68f9      	ldr	r1, [r7, #12]
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	01db      	lsls	r3, r3, #7
 80035b8:	440b      	add	r3, r1
 80035ba:	33ac      	adds	r3, #172	; 0xac
 80035bc:	601a      	str	r2, [r3, #0]
      
      if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d037      	beq.n	8003636 <HRTIM_WaveformCompareConfig+0x16a>
      {
        /* Configure auto-delayed mode */
        HRTIM_timcr = HRTIMx->HRTIM_TIMERx[TimerIdx].TIMxCR;
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	3301      	adds	r3, #1
 80035cc:	01db      	lsls	r3, r3, #7
 80035ce:	4413      	add	r3, r2
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	617b      	str	r3, [r7, #20]
        HRTIM_timcr &= ~HRTIM_TIMCR_DELCMP4;
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80035da:	617b      	str	r3, [r7, #20]
        HRTIM_timcr |= (pCompareCfg->AutoDelayedMode << 2);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	617b      	str	r3, [r7, #20]
        HRTIMx->HRTIM_TIMERx[TimerIdx].TIMxCR = HRTIM_timcr;
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	3301      	adds	r3, #1
 80035ee:	01db      	lsls	r3, r3, #7
 80035f0:	4413      	add	r3, r2
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	601a      	str	r2, [r3, #0]
        
        /* Set the compare value for timeout compare unit (if any) */
        if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035fe:	d108      	bne.n	8003612 <HRTIM_WaveformCompareConfig+0x146>
        {
          HRTIMx->HRTIM_TIMERx[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	68f9      	ldr	r1, [r7, #12]
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	01db      	lsls	r3, r3, #7
 800360a:	440b      	add	r3, r1
 800360c:	339c      	adds	r3, #156	; 0x9c
 800360e:	601a      	str	r2, [r3, #0]
        {
          HRTIMx->HRTIM_TIMERx[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
        }
      }
    }
    break;
 8003610:	e011      	b.n	8003636 <HRTIM_WaveformCompareConfig+0x16a>
        else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800361a:	d10c      	bne.n	8003636 <HRTIM_WaveformCompareConfig+0x16a>
          HRTIMx->HRTIM_TIMERx[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	68f9      	ldr	r1, [r7, #12]
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	01db      	lsls	r3, r3, #7
 8003626:	440b      	add	r3, r1
 8003628:	33a8      	adds	r3, #168	; 0xa8
 800362a:	601a      	str	r2, [r3, #0]
    break;
 800362c:	e003      	b.n	8003636 <HRTIM_WaveformCompareConfig+0x16a>
    default:
    break;  
 800362e:	bf00      	nop
 8003630:	e002      	b.n	8003638 <HRTIM_WaveformCompareConfig+0x16c>
    break;
 8003632:	bf00      	nop
 8003634:	e000      	b.n	8003638 <HRTIM_WaveformCompareConfig+0x16c>
    break;
 8003636:	bf00      	nop
  }
}
 8003638:	bf00      	nop
 800363a:	371c      	adds	r7, #28
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <HRTIM_MasterSetCompare>:
  * @retval None
  */
void HRTIM_MasterSetCompare(HRTIM_TypeDef * HRTIMx,
                                                  uint32_t CompareUnit,
                                                  uint32_t Compare)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_COMPAREUNIT(CompareUnit));
  
  /* Configure the compare unit */
  switch (CompareUnit)
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	3b01      	subs	r3, #1
 8003654:	2b07      	cmp	r3, #7
 8003656:	d823      	bhi.n	80036a0 <HRTIM_MasterSetCompare+0x5c>
 8003658:	a201      	add	r2, pc, #4	; (adr r2, 8003660 <HRTIM_MasterSetCompare+0x1c>)
 800365a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365e:	bf00      	nop
 8003660:	08003681 	.word	0x08003681
 8003664:	08003689 	.word	0x08003689
 8003668:	080036a1 	.word	0x080036a1
 800366c:	08003691 	.word	0x08003691
 8003670:	080036a1 	.word	0x080036a1
 8003674:	080036a1 	.word	0x080036a1
 8003678:	080036a1 	.word	0x080036a1
 800367c:	08003699 	.word	0x08003699
  {
    case HRTIM_COMPAREUNIT_1:
    {
      /* Set the compare value */
      HRTIMx->HRTIM_MASTER.MCMP1R = Compare;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	61da      	str	r2, [r3, #28]
    }
    break;
 8003686:	e00c      	b.n	80036a2 <HRTIM_MasterSetCompare+0x5e>
    case HRTIM_COMPAREUNIT_2:
    {
      /* Set the compare value */
      HRTIMx->HRTIM_MASTER.MCMP2R = Compare;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	625a      	str	r2, [r3, #36]	; 0x24
    }
    break;
 800368e:	e008      	b.n	80036a2 <HRTIM_MasterSetCompare+0x5e>
    case HRTIM_COMPAREUNIT_3:
    {
      /* Set the compare value */
      HRTIMx->HRTIM_MASTER.MCMP3R = Compare;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	629a      	str	r2, [r3, #40]	; 0x28
    }
    break;
 8003696:	e004      	b.n	80036a2 <HRTIM_MasterSetCompare+0x5e>
    case HRTIM_COMPAREUNIT_4:
    {
      /* Set the compare value */
      HRTIMx->HRTIM_MASTER.MCMP4R = Compare;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    break;
 800369e:	e000      	b.n	80036a2 <HRTIM_MasterSetCompare+0x5e>
    default:
    break;
 80036a0:	bf00      	nop
  }  
}
 80036a2:	bf00      	nop
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr

080036ae <HRTIM_SlaveSetCompare>:
  */
void HRTIM_SlaveSetCompare(HRTIM_TypeDef * HRTIMx,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  uint32_t Compare)
{
 80036ae:	b480      	push	{r7}
 80036b0:	b085      	sub	sp, #20
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	60f8      	str	r0, [r7, #12]
 80036b6:	60b9      	str	r1, [r7, #8]
 80036b8:	607a      	str	r2, [r7, #4]
 80036ba:	603b      	str	r3, [r7, #0]
    /* Check parameters */
  assert_param(IS_HRTIM_COMPAREUNIT(CompareUnit));
  
  /* Configure the compare unit */
  switch (CompareUnit)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3b01      	subs	r3, #1
 80036c0:	2b07      	cmp	r3, #7
 80036c2:	d833      	bhi.n	800372c <HRTIM_SlaveSetCompare+0x7e>
 80036c4:	a201      	add	r2, pc, #4	; (adr r2, 80036cc <HRTIM_SlaveSetCompare+0x1e>)
 80036c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ca:	bf00      	nop
 80036cc:	080036ed 	.word	0x080036ed
 80036d0:	080036fd 	.word	0x080036fd
 80036d4:	0800372d 	.word	0x0800372d
 80036d8:	0800370d 	.word	0x0800370d
 80036dc:	0800372d 	.word	0x0800372d
 80036e0:	0800372d 	.word	0x0800372d
 80036e4:	0800372d 	.word	0x0800372d
 80036e8:	0800371d 	.word	0x0800371d
  {
    case HRTIM_COMPAREUNIT_1:
    {
      /* Set the compare value */
      HRTIMx->HRTIM_TIMERx[TimerIdx].CMP1xR = Compare;
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	01db      	lsls	r3, r3, #7
 80036f2:	4413      	add	r3, r2
 80036f4:	339c      	adds	r3, #156	; 0x9c
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	601a      	str	r2, [r3, #0]
    }
    break;
 80036fa:	e018      	b.n	800372e <HRTIM_SlaveSetCompare+0x80>
    case HRTIM_COMPAREUNIT_2:
    {
      /* Set the compare value */
      HRTIMx->HRTIM_TIMERx[TimerIdx].CMP2xR = Compare;
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	01db      	lsls	r3, r3, #7
 8003702:	4413      	add	r3, r2
 8003704:	33a4      	adds	r3, #164	; 0xa4
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	601a      	str	r2, [r3, #0]
    }
    break;
 800370a:	e010      	b.n	800372e <HRTIM_SlaveSetCompare+0x80>
    case HRTIM_COMPAREUNIT_3:
    {
      /* Set the compare value */
      HRTIMx->HRTIM_TIMERx[TimerIdx].CMP3xR = Compare;
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	01db      	lsls	r3, r3, #7
 8003712:	4413      	add	r3, r2
 8003714:	33a8      	adds	r3, #168	; 0xa8
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	601a      	str	r2, [r3, #0]
    }
    break;
 800371a:	e008      	b.n	800372e <HRTIM_SlaveSetCompare+0x80>
    case HRTIM_COMPAREUNIT_4:
    {
      /* Set the compare value */
      HRTIMx->HRTIM_TIMERx[TimerIdx].CMP4xR = Compare;
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	01db      	lsls	r3, r3, #7
 8003722:	4413      	add	r3, r2
 8003724:	33ac      	adds	r3, #172	; 0xac
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	601a      	str	r2, [r3, #0]
    }
    break;
 800372a:	e000      	b.n	800372e <HRTIM_SlaveSetCompare+0x80>
    default:
    break;
 800372c:	bf00      	nop
  }  
}
 800372e:	bf00      	nop
 8003730:	3714      	adds	r7, #20
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <HRTIM_WaveformCaptureConfig>:
  */
void HRTIM_WaveformCaptureConfig(HRTIM_TypeDef * HRTIMx,
                                                  uint32_t TimerIdx,
                                                  uint32_t CaptureUnit,
                                                  HRTIM_CaptureCfgTypeDef* pCaptureCfg)
{
 800373a:	b480      	push	{r7}
 800373c:	b085      	sub	sp, #20
 800373e:	af00      	add	r7, sp, #0
 8003740:	60f8      	str	r0, [r7, #12]
 8003742:	60b9      	str	r1, [r7, #8]
 8003744:	607a      	str	r2, [r7, #4]
 8003746:	603b      	str	r3, [r7, #0]
  /* Configure the capture unit */
  switch (CaptureUnit)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d002      	beq.n	8003754 <HRTIM_WaveformCaptureConfig+0x1a>
 800374e:	2b02      	cmp	r3, #2
 8003750:	d009      	beq.n	8003766 <HRTIM_WaveformCaptureConfig+0x2c>
    {
      HRTIMx->HRTIM_TIMERx[TimerIdx].CPT2xCR = pCaptureCfg->Trigger;
    }
    break;
    default:
    break;
 8003752:	e011      	b.n	8003778 <HRTIM_WaveformCaptureConfig+0x3e>
      HRTIMx->HRTIM_TIMERx[TimerIdx].CPT1xCR = pCaptureCfg->Trigger;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	68f9      	ldr	r1, [r7, #12]
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	01db      	lsls	r3, r3, #7
 800375e:	440b      	add	r3, r1
 8003760:	33dc      	adds	r3, #220	; 0xdc
 8003762:	601a      	str	r2, [r3, #0]
    break;
 8003764:	e008      	b.n	8003778 <HRTIM_WaveformCaptureConfig+0x3e>
      HRTIMx->HRTIM_TIMERx[TimerIdx].CPT2xCR = pCaptureCfg->Trigger;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	68f9      	ldr	r1, [r7, #12]
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	01db      	lsls	r3, r3, #7
 8003770:	440b      	add	r3, r1
 8003772:	33e0      	adds	r3, #224	; 0xe0
 8003774:	601a      	str	r2, [r3, #0]
    break;
 8003776:	bf00      	nop
  }
}
 8003778:	bf00      	nop
 800377a:	3714      	adds	r7, #20
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <HRTIM_WaveformOutputConfig>:
  */
void HRTIM_WaveformOutputConfig(HRTIM_TypeDef * HRTIMx,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
 8003790:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTFAULTSTATE(pOutputCfg->FaultState));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  /* Configure the timer output */
  HRTIM_OutputConfig(HRTIMx, TimerIdx, Output, pOutputCfg);  
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	68b9      	ldr	r1, [r7, #8]
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	f001 f946 	bl	8004a2a <HRTIM_OutputConfig>
}
 800379e:	bf00      	nop
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <HRTIM_TimerEventFilteringConfig>:
  */
void HRTIM_TimerEventFilteringConfig(HRTIM_TypeDef * HRTIMx,
                                                      uint32_t TimerIdx,
                                                      uint32_t Event,
                                                      HRTIM_TimerEventFilteringCfgTypeDef* pTimerEventFilteringCfg)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b087      	sub	sp, #28
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	60f8      	str	r0, [r7, #12]
 80037ae:	60b9      	str	r1, [r7, #8]
 80037b0:	607a      	str	r2, [r7, #4]
 80037b2:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_EVENT(Event));
  assert_param(IS_HRTIM_TIMEVENTFILTER(pTimerEventFilteringCfg->Filter));
  assert_param(IS_HRTIM_TIMEVENTLATCH(pTimerEventFilteringCfg->Latch));

  /* Configure timer event filtering capabilities */
  switch (Event)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b10      	cmp	r3, #16
 80037b8:	f000 80a3 	beq.w	8003902 <HRTIM_TimerEventFilteringConfig+0x15c>
 80037bc:	2b10      	cmp	r3, #16
 80037be:	d80d      	bhi.n	80037dc <HRTIM_TimerEventFilteringConfig+0x36>
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d04a      	beq.n	800385a <HRTIM_TimerEventFilteringConfig+0xb4>
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d804      	bhi.n	80037d2 <HRTIM_TimerEventFilteringConfig+0x2c>
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d01c      	beq.n	8003806 <HRTIM_TimerEventFilteringConfig+0x60>
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d029      	beq.n	8003824 <HRTIM_TimerEventFilteringConfig+0x7e>
      HRTIM_eefr |= ((pTimerEventFilteringCfg->Filter | pTimerEventFilteringCfg->Latch) << 24);
      HRTIMx->HRTIM_TIMERx[TimerIdx].EEFxR2 = HRTIM_eefr;
    }
    break;
    default:
    break;
 80037d0:	e13e      	b.n	8003a50 <HRTIM_TimerEventFilteringConfig+0x2aa>
  switch (Event)
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d05d      	beq.n	8003892 <HRTIM_TimerEventFilteringConfig+0xec>
 80037d6:	2b08      	cmp	r3, #8
 80037d8:	d077      	beq.n	80038ca <HRTIM_TimerEventFilteringConfig+0x124>
    break;
 80037da:	e139      	b.n	8003a50 <HRTIM_TimerEventFilteringConfig+0x2aa>
  switch (Event)
 80037dc:	2b80      	cmp	r3, #128	; 0x80
 80037de:	f000 80e3 	beq.w	80039a8 <HRTIM_TimerEventFilteringConfig+0x202>
 80037e2:	2b80      	cmp	r3, #128	; 0x80
 80037e4:	d806      	bhi.n	80037f4 <HRTIM_TimerEventFilteringConfig+0x4e>
 80037e6:	2b20      	cmp	r3, #32
 80037e8:	f000 80a7 	beq.w	800393a <HRTIM_TimerEventFilteringConfig+0x194>
 80037ec:	2b40      	cmp	r3, #64	; 0x40
 80037ee:	f000 80bf 	beq.w	8003970 <HRTIM_TimerEventFilteringConfig+0x1ca>
    break;
 80037f2:	e12d      	b.n	8003a50 <HRTIM_TimerEventFilteringConfig+0x2aa>
  switch (Event)
 80037f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037f8:	f000 80f2 	beq.w	80039e0 <HRTIM_TimerEventFilteringConfig+0x23a>
 80037fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003800:	f000 810a 	beq.w	8003a18 <HRTIM_TimerEventFilteringConfig+0x272>
    break;
 8003804:	e124      	b.n	8003a50 <HRTIM_TimerEventFilteringConfig+0x2aa>
      HRTIMx->HRTIM_TIMERx[TimerIdx].EEFxR1 = 0;
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	01db      	lsls	r3, r3, #7
 800380c:	4413      	add	r3, r2
 800380e:	33cc      	adds	r3, #204	; 0xcc
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]
      HRTIMx->HRTIM_TIMERx[TimerIdx].EEFxR2 = 0;
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	01db      	lsls	r3, r3, #7
 800381a:	4413      	add	r3, r2
 800381c:	33d0      	adds	r3, #208	; 0xd0
 800381e:	2200      	movs	r2, #0
 8003820:	601a      	str	r2, [r3, #0]
    break;
 8003822:	e115      	b.n	8003a50 <HRTIM_TimerEventFilteringConfig+0x2aa>
      HRTIM_eefr = HRTIMx->HRTIM_TIMERx[TimerIdx].EEFxR1;
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	01db      	lsls	r3, r3, #7
 800382a:	4413      	add	r3, r2
 800382c:	33cc      	adds	r3, #204	; 0xcc
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	617b      	str	r3, [r7, #20]
      HRTIM_eefr &= ~(HRTIM_EEFR1_EE1FLTR | HRTIM_EEFR1_EE1LTCH);
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f023 031f 	bic.w	r3, r3, #31
 8003838:	617b      	str	r3, [r7, #20]
      HRTIM_eefr |= (pTimerEventFilteringCfg->Filter | pTimerEventFilteringCfg->Latch);
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	4313      	orrs	r3, r2
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	4313      	orrs	r3, r2
 8003848:	617b      	str	r3, [r7, #20]
      HRTIMx->HRTIM_TIMERx[TimerIdx].EEFxR1 = HRTIM_eefr;
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	01db      	lsls	r3, r3, #7
 8003850:	4413      	add	r3, r2
 8003852:	33cc      	adds	r3, #204	; 0xcc
 8003854:	697a      	ldr	r2, [r7, #20]
 8003856:	601a      	str	r2, [r3, #0]
    break;
 8003858:	e0fa      	b.n	8003a50 <HRTIM_TimerEventFilteringConfig+0x2aa>
      HRTIM_eefr = HRTIMx->HRTIM_TIMERx[TimerIdx].EEFxR1;
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	01db      	lsls	r3, r3, #7
 8003860:	4413      	add	r3, r2
 8003862:	33cc      	adds	r3, #204	; 0xcc
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	617b      	str	r3, [r7, #20]
      HRTIM_eefr &= ~(HRTIM_EEFR1_EE2FLTR | HRTIM_EEFR1_EE2LTCH);
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	f423 63f8 	bic.w	r3, r3, #1984	; 0x7c0
 800386e:	617b      	str	r3, [r7, #20]
      HRTIM_eefr |= ((pTimerEventFilteringCfg->Filter | pTimerEventFilteringCfg->Latch) << 6);
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	4313      	orrs	r3, r2
 800387a:	019b      	lsls	r3, r3, #6
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	4313      	orrs	r3, r2
 8003880:	617b      	str	r3, [r7, #20]
      HRTIMx->HRTIM_TIMERx[TimerIdx].EEFxR1 = HRTIM_eefr;
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	01db      	lsls	r3, r3, #7
 8003888:	4413      	add	r3, r2
 800388a:	33cc      	adds	r3, #204	; 0xcc
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	601a      	str	r2, [r3, #0]
    break;
 8003890:	e0de      	b.n	8003a50 <HRTIM_TimerEventFilteringConfig+0x2aa>
      HRTIM_eefr = HRTIMx->HRTIM_TIMERx[TimerIdx].EEFxR1;
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	01db      	lsls	r3, r3, #7
 8003898:	4413      	add	r3, r2
 800389a:	33cc      	adds	r3, #204	; 0xcc
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	617b      	str	r3, [r7, #20]
      HRTIM_eefr &= ~(HRTIM_EEFR1_EE3FLTR | HRTIM_EEFR1_EE3LTCH);
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	f423 33f8 	bic.w	r3, r3, #126976	; 0x1f000
 80038a6:	617b      	str	r3, [r7, #20]
      HRTIM_eefr |= ((pTimerEventFilteringCfg->Filter | pTimerEventFilteringCfg->Latch) << 12);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	031b      	lsls	r3, r3, #12
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	617b      	str	r3, [r7, #20]
      HRTIMx->HRTIM_TIMERx[TimerIdx].EEFxR1 = HRTIM_eefr;
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	01db      	lsls	r3, r3, #7
 80038c0:	4413      	add	r3, r2
 80038c2:	33cc      	adds	r3, #204	; 0xcc
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	601a      	str	r2, [r3, #0]
    break;
 80038c8:	e0c2      	b.n	8003a50 <HRTIM_TimerEventFilteringConfig+0x2aa>
      HRTIM_eefr = HRTIMx->HRTIM_TIMERx[TimerIdx].EEFxR1;
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	01db      	lsls	r3, r3, #7
 80038d0:	4413      	add	r3, r2
 80038d2:	33cc      	adds	r3, #204	; 0xcc
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	617b      	str	r3, [r7, #20]
      HRTIM_eefr &= ~(HRTIM_EEFR1_EE4FLTR | HRTIM_EEFR1_EE4LTCH);
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f423 03f8 	bic.w	r3, r3, #8126464	; 0x7c0000
 80038de:	617b      	str	r3, [r7, #20]
      HRTIM_eefr |= ((pTimerEventFilteringCfg->Filter | pTimerEventFilteringCfg->Latch) << 18);
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	049b      	lsls	r3, r3, #18
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	617b      	str	r3, [r7, #20]
      HRTIMx->HRTIM_TIMERx[TimerIdx].EEFxR1 = HRTIM_eefr;
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	01db      	lsls	r3, r3, #7
 80038f8:	4413      	add	r3, r2
 80038fa:	33cc      	adds	r3, #204	; 0xcc
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	601a      	str	r2, [r3, #0]
    break;
 8003900:	e0a6      	b.n	8003a50 <HRTIM_TimerEventFilteringConfig+0x2aa>
      HRTIM_eefr = HRTIMx->HRTIM_TIMERx[TimerIdx].EEFxR1;
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	01db      	lsls	r3, r3, #7
 8003908:	4413      	add	r3, r2
 800390a:	33cc      	adds	r3, #204	; 0xcc
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	617b      	str	r3, [r7, #20]
      HRTIM_eefr &= ~(HRTIM_EEFR1_EE5FLTR | HRTIM_EEFR1_EE5LTCH);
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8003916:	617b      	str	r3, [r7, #20]
      HRTIM_eefr |= ((pTimerEventFilteringCfg->Filter | pTimerEventFilteringCfg->Latch) << 24);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	4313      	orrs	r3, r2
 8003922:	061b      	lsls	r3, r3, #24
 8003924:	697a      	ldr	r2, [r7, #20]
 8003926:	4313      	orrs	r3, r2
 8003928:	617b      	str	r3, [r7, #20]
      HRTIMx->HRTIM_TIMERx[TimerIdx].EEFxR1 = HRTIM_eefr;
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	01db      	lsls	r3, r3, #7
 8003930:	4413      	add	r3, r2
 8003932:	33cc      	adds	r3, #204	; 0xcc
 8003934:	697a      	ldr	r2, [r7, #20]
 8003936:	601a      	str	r2, [r3, #0]
    break;
 8003938:	e08a      	b.n	8003a50 <HRTIM_TimerEventFilteringConfig+0x2aa>
      HRTIM_eefr = HRTIMx->HRTIM_TIMERx[TimerIdx].EEFxR2;
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	01db      	lsls	r3, r3, #7
 8003940:	4413      	add	r3, r2
 8003942:	33d0      	adds	r3, #208	; 0xd0
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	617b      	str	r3, [r7, #20]
      HRTIM_eefr &= ~(HRTIM_EEFR2_EE6FLTR | HRTIM_EEFR2_EE6LTCH);
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	f023 031f 	bic.w	r3, r3, #31
 800394e:	617b      	str	r3, [r7, #20]
      HRTIM_eefr |= (pTimerEventFilteringCfg->Filter | pTimerEventFilteringCfg->Latch);
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	4313      	orrs	r3, r2
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	4313      	orrs	r3, r2
 800395e:	617b      	str	r3, [r7, #20]
      HRTIMx->HRTIM_TIMERx[TimerIdx].EEFxR2 = HRTIM_eefr;
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	01db      	lsls	r3, r3, #7
 8003966:	4413      	add	r3, r2
 8003968:	33d0      	adds	r3, #208	; 0xd0
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	601a      	str	r2, [r3, #0]
    break;
 800396e:	e06f      	b.n	8003a50 <HRTIM_TimerEventFilteringConfig+0x2aa>
      HRTIM_eefr = HRTIMx->HRTIM_TIMERx[TimerIdx].EEFxR2;
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	01db      	lsls	r3, r3, #7
 8003976:	4413      	add	r3, r2
 8003978:	33d0      	adds	r3, #208	; 0xd0
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	617b      	str	r3, [r7, #20]
      HRTIM_eefr &= ~(HRTIM_EEFR2_EE7FLTR | HRTIM_EEFR2_EE7LTCH);
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	f423 63f8 	bic.w	r3, r3, #1984	; 0x7c0
 8003984:	617b      	str	r3, [r7, #20]
      HRTIM_eefr |= ((pTimerEventFilteringCfg->Filter | pTimerEventFilteringCfg->Latch) << 6);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	4313      	orrs	r3, r2
 8003990:	019b      	lsls	r3, r3, #6
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	4313      	orrs	r3, r2
 8003996:	617b      	str	r3, [r7, #20]
      HRTIMx->HRTIM_TIMERx[TimerIdx].EEFxR2 = HRTIM_eefr;
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	01db      	lsls	r3, r3, #7
 800399e:	4413      	add	r3, r2
 80039a0:	33d0      	adds	r3, #208	; 0xd0
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	601a      	str	r2, [r3, #0]
    break;
 80039a6:	e053      	b.n	8003a50 <HRTIM_TimerEventFilteringConfig+0x2aa>
      HRTIM_eefr = HRTIMx->HRTIM_TIMERx[TimerIdx].EEFxR2;
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	01db      	lsls	r3, r3, #7
 80039ae:	4413      	add	r3, r2
 80039b0:	33d0      	adds	r3, #208	; 0xd0
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	617b      	str	r3, [r7, #20]
      HRTIM_eefr &= ~(HRTIM_EEFR2_EE8FLTR | HRTIM_EEFR2_EE8LTCH);
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f423 33f8 	bic.w	r3, r3, #126976	; 0x1f000
 80039bc:	617b      	str	r3, [r7, #20]
      HRTIM_eefr |= ((pTimerEventFilteringCfg->Filter | pTimerEventFilteringCfg->Latch) << 12);
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	031b      	lsls	r3, r3, #12
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	617b      	str	r3, [r7, #20]
      HRTIMx->HRTIM_TIMERx[TimerIdx].EEFxR2 = HRTIM_eefr;
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	01db      	lsls	r3, r3, #7
 80039d6:	4413      	add	r3, r2
 80039d8:	33d0      	adds	r3, #208	; 0xd0
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	601a      	str	r2, [r3, #0]
    break;
 80039de:	e037      	b.n	8003a50 <HRTIM_TimerEventFilteringConfig+0x2aa>
      HRTIM_eefr = HRTIMx->HRTIM_TIMERx[TimerIdx].EEFxR2;
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	01db      	lsls	r3, r3, #7
 80039e6:	4413      	add	r3, r2
 80039e8:	33d0      	adds	r3, #208	; 0xd0
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	617b      	str	r3, [r7, #20]
      HRTIM_eefr &= ~(HRTIM_EEFR2_EE9FLTR | HRTIM_EEFR2_EE9LTCH);
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	f423 03f8 	bic.w	r3, r3, #8126464	; 0x7c0000
 80039f4:	617b      	str	r3, [r7, #20]
      HRTIM_eefr |= ((pTimerEventFilteringCfg->Filter | pTimerEventFilteringCfg->Latch) << 18);
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	049b      	lsls	r3, r3, #18
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	617b      	str	r3, [r7, #20]
      HRTIMx->HRTIM_TIMERx[TimerIdx].EEFxR2 = HRTIM_eefr;
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	01db      	lsls	r3, r3, #7
 8003a0e:	4413      	add	r3, r2
 8003a10:	33d0      	adds	r3, #208	; 0xd0
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	601a      	str	r2, [r3, #0]
    break;
 8003a16:	e01b      	b.n	8003a50 <HRTIM_TimerEventFilteringConfig+0x2aa>
      HRTIM_eefr = HRTIMx->HRTIM_TIMERx[TimerIdx].EEFxR2;
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	01db      	lsls	r3, r3, #7
 8003a1e:	4413      	add	r3, r2
 8003a20:	33d0      	adds	r3, #208	; 0xd0
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	617b      	str	r3, [r7, #20]
      HRTIM_eefr &= ~(HRTIM_EEFR2_EE10FLTR | HRTIM_EEFR2_EE10LTCH);
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8003a2c:	617b      	str	r3, [r7, #20]
      HRTIM_eefr |= ((pTimerEventFilteringCfg->Filter | pTimerEventFilteringCfg->Latch) << 24);
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	061b      	lsls	r3, r3, #24
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	617b      	str	r3, [r7, #20]
      HRTIMx->HRTIM_TIMERx[TimerIdx].EEFxR2 = HRTIM_eefr;
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	01db      	lsls	r3, r3, #7
 8003a46:	4413      	add	r3, r2
 8003a48:	33d0      	adds	r3, #208	; 0xd0
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	601a      	str	r2, [r3, #0]
    break;
 8003a4e:	bf00      	nop
  }
}
 8003a50:	bf00      	nop
 8003a52:	371c      	adds	r7, #28
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <HRTIM_DeadTimeConfig>:
  * @retval None
  */
void HRTIM_DeadTimeConfig(HRTIM_TypeDef * HRTIMx,
                                           uint32_t TimerIdx,
                                           HRTIM_DeadTimeCfgTypeDef* pDeadTimeCfg)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b087      	sub	sp, #28
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_TIMDEADTIME_RISINGSIGNLOCK(pDeadTimeCfg->RisingSignLock));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGSIGN(pDeadTimeCfg->FallingSign));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGLOCK(pDeadTimeCfg->FallingLock));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGSIGNLOCK(pDeadTimeCfg->FallingSignLock));

  HRTIM_dtr = HRTIMx->HRTIM_TIMERx[TimerIdx].DTxR;
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	01db      	lsls	r3, r3, #7
 8003a6e:	4413      	add	r3, r2
 8003a70:	33b8      	adds	r3, #184	; 0xb8
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	617b      	str	r3, [r7, #20]
     
  /* Clear timer dead times configuration */
  HRTIM_dtr &= ~(HRTIM_DTR_DTR | HRTIM_DTR_SDTR | HRTIM_DTR_DTPRSC |
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	4b1f      	ldr	r3, [pc, #124]	; (8003af8 <HRTIM_DeadTimeConfig+0x9c>)
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	617b      	str	r3, [r7, #20]
                 HRTIM_DTR_DTRSLK | HRTIM_DTR_DTRLK | HRTIM_DTR_SDTF |
                 HRTIM_DTR_SDTR | HRTIM_DTR_DTFSLK | HRTIM_DTR_DTFLK);
  
  /* Set timer dead times configuration */
  HRTIM_dtr |= (pDeadTimeCfg->Prescaler << 10);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	029b      	lsls	r3, r3, #10
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	617b      	str	r3, [r7, #20]
  HRTIM_dtr |= pDeadTimeCfg->RisingValue;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	617b      	str	r3, [r7, #20]
  HRTIM_dtr |= pDeadTimeCfg->RisingSign;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	617b      	str	r3, [r7, #20]
  HRTIM_dtr |= pDeadTimeCfg->RisingSignLock;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	617b      	str	r3, [r7, #20]
  HRTIM_dtr |= pDeadTimeCfg->RisingLock;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	617b      	str	r3, [r7, #20]
  HRTIM_dtr |= (pDeadTimeCfg->FallingValue << 16);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	041b      	lsls	r3, r3, #16
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	617b      	str	r3, [r7, #20]
  HRTIM_dtr |= pDeadTimeCfg->FallingSign;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	617b      	str	r3, [r7, #20]
  HRTIM_dtr |= pDeadTimeCfg->FallingSignLock;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	617b      	str	r3, [r7, #20]
  HRTIM_dtr |= pDeadTimeCfg->FallingLock;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	617b      	str	r3, [r7, #20]
    
  /* Update the HRTIMx registers */  
  HRTIMx->HRTIM_TIMERx[TimerIdx].DTxR = HRTIM_dtr;
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	01db      	lsls	r3, r3, #7
 8003ae2:	4413      	add	r3, r2
 8003ae4:	33b8      	adds	r3, #184	; 0xb8
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	601a      	str	r2, [r3, #0]
}
 8003aea:	bf00      	nop
 8003aec:	371c      	adds	r7, #28
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	3dff2000 	.word	0x3dff2000

08003afc <HRTIM_ChopperModeConfig>:
  * @retval None
  */
void HRTIM_ChopperModeConfig(HRTIM_TypeDef * HRTIMx,
                                              uint32_t TimerIdx,
                                              HRTIM_ChopperModeCfgTypeDef* pChopperModeCfg)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b087      	sub	sp, #28
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
  uint32_t HRTIM_chpr;
  
  /* Check parameters */
  assert_param(IS_HRTIM_TIMING_UNIT(TimerIdx));

  HRTIM_chpr = HRTIMx->HRTIM_TIMERx[TimerIdx].CHPxR;
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	01db      	lsls	r3, r3, #7
 8003b0e:	4413      	add	r3, r2
 8003b10:	33d8      	adds	r3, #216	; 0xd8
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	617b      	str	r3, [r7, #20]
     
  /* Clear timer chopper mode configuration */
  HRTIM_chpr &= ~(HRTIM_CHPR_CARFRQ | HRTIM_CHPR_CARDTY | HRTIM_CHPR_STRPW);
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003b1c:	f023 0307 	bic.w	r3, r3, #7
 8003b20:	617b      	str	r3, [r7, #20]
  
  /* Set timer chopper mode configuration */
  HRTIM_chpr |= pChopperModeCfg->CarrierFreq;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	617b      	str	r3, [r7, #20]
  HRTIM_chpr |= (pChopperModeCfg->DutyCycle << 4);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	011b      	lsls	r3, r3, #4
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	617b      	str	r3, [r7, #20]
  HRTIM_chpr |= (pChopperModeCfg->StartPulse << 7);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	01db      	lsls	r3, r3, #7
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	617b      	str	r3, [r7, #20]
    
  /* Update the HRTIMx registers */  
  HRTIMx->HRTIM_TIMERx[TimerIdx].CHPxR = HRTIM_chpr;
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	01db      	lsls	r3, r3, #7
 8003b4a:	4413      	add	r3, r2
 8003b4c:	33d8      	adds	r3, #216	; 0xd8
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	601a      	str	r2, [r3, #0]
}
 8003b52:	bf00      	nop
 8003b54:	371c      	adds	r7, #28
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <HRTIM_BurstDMAConfig>:
  * @retval None
  */
void HRTIM_BurstDMAConfig(HRTIM_TypeDef * HRTIMx,
                                           uint32_t TimerIdx,
                                           uint32_t RegistersToUpdate)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b085      	sub	sp, #20
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	60f8      	str	r0, [r7, #12]
 8003b66:	60b9      	str	r1, [r7, #8]
 8003b68:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMER_BURSTDMA(TimerIdx, RegistersToUpdate));
  
  /* Set the burst DMA timer update register */
  switch (TimerIdx) 
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	2b05      	cmp	r3, #5
 8003b6e:	d82d      	bhi.n	8003bcc <HRTIM_BurstDMAConfig+0x6e>
 8003b70:	a201      	add	r2, pc, #4	; (adr r2, 8003b78 <HRTIM_BurstDMAConfig+0x1a>)
 8003b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b76:	bf00      	nop
 8003b78:	08003b91 	.word	0x08003b91
 8003b7c:	08003b9b 	.word	0x08003b9b
 8003b80:	08003ba5 	.word	0x08003ba5
 8003b84:	08003baf 	.word	0x08003baf
 8003b88:	08003bb9 	.word	0x08003bb9
 8003b8c:	08003bc3 	.word	0x08003bc3
  {
    case HRTIM_TIMERINDEX_TIMER_A:
    {
      HRTIMx->HRTIM_COMMON.BDTAUPR = RegistersToUpdate;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
    }
    break;
 8003b98:	e019      	b.n	8003bce <HRTIM_BurstDMAConfig+0x70>
    case HRTIM_TIMERINDEX_TIMER_B:
    {
      HRTIMx->HRTIM_COMMON.BDTBUPR = RegistersToUpdate;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
    }
    break;
 8003ba2:	e014      	b.n	8003bce <HRTIM_BurstDMAConfig+0x70>
    case HRTIM_TIMERINDEX_TIMER_C:
    {
      HRTIMx->HRTIM_COMMON.BDTCUPR = RegistersToUpdate;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	f8c3 23e4 	str.w	r2, [r3, #996]	; 0x3e4
    }
    break;
 8003bac:	e00f      	b.n	8003bce <HRTIM_BurstDMAConfig+0x70>
    case HRTIM_TIMERINDEX_TIMER_D:
    {
      HRTIMx->HRTIM_COMMON.BDTDUPR = RegistersToUpdate;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	f8c3 23e8 	str.w	r2, [r3, #1000]	; 0x3e8
    }
    break;
 8003bb6:	e00a      	b.n	8003bce <HRTIM_BurstDMAConfig+0x70>
    case HRTIM_TIMERINDEX_TIMER_E:
    {
      HRTIMx->HRTIM_COMMON.BDTEUPR = RegistersToUpdate;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
    }
    break;
 8003bc0:	e005      	b.n	8003bce <HRTIM_BurstDMAConfig+0x70>
    case HRTIM_TIMERINDEX_MASTER:
    {
      HRTIMx->HRTIM_COMMON.BDMUPDR = RegistersToUpdate;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
    }
    break;
 8003bca:	e000      	b.n	8003bce <HRTIM_BurstDMAConfig+0x70>
    default:
    break;
 8003bcc:	bf00      	nop
  }
}
 8003bce:	bf00      	nop
 8003bd0:	3714      	adds	r7, #20
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <HRTIM_SynchronizationConfig>:
  * @param  HRTIMx: pointer to HRTIMx peripheral
  * @param  pSynchroCfg: pointer to the input/output synchronization configuration structure
  * @retval None
  */
void HRTIM_SynchronizationConfig(HRTIM_TypeDef *HRTIMx, HRTIM_SynchroCfgTypeDef * pSynchroCfg)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b085      	sub	sp, #20
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
 8003be2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_SYNCINPUTSOURCE(pSynchroCfg->SyncInputSource));
  assert_param(IS_HRTIM_SYNCOUTPUTSOURCE(pSynchroCfg->SyncOutputSource));
  assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(pSynchroCfg->SyncOutputPolarity));
    
  HRTIM_mcr = HRTIMx->HRTIM_MASTER.MCR;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	60fb      	str	r3, [r7, #12]

  /* Set the synchronization input source */
  HRTIM_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bf0:	60fb      	str	r3, [r7, #12]
  HRTIM_mcr |= pSynchroCfg->SyncInputSource;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	60fb      	str	r3, [r7, #12]
  
  /* Set the event to be sent on the synchronization output */
  HRTIM_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003c02:	60fb      	str	r3, [r7, #12]
  HRTIM_mcr |= pSynchroCfg->SyncOutputSource;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	60fb      	str	r3, [r7, #12]
  
  /* Set the polarity of the synchronization output */
  HRTIM_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c14:	60fb      	str	r3, [r7, #12]
  HRTIM_mcr |= pSynchroCfg->SyncOutputPolarity;
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	60fb      	str	r3, [r7, #12]
  
  /* Update the HRTIMx registers */  
  HRTIMx->HRTIM_MASTER.MCR = HRTIM_mcr;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	601a      	str	r2, [r3, #0]
}
 8003c26:	bf00      	nop
 8003c28:	3714      	adds	r7, #20
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <HRTIM_BurstModeConfig>:
  * @param  pBurstModeCfg: pointer to the burst mode configuration structure
  * @retval None
  */
void HRTIM_BurstModeConfig(HRTIM_TypeDef * HRTIMx,
                                            HRTIM_BurstModeCfgTypeDef* pBurstModeCfg)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b085      	sub	sp, #20
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
 8003c3a:	6039      	str	r1, [r7, #0]
  assert_param(IS_HRTIM_BURSTMODE(pBurstModeCfg->Mode));
  assert_param(IS_HRTIM_BURSTMODECLOCKSOURCE(pBurstModeCfg->ClockSource));
  assert_param(IS_HRTIM_HRTIM_BURSTMODEPRESCALER(pBurstModeCfg->Prescaler));
  assert_param(IS_HRTIM_BURSTMODEPRELOAD(pBurstModeCfg->PreloadEnable));
  
  HRTIM_bmcr = HRTIMx->HRTIM_COMMON.BMCR;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8003c42:	60fb      	str	r3, [r7, #12]

  /* Set the burst mode operating mode */
  HRTIM_bmcr &= ~(HRTIM_BMCR_BMOM);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f023 0302 	bic.w	r3, r3, #2
 8003c4a:	60fb      	str	r3, [r7, #12]
  HRTIM_bmcr |= pBurstModeCfg->Mode;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	60fb      	str	r3, [r7, #12]
  
  /* Set the burst mode clock source */
  HRTIM_bmcr &= ~(HRTIM_BMCR_BMCLK);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f023 033c 	bic.w	r3, r3, #60	; 0x3c
 8003c5c:	60fb      	str	r3, [r7, #12]
  HRTIM_bmcr |= pBurstModeCfg->ClockSource;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	60fb      	str	r3, [r7, #12]
  
  /* Set the burst mode prescaler */
  HRTIM_bmcr &= ~(HRTIM_BMCR_BMPSC);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f423 7370 	bic.w	r3, r3, #960	; 0x3c0
 8003c6e:	60fb      	str	r3, [r7, #12]
  HRTIM_bmcr |= pBurstModeCfg->Prescaler;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	60fb      	str	r3, [r7, #12]
 
  /* Enable/disable burst mode registers preload */
  HRTIM_bmcr &= ~(HRTIM_BMCR_BMPREN);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c80:	60fb      	str	r3, [r7, #12]
  HRTIM_bmcr |= pBurstModeCfg->PreloadEnable;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	60fb      	str	r3, [r7, #12]
 
  /* Set the burst mode trigger */
  HRTIMx->HRTIM_COMMON.BMTRGR = pBurstModeCfg->Trigger;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	691a      	ldr	r2, [r3, #16]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f8c3 23a4 	str.w	r2, [r3, #932]	; 0x3a4
  
  /* Set the burst mode compare value */
  HRTIMx->HRTIM_COMMON.BMCMPR = pBurstModeCfg->IdleDuration;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	695a      	ldr	r2, [r3, #20]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f8c3 23a8 	str.w	r2, [r3, #936]	; 0x3a8
  
  /* Set the burst mode period */
  HRTIMx->HRTIM_COMMON.BMPER = pBurstModeCfg->Period;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	699a      	ldr	r2, [r3, #24]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
  
  /* Update the HRTIMx registers */  
  HRTIMx->HRTIM_COMMON.BMCR = HRTIM_bmcr;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8003cb2:	bf00      	nop
 8003cb4:	3714      	adds	r7, #20
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <HRTIM_EventConfig>:
  * @retval None
  */
void HRTIM_EventConfig(HRTIM_TypeDef * HRTIMx,
                                        uint32_t Event,
                                        HRTIM_EventCfgTypeDef* pEventCfg)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b084      	sub	sp, #16
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	60f8      	str	r0, [r7, #12]
 8003cc6:	60b9      	str	r1, [r7, #8]
 8003cc8:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_EVENTSENSITIVITY(pEventCfg->Sensitivity)); 
  assert_param(IS_HRTIM_EVENTFASTMODE(pEventCfg->FastMode)); 
  assert_param(IS_HRTIM_EVENTFILTER(pEventCfg->Filter)); 

  /* Configure the event channel */
  HRTIM_ExternalEventConfig(HRTIMx, Event, pEventCfg);
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	68b9      	ldr	r1, [r7, #8]
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 ff47 	bl	8004b62 <HRTIM_ExternalEventConfig>
 
}
 8003cd4:	bf00      	nop
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <HRTIM_EventPrescalerConfig>:
  *                    @arg HRTIM_EVENTPRESCALER_DIV8: fEEVS=fHRTIMx / 8
  * @retval None
  */
void HRTIM_EventPrescalerConfig(HRTIM_TypeDef * HRTIMx,
                                                 uint32_t Prescaler)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_HRTIM_EVENTPRESCALER(Prescaler));

  /* Set the external event prescaler */
  HRTIM_eecr3 = HRTIMx->HRTIM_COMMON.EECR3;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 8003cec:	60fb      	str	r3, [r7, #12]
  HRTIM_eecr3 &= ~(HRTIM_EECR3_EEVSD);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003cf4:	60fb      	str	r3, [r7, #12]
  HRTIM_eecr3 |= Prescaler;
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	60fb      	str	r3, [r7, #12]
  
  /* Update the HRTIMx registers */
  HRTIMx->HRTIM_COMMON.EECR3 = HRTIM_eecr3;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
}
 8003d06:	bf00      	nop
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <HRTIM_FaultConfig>:
  * @retval None
  */
void HRTIM_FaultConfig(HRTIM_TypeDef * HRTIMx,
                                        HRTIM_FaultCfgTypeDef* pFaultCfg,
                                        uint32_t Fault)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b087      	sub	sp, #28
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	60f8      	str	r0, [r7, #12]
 8003d1a:	60b9      	str	r1, [r7, #8]
 8003d1c:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_FAULTPOLARITY(pFaultCfg->Polarity));
  assert_param(IS_HRTIM_FAULTFILTER(pFaultCfg->Filter));
  assert_param(IS_HRTIM_FAULTLOCK(pFaultCfg->Lock));

  /* Configure fault channel */
  HRTIM_fltinr1 = HRTIMx->HRTIM_COMMON.FLTINxR1;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8003d24:	617b      	str	r3, [r7, #20]
  HRTIM_fltinr2 = HRTIMx->HRTIM_COMMON.FLTINxR2;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8003d2c:	613b      	str	r3, [r7, #16]
  
  switch (Fault)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	3b01      	subs	r3, #1
 8003d32:	2b0f      	cmp	r3, #15
 8003d34:	f200 80ad 	bhi.w	8003e92 <HRTIM_FaultConfig+0x180>
 8003d38:	a201      	add	r2, pc, #4	; (adr r2, 8003d40 <HRTIM_FaultConfig+0x2e>)
 8003d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d3e:	bf00      	nop
 8003d40:	08003d81 	.word	0x08003d81
 8003d44:	08003db3 	.word	0x08003db3
 8003d48:	08003e93 	.word	0x08003e93
 8003d4c:	08003ded 	.word	0x08003ded
 8003d50:	08003e93 	.word	0x08003e93
 8003d54:	08003e93 	.word	0x08003e93
 8003d58:	08003e93 	.word	0x08003e93
 8003d5c:	08003e27 	.word	0x08003e27
 8003d60:	08003e93 	.word	0x08003e93
 8003d64:	08003e93 	.word	0x08003e93
 8003d68:	08003e93 	.word	0x08003e93
 8003d6c:	08003e93 	.word	0x08003e93
 8003d70:	08003e93 	.word	0x08003e93
 8003d74:	08003e93 	.word	0x08003e93
 8003d78:	08003e93 	.word	0x08003e93
 8003d7c:	08003e61 	.word	0x08003e61
  {
    case HRTIM_FAULT_1:
    {
      HRTIM_fltinr1 &= ~(HRTIM_FLTINR1_FLT1P | HRTIM_FLTINR1_FLT1SRC | HRTIM_FLTINR1_FLT1F | HRTIM_FLTINR1_FLT1LCK);
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8003d86:	617b      	str	r3, [r7, #20]
      HRTIM_fltinr1 |= pFaultCfg->Polarity;
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	617b      	str	r3, [r7, #20]
      HRTIM_fltinr1 |= pFaultCfg->Source;
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	617b      	str	r3, [r7, #20]
      HRTIM_fltinr1 |= pFaultCfg->Filter;
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	617b      	str	r3, [r7, #20]
      HRTIM_fltinr1 |= pFaultCfg->Lock;
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	617b      	str	r3, [r7, #20]
    }
    break;
 8003db0:	e070      	b.n	8003e94 <HRTIM_FaultConfig+0x182>
    case HRTIM_FAULT_2:
    {
      HRTIM_fltinr1 &= ~(HRTIM_FLTINR1_FLT2P | HRTIM_FLTINR1_FLT2SRC | HRTIM_FLTINR1_FLT2F | HRTIM_FLTINR1_FLT2LCK);
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f423 437e 	bic.w	r3, r3, #65024	; 0xfe00
 8003db8:	617b      	str	r3, [r7, #20]
      HRTIM_fltinr1 |= (pFaultCfg->Polarity << 8);
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	021b      	lsls	r3, r3, #8
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	617b      	str	r3, [r7, #20]
      HRTIM_fltinr1 |= (pFaultCfg->Source << 8);
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	021b      	lsls	r3, r3, #8
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	617b      	str	r3, [r7, #20]
      HRTIM_fltinr1 |= (pFaultCfg->Filter << 8);
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	021b      	lsls	r3, r3, #8
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	617b      	str	r3, [r7, #20]
      HRTIM_fltinr1 |= (pFaultCfg->Lock << 8);
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	021b      	lsls	r3, r3, #8
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	617b      	str	r3, [r7, #20]
    }
    break;
 8003dea:	e053      	b.n	8003e94 <HRTIM_FaultConfig+0x182>
    case HRTIM_FAULT_3:
    {
      HRTIM_fltinr1 &= ~(HRTIM_FLTINR1_FLT3P | HRTIM_FLTINR1_FLT3SRC | HRTIM_FLTINR1_FLT3F | HRTIM_FLTINR1_FLT3LCK);
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	f423 037e 	bic.w	r3, r3, #16646144	; 0xfe0000
 8003df2:	617b      	str	r3, [r7, #20]
      HRTIM_fltinr1 |= (pFaultCfg->Polarity << 16);
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	041b      	lsls	r3, r3, #16
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	617b      	str	r3, [r7, #20]
      HRTIM_fltinr1 |= (pFaultCfg->Source << 16);
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	041b      	lsls	r3, r3, #16
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	617b      	str	r3, [r7, #20]
      HRTIM_fltinr1 |= (pFaultCfg->Filter << 16);
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	041b      	lsls	r3, r3, #16
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	617b      	str	r3, [r7, #20]
      HRTIM_fltinr1 |= (pFaultCfg->Lock << 16);
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	041b      	lsls	r3, r3, #16
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	617b      	str	r3, [r7, #20]
    }
    break;
 8003e24:	e036      	b.n	8003e94 <HRTIM_FaultConfig+0x182>
    case HRTIM_FAULT_4:
    {
      HRTIM_fltinr1 &= ~(HRTIM_FLTINR1_FLT4P | HRTIM_FLTINR1_FLT4SRC | HRTIM_FLTINR1_FLT4F | HRTIM_FLTINR1_FLT4LCK);
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003e2c:	617b      	str	r3, [r7, #20]
      HRTIM_fltinr1 |= (pFaultCfg->Polarity << 24);
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	061b      	lsls	r3, r3, #24
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	617b      	str	r3, [r7, #20]
      HRTIM_fltinr1 |= (pFaultCfg->Source << 24);
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	061b      	lsls	r3, r3, #24
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	617b      	str	r3, [r7, #20]
      HRTIM_fltinr1 |= (pFaultCfg->Filter << 24);
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	061b      	lsls	r3, r3, #24
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	617b      	str	r3, [r7, #20]
      HRTIM_fltinr1 |= (pFaultCfg->Lock << 24);
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	061b      	lsls	r3, r3, #24
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	617b      	str	r3, [r7, #20]
    }
    break;
 8003e5e:	e019      	b.n	8003e94 <HRTIM_FaultConfig+0x182>
    case HRTIM_FAULT_5:
    {
      HRTIM_fltinr2 &= ~(HRTIM_FLTINR2_FLT5P | HRTIM_FLTINR2_FLT5SRC | HRTIM_FLTINR2_FLT5F | HRTIM_FLTINR2_FLT5LCK);
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8003e66:	613b      	str	r3, [r7, #16]
      HRTIM_fltinr2 |= pFaultCfg->Polarity;
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]
      HRTIM_fltinr2 |= pFaultCfg->Source;
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	613b      	str	r3, [r7, #16]
      HRTIM_fltinr2 |= pFaultCfg->Filter;
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	613b      	str	r3, [r7, #16]
      HRTIM_fltinr2 |= pFaultCfg->Lock;
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	613b      	str	r3, [r7, #16]
    }
    break;
 8003e90:	e000      	b.n	8003e94 <HRTIM_FaultConfig+0x182>
    default:
    break;
 8003e92:	bf00      	nop
  }

  /* Update the HRTIMx registers */
  HRTIMx->HRTIM_COMMON.FLTINxR1 = HRTIM_fltinr1;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  HRTIMx->HRTIM_COMMON.FLTINxR2 = HRTIM_fltinr2;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
}
 8003ea4:	bf00      	nop
 8003ea6:	371c      	adds	r7, #28
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <HRTIM_FaultPrescalerConfig>:
  *                    @arg HRTIM_FAULTPRESCALER_DIV8: fFLTS=fHRTIMx / 8
  * @retval None
  */
void HRTIM_FaultPrescalerConfig(HRTIM_TypeDef * HRTIMx,
                                                 uint32_t Prescaler)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_HRTIM_FAULTPRESCALER(Prescaler));
  
  /* Set the external event prescaler */
  HRTIM_fltinr2 = HRTIMx->HRTIM_COMMON.FLTINxR2;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8003ec0:	60fb      	str	r3, [r7, #12]
  HRTIM_fltinr2 &= ~(HRTIM_FLTINR2_FLTSD);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003ec8:	60fb      	str	r3, [r7, #12]
  HRTIM_fltinr2 |= Prescaler;
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	60fb      	str	r3, [r7, #12]
  
  /* Update the HRTIMx registers */
  HRTIMx->HRTIM_COMMON.FLTINxR2 = HRTIM_fltinr2;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
}
 8003eda:	bf00      	nop
 8003edc:	3714      	adds	r7, #20
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <HRTIM_FaultModeCtl>:
  *                    @arg HRTIM_FAULT_ENABLED: Fault mode enabled
  *                    @arg HRTIM_FAULT_DISABLED: Fault mode disabled
  * @retval None
  */
void HRTIM_FaultModeCtl(HRTIM_TypeDef * HRTIMx, uint32_t Fault, uint32_t Enable)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	b087      	sub	sp, #28
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	60f8      	str	r0, [r7, #12]
 8003eee:	60b9      	str	r1, [r7, #8]
 8003ef0:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_FAULT(Fault));
  assert_param(IS_HRTIM_FAULTCTL(Enable));

  /* Configure fault channel */
  HRTIM_fltinr1 = HRTIMx->HRTIM_COMMON.FLTINxR1;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8003ef8:	617b      	str	r3, [r7, #20]
  HRTIM_fltinr2 = HRTIMx->HRTIM_COMMON.FLTINxR2;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8003f00:	613b      	str	r3, [r7, #16]
  
  switch (Fault)
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	3b01      	subs	r3, #1
 8003f06:	2b0f      	cmp	r3, #15
 8003f08:	d852      	bhi.n	8003fb0 <HRTIM_FaultModeCtl+0xca>
 8003f0a:	a201      	add	r2, pc, #4	; (adr r2, 8003f10 <HRTIM_FaultModeCtl+0x2a>)
 8003f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f10:	08003f51 	.word	0x08003f51
 8003f14:	08003f63 	.word	0x08003f63
 8003f18:	08003fb1 	.word	0x08003fb1
 8003f1c:	08003f77 	.word	0x08003f77
 8003f20:	08003fb1 	.word	0x08003fb1
 8003f24:	08003fb1 	.word	0x08003fb1
 8003f28:	08003fb1 	.word	0x08003fb1
 8003f2c:	08003f8b 	.word	0x08003f8b
 8003f30:	08003fb1 	.word	0x08003fb1
 8003f34:	08003fb1 	.word	0x08003fb1
 8003f38:	08003fb1 	.word	0x08003fb1
 8003f3c:	08003fb1 	.word	0x08003fb1
 8003f40:	08003fb1 	.word	0x08003fb1
 8003f44:	08003fb1 	.word	0x08003fb1
 8003f48:	08003fb1 	.word	0x08003fb1
 8003f4c:	08003f9f 	.word	0x08003f9f
  {
    case HRTIM_FAULT_1:
    {
      HRTIM_fltinr1 &= ~HRTIM_FLTINR1_FLT1E;
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	f023 0301 	bic.w	r3, r3, #1
 8003f56:	617b      	str	r3, [r7, #20]
      HRTIM_fltinr1 |= Enable;
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	617b      	str	r3, [r7, #20]
    }
    break;
 8003f60:	e027      	b.n	8003fb2 <HRTIM_FaultModeCtl+0xcc>
    case HRTIM_FAULT_2:
    {
      HRTIM_fltinr1 &= ~HRTIM_FLTINR1_FLT2E;
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f68:	617b      	str	r3, [r7, #20]
      HRTIM_fltinr1 |= (Enable<< 8);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	021b      	lsls	r3, r3, #8
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	617b      	str	r3, [r7, #20]
    }
    break;
 8003f74:	e01d      	b.n	8003fb2 <HRTIM_FaultModeCtl+0xcc>
    case HRTIM_FAULT_3:
    {
      HRTIM_fltinr1 &= ~HRTIM_FLTINR1_FLT3E;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f7c:	617b      	str	r3, [r7, #20]
      HRTIM_fltinr1 |= (Enable << 16);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	041b      	lsls	r3, r3, #16
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	617b      	str	r3, [r7, #20]
    }
    break;
 8003f88:	e013      	b.n	8003fb2 <HRTIM_FaultModeCtl+0xcc>
    case HRTIM_FAULT_4:
    {
      HRTIM_fltinr1 &= ~HRTIM_FLTINR1_FLT4E; 
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f90:	617b      	str	r3, [r7, #20]
      HRTIM_fltinr1 |= (Enable << 24);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	061b      	lsls	r3, r3, #24
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	617b      	str	r3, [r7, #20]
    }
    break;
 8003f9c:	e009      	b.n	8003fb2 <HRTIM_FaultModeCtl+0xcc>
    case HRTIM_FAULT_5:
    {
      HRTIM_fltinr2 &= ~HRTIM_FLTINR2_FLT5E;
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	f023 0301 	bic.w	r3, r3, #1
 8003fa4:	613b      	str	r3, [r7, #16]
      HRTIM_fltinr2 |= Enable;
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	613b      	str	r3, [r7, #16]
    }
    break;
 8003fae:	e000      	b.n	8003fb2 <HRTIM_FaultModeCtl+0xcc>
    default:
    break;
 8003fb0:	bf00      	nop
  }

  /* Update the HRTIMx registers */
  HRTIMx->HRTIM_COMMON.FLTINxR1 = HRTIM_fltinr1;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  HRTIMx->HRTIM_COMMON.FLTINxR2 = HRTIM_fltinr2;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
}                              
 8003fc2:	bf00      	nop
 8003fc4:	371c      	adds	r7, #28
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <HRTIM_ADCTriggerConfig>:
  * @retval None
  */
void HRTIM_ADCTriggerConfig(HRTIM_TypeDef * HRTIMx,
                                             uint32_t ADCTrigger,
                                             HRTIM_ADCTriggerCfgTypeDef* pADCTriggerCfg)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b087      	sub	sp, #28
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	60f8      	str	r0, [r7, #12]
 8003fd6:	60b9      	str	r1, [r7, #8]
 8003fd8:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_ADCTRIGGER(ADCTrigger));
  assert_param(IS_HRTIM_ADCTRIGGERUPDATE(pADCTriggerCfg->UpdateSource));

  /* Set the ADC trigger update source */
  HRTIM_cr1 = HRTIMx->HRTIM_COMMON.CR1;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8003fe0:	617b      	str	r3, [r7, #20]
  
  switch (ADCTrigger)
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	2b07      	cmp	r3, #7
 8003fe8:	d850      	bhi.n	800408c <HRTIM_ADCTriggerConfig+0xbe>
 8003fea:	a201      	add	r2, pc, #4	; (adr r2, 8003ff0 <HRTIM_ADCTriggerConfig+0x22>)
 8003fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff0:	08004011 	.word	0x08004011
 8003ff4:	0800402f 	.word	0x0800402f
 8003ff8:	0800408d 	.word	0x0800408d
 8003ffc:	0800404f 	.word	0x0800404f
 8004000:	0800408d 	.word	0x0800408d
 8004004:	0800408d 	.word	0x0800408d
 8004008:	0800408d 	.word	0x0800408d
 800400c:	0800406d 	.word	0x0800406d
  {
    case HRTIM_ADCTRIGGER_1:
    {
      HRTIM_cr1 &= ~(HRTIM_CR1_ADC1USRC);
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8004016:	617b      	str	r3, [r7, #20]
      HRTIM_cr1 |= pADCTriggerCfg->UpdateSource;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	4313      	orrs	r3, r2
 8004020:	617b      	str	r3, [r7, #20]
      
      /* Set the ADC trigger 1 source */
      HRTIMx->HRTIM_COMMON.ADC1R = pADCTriggerCfg->Trigger;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
    }
    break;
 800402c:	e02f      	b.n	800408e <HRTIM_ADCTriggerConfig+0xc0>
    case HRTIM_ADCTRIGGER_2:
    {
      HRTIM_cr1 &= ~(HRTIM_CR1_ADC2USRC);
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 8004034:	617b      	str	r3, [r7, #20]
      HRTIM_cr1 |= (pADCTriggerCfg->UpdateSource << 3); 
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	4313      	orrs	r3, r2
 8004040:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 2 source */
      HRTIMx->HRTIM_COMMON.ADC2R = pADCTriggerCfg->Trigger;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
    }
    break;
 800404c:	e01f      	b.n	800408e <HRTIM_ADCTriggerConfig+0xc0>
    case HRTIM_ADCTRIGGER_3:
    {
      HRTIM_cr1 &= ~(HRTIM_CR1_ADC3USRC);
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8004054:	617b      	str	r3, [r7, #20]
      HRTIM_cr1 |= (pADCTriggerCfg->UpdateSource << 6); 
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	019b      	lsls	r3, r3, #6
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	4313      	orrs	r3, r2
 8004060:	617b      	str	r3, [r7, #20]
      
      /* Set the ADC trigger 3 source */
      HRTIMx->HRTIM_COMMON.ADC3R = pADCTriggerCfg->Trigger;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
    }
    case HRTIM_ADCTRIGGER_4:
    {
      HRTIM_cr1 &= ~(HRTIM_CR1_ADC4USRC);
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8004072:	617b      	str	r3, [r7, #20]
      HRTIM_cr1 |= (pADCTriggerCfg->UpdateSource << 9); 
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	025b      	lsls	r3, r3, #9
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	4313      	orrs	r3, r2
 800407e:	617b      	str	r3, [r7, #20]
      
      /* Set the ADC trigger 4 source */
      HRTIMx->HRTIM_COMMON.ADC4R = pADCTriggerCfg->Trigger;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
    }
    break;
 800408a:	e000      	b.n	800408e <HRTIM_ADCTriggerConfig+0xc0>
    default:
    break;
 800408c:	bf00      	nop
  }
  
  /* Update the HRTIMx registers */
  HRTIMx->HRTIM_COMMON.CR1 = HRTIM_cr1;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
}
 8004096:	bf00      	nop
 8004098:	371c      	adds	r7, #28
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <HRTIM_BurstModeCtl>:
  *                    @arg HRTIM_BURSTMODECTL_ENABLED: Burst mode enabled
  *                    @arg HRTIM_BURSTMODECTL_DISABLED: Burst mode disabled
  * @retval None
  */
void HRTIM_BurstModeCtl(HRTIM_TypeDef * HRTIMx, uint32_t Enable)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b085      	sub	sp, #20
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
 80040aa:	6039      	str	r1, [r7, #0]
  
  /* Check parameters */
  assert_param(IS_HRTIM_BURSTMODECTL(Enable));
  
  /* Enable/Disable the burst mode controller */
  HRTIM_bmcr = HRTIMx->HRTIM_COMMON.BMCR;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 80040b2:	60fb      	str	r3, [r7, #12]
  HRTIM_bmcr &= ~(HRTIM_BMCR_BME);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f023 0301 	bic.w	r3, r3, #1
 80040ba:	60fb      	str	r3, [r7, #12]
  HRTIM_bmcr |= Enable;
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	60fb      	str	r3, [r7, #12]
  
  /* Update the HRTIMx registers */
  HRTIMx->HRTIM_COMMON.BMCR = HRTIM_bmcr;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 80040cc:	bf00      	nop
 80040ce:	3714      	adds	r7, #20
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <HRTIM_SoftwareCapture>:
  *       automatically reset by hardware
  */
void HRTIM_SoftwareCapture(HRTIM_TypeDef * HRTIMx,
                                            uint32_t TimerIdx,
                                            uint32_t CaptureUnit)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMING_UNIT(TimerIdx));
  assert_param(IS_HRTIM_CAPTUREUNIT(CaptureUnit));
  
  /* Force a software capture on concerned capture unit */
  switch (CaptureUnit)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d002      	beq.n	80040f0 <HRTIM_SoftwareCapture+0x18>
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d00f      	beq.n	800410e <HRTIM_SoftwareCapture+0x36>
    {
      HRTIMx->HRTIM_TIMERx[TimerIdx].CPT2xCR |= HRTIM_CPT2CR_SWCPT;
    }
    break;
    default:
    break;
 80040ee:	e01d      	b.n	800412c <HRTIM_SoftwareCapture+0x54>
      HRTIMx->HRTIM_TIMERx[TimerIdx].CPT1xCR |= HRTIM_CPT1CR_SWCPT;
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	01db      	lsls	r3, r3, #7
 80040f6:	4413      	add	r3, r2
 80040f8:	33dc      	adds	r3, #220	; 0xdc
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f043 0201 	orr.w	r2, r3, #1
 8004100:	68f9      	ldr	r1, [r7, #12]
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	01db      	lsls	r3, r3, #7
 8004106:	440b      	add	r3, r1
 8004108:	33dc      	adds	r3, #220	; 0xdc
 800410a:	601a      	str	r2, [r3, #0]
    break;
 800410c:	e00e      	b.n	800412c <HRTIM_SoftwareCapture+0x54>
      HRTIMx->HRTIM_TIMERx[TimerIdx].CPT2xCR |= HRTIM_CPT2CR_SWCPT;
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	01db      	lsls	r3, r3, #7
 8004114:	4413      	add	r3, r2
 8004116:	33e0      	adds	r3, #224	; 0xe0
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f043 0201 	orr.w	r2, r3, #1
 800411e:	68f9      	ldr	r1, [r7, #12]
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	01db      	lsls	r3, r3, #7
 8004124:	440b      	add	r3, r1
 8004126:	33e0      	adds	r3, #224	; 0xe0
 8004128:	601a      	str	r2, [r3, #0]
    break;
 800412a:	bf00      	nop
  }
}
 800412c:	bf00      	nop
 800412e:	3714      	adds	r7, #20
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HRTIM_SoftwareUpdate>:
  * @note The 'software update' bits in the HRTIMx control register 2 register are
  *       automatically reset by hardware
  */
void HRTIM_SoftwareUpdate(HRTIM_TypeDef * HRTIMx,
                                           uint32_t TimersToUpdate)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERUPDATE(TimersToUpdate));
  
  /* Force timer(s) registers update */
  HRTIMx->HRTIM_COMMON.CR2 |= TimersToUpdate;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	431a      	orrs	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
  
}
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr

0800415e <HRTIM_SoftwareReset>:
  * @note The 'software reset' bits in the HRTIMx control register 2  are
  *       automatically reset by hardware
  */
void HRTIM_SoftwareReset(HRTIM_TypeDef * HRTIMx,
                                          uint32_t TimersToReset)
{
 800415e:	b480      	push	{r7}
 8004160:	b083      	sub	sp, #12
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
 8004166:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERRESET(TimersToReset));
  
  /* Force timer(s) registers update */
  HRTIMx->HRTIM_COMMON.CR2 |= TimersToReset;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	431a      	orrs	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
 
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <HRTIM_WaveformSetOutputLevel>:
  */
void HRTIM_WaveformSetOutputLevel(HRTIM_TypeDef * HRTIMx,
                                                   uint32_t TimerIdx,
                                                   uint32_t Output,
                                                   uint32_t OutputLevel)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
 8004190:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMER_OUTPUT(TimerIdx, Output));
  assert_param(IS_HRTIM_OUTPUTLEVEL(OutputLevel));

  /* Force timer output level */
  switch (Output)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b10      	cmp	r3, #16
 8004196:	d01d      	beq.n	80041d4 <HRTIM_WaveformSetOutputLevel+0x50>
 8004198:	2b10      	cmp	r3, #16
 800419a:	d80b      	bhi.n	80041b4 <HRTIM_WaveformSetOutputLevel+0x30>
 800419c:	2b02      	cmp	r3, #2
 800419e:	d03a      	beq.n	8004216 <HRTIM_WaveformSetOutputLevel+0x92>
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d802      	bhi.n	80041aa <HRTIM_WaveformSetOutputLevel+0x26>
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d015      	beq.n	80041d4 <HRTIM_WaveformSetOutputLevel+0x50>
        HRTIMx->HRTIM_TIMERx[TimerIdx].RSTx2R |= HRTIM_RST2R_SRT;
      }
    }
    break;
    default:
    break;
 80041a8:	e056      	b.n	8004258 <HRTIM_WaveformSetOutputLevel+0xd4>
  switch (Output)
 80041aa:	2b04      	cmp	r3, #4
 80041ac:	d012      	beq.n	80041d4 <HRTIM_WaveformSetOutputLevel+0x50>
 80041ae:	2b08      	cmp	r3, #8
 80041b0:	d031      	beq.n	8004216 <HRTIM_WaveformSetOutputLevel+0x92>
    break;
 80041b2:	e051      	b.n	8004258 <HRTIM_WaveformSetOutputLevel+0xd4>
  switch (Output)
 80041b4:	2b80      	cmp	r3, #128	; 0x80
 80041b6:	d02e      	beq.n	8004216 <HRTIM_WaveformSetOutputLevel+0x92>
 80041b8:	2b80      	cmp	r3, #128	; 0x80
 80041ba:	d804      	bhi.n	80041c6 <HRTIM_WaveformSetOutputLevel+0x42>
 80041bc:	2b20      	cmp	r3, #32
 80041be:	d02a      	beq.n	8004216 <HRTIM_WaveformSetOutputLevel+0x92>
 80041c0:	2b40      	cmp	r3, #64	; 0x40
 80041c2:	d007      	beq.n	80041d4 <HRTIM_WaveformSetOutputLevel+0x50>
    break;
 80041c4:	e048      	b.n	8004258 <HRTIM_WaveformSetOutputLevel+0xd4>
  switch (Output)
 80041c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ca:	d003      	beq.n	80041d4 <HRTIM_WaveformSetOutputLevel+0x50>
 80041cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041d0:	d021      	beq.n	8004216 <HRTIM_WaveformSetOutputLevel+0x92>
    break;
 80041d2:	e041      	b.n	8004258 <HRTIM_WaveformSetOutputLevel+0xd4>
      if (OutputLevel == HRTIM_OUTPUTLEVEL_ACTIVE)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d10e      	bne.n	80041f8 <HRTIM_WaveformSetOutputLevel+0x74>
        HRTIMx->HRTIM_TIMERx[TimerIdx].SETx1R |= HRTIM_SET1R_SST;
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	01db      	lsls	r3, r3, #7
 80041e0:	4413      	add	r3, r2
 80041e2:	33bc      	adds	r3, #188	; 0xbc
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f043 0201 	orr.w	r2, r3, #1
 80041ea:	68f9      	ldr	r1, [r7, #12]
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	01db      	lsls	r3, r3, #7
 80041f0:	440b      	add	r3, r1
 80041f2:	33bc      	adds	r3, #188	; 0xbc
 80041f4:	601a      	str	r2, [r3, #0]
    break;
 80041f6:	e02f      	b.n	8004258 <HRTIM_WaveformSetOutputLevel+0xd4>
        HRTIMx->HRTIM_TIMERx[TimerIdx].RSTx1R |= HRTIM_RST1R_SRT;
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	01db      	lsls	r3, r3, #7
 80041fe:	4413      	add	r3, r2
 8004200:	33c0      	adds	r3, #192	; 0xc0
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f043 0201 	orr.w	r2, r3, #1
 8004208:	68f9      	ldr	r1, [r7, #12]
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	01db      	lsls	r3, r3, #7
 800420e:	440b      	add	r3, r1
 8004210:	33c0      	adds	r3, #192	; 0xc0
 8004212:	601a      	str	r2, [r3, #0]
    break;
 8004214:	e020      	b.n	8004258 <HRTIM_WaveformSetOutputLevel+0xd4>
      if (OutputLevel == HRTIM_OUTPUTLEVEL_ACTIVE)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d10e      	bne.n	800423a <HRTIM_WaveformSetOutputLevel+0xb6>
        HRTIMx->HRTIM_TIMERx[TimerIdx].SETx2R |= HRTIM_SET2R_SST;
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	01db      	lsls	r3, r3, #7
 8004222:	4413      	add	r3, r2
 8004224:	33c4      	adds	r3, #196	; 0xc4
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f043 0201 	orr.w	r2, r3, #1
 800422c:	68f9      	ldr	r1, [r7, #12]
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	01db      	lsls	r3, r3, #7
 8004232:	440b      	add	r3, r1
 8004234:	33c4      	adds	r3, #196	; 0xc4
 8004236:	601a      	str	r2, [r3, #0]
    break;
 8004238:	e00d      	b.n	8004256 <HRTIM_WaveformSetOutputLevel+0xd2>
        HRTIMx->HRTIM_TIMERx[TimerIdx].RSTx2R |= HRTIM_RST2R_SRT;
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	01db      	lsls	r3, r3, #7
 8004240:	4413      	add	r3, r2
 8004242:	33c8      	adds	r3, #200	; 0xc8
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f043 0201 	orr.w	r2, r3, #1
 800424a:	68f9      	ldr	r1, [r7, #12]
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	01db      	lsls	r3, r3, #7
 8004250:	440b      	add	r3, r1
 8004252:	33c8      	adds	r3, #200	; 0xc8
 8004254:	601a      	str	r2, [r3, #0]
    break;
 8004256:	bf00      	nop
  } 
}
 8004258:	bf00      	nop
 800425a:	3714      	adds	r7, #20
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <HRTIM_GetCapturedValue>:
  * @retval Captured value
  */
uint32_t HRTIM_GetCapturedValue(HRTIM_TypeDef * HRTIMx,
                                    uint32_t TimerIdx,
                                    uint32_t CaptureUnit)
{
 8004264:	b480      	push	{r7}
 8004266:	b087      	sub	sp, #28
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
  uint32_t captured_value = 0;
 8004270:	2300      	movs	r3, #0
 8004272:	617b      	str	r3, [r7, #20]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMING_UNIT(TimerIdx));
  assert_param(IS_HRTIM_CAPTUREUNIT(CaptureUnit));

  /* Read captured value */
  switch (CaptureUnit)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d002      	beq.n	8004280 <HRTIM_GetCapturedValue+0x1c>
 800427a:	2b02      	cmp	r3, #2
 800427c:	d008      	beq.n	8004290 <HRTIM_GetCapturedValue+0x2c>
    {
      captured_value = HRTIMx->HRTIM_TIMERx[TimerIdx].CPT2xR;
    }
    break;
    default:
    break;
 800427e:	e00f      	b.n	80042a0 <HRTIM_GetCapturedValue+0x3c>
      captured_value = HRTIMx->HRTIM_TIMERx[TimerIdx].CPT1xR;
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	01db      	lsls	r3, r3, #7
 8004286:	4413      	add	r3, r2
 8004288:	33b0      	adds	r3, #176	; 0xb0
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	617b      	str	r3, [r7, #20]
    break;
 800428e:	e007      	b.n	80042a0 <HRTIM_GetCapturedValue+0x3c>
      captured_value = HRTIMx->HRTIM_TIMERx[TimerIdx].CPT2xR;
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	01db      	lsls	r3, r3, #7
 8004296:	4413      	add	r3, r2
 8004298:	33b4      	adds	r3, #180	; 0xb4
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	617b      	str	r3, [r7, #20]
    break;
 800429e:	bf00      	nop
  }
  
  return captured_value; 
 80042a0:	697b      	ldr	r3, [r7, #20]
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	371c      	adds	r7, #28
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <HRTIM_WaveformGetOutputLevel>:
  *        polarity).
  */
uint32_t HRTIM_WaveformGetOutputLevel(HRTIM_TypeDef * HRTIMx,
                                          uint32_t TimerIdx,
                                          uint32_t Output)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b087      	sub	sp, #28
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	60f8      	str	r0, [r7, #12]
 80042b6:	60b9      	str	r1, [r7, #8]
 80042b8:	607a      	str	r2, [r7, #4]
  uint32_t output_level = HRTIM_OUTPUTLEVEL_INACTIVE;
 80042ba:	2302      	movs	r3, #2
 80042bc:	617b      	str	r3, [r7, #20]
  
  /* Check parameters */
  assert_param(IS_HRTIM_TIMER_OUTPUT(TimerIdx, Output));
  
  /* Read the output level */
  switch (Output)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2b10      	cmp	r3, #16
 80042c2:	d01d      	beq.n	8004300 <HRTIM_WaveformGetOutputLevel+0x52>
 80042c4:	2b10      	cmp	r3, #16
 80042c6:	d80b      	bhi.n	80042e0 <HRTIM_WaveformGetOutputLevel+0x32>
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d02a      	beq.n	8004322 <HRTIM_WaveformGetOutputLevel+0x74>
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d802      	bhi.n	80042d6 <HRTIM_WaveformGetOutputLevel+0x28>
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d015      	beq.n	8004300 <HRTIM_WaveformGetOutputLevel+0x52>
        output_level = HRTIM_OUTPUTLEVEL_INACTIVE;
      }
    }
    break;
    default:
    break;
 80042d4:	e036      	b.n	8004344 <HRTIM_WaveformGetOutputLevel+0x96>
  switch (Output)
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d012      	beq.n	8004300 <HRTIM_WaveformGetOutputLevel+0x52>
 80042da:	2b08      	cmp	r3, #8
 80042dc:	d021      	beq.n	8004322 <HRTIM_WaveformGetOutputLevel+0x74>
    break;
 80042de:	e031      	b.n	8004344 <HRTIM_WaveformGetOutputLevel+0x96>
  switch (Output)
 80042e0:	2b80      	cmp	r3, #128	; 0x80
 80042e2:	d01e      	beq.n	8004322 <HRTIM_WaveformGetOutputLevel+0x74>
 80042e4:	2b80      	cmp	r3, #128	; 0x80
 80042e6:	d804      	bhi.n	80042f2 <HRTIM_WaveformGetOutputLevel+0x44>
 80042e8:	2b20      	cmp	r3, #32
 80042ea:	d01a      	beq.n	8004322 <HRTIM_WaveformGetOutputLevel+0x74>
 80042ec:	2b40      	cmp	r3, #64	; 0x40
 80042ee:	d007      	beq.n	8004300 <HRTIM_WaveformGetOutputLevel+0x52>
    break;
 80042f0:	e028      	b.n	8004344 <HRTIM_WaveformGetOutputLevel+0x96>
  switch (Output)
 80042f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042f6:	d003      	beq.n	8004300 <HRTIM_WaveformGetOutputLevel+0x52>
 80042f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042fc:	d011      	beq.n	8004322 <HRTIM_WaveformGetOutputLevel+0x74>
    break;
 80042fe:	e021      	b.n	8004344 <HRTIM_WaveformGetOutputLevel+0x96>
      if ((HRTIMx->HRTIM_TIMERx[TimerIdx].TIMxISR & HRTIM_TIMISR_O1CPY) != RESET)
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	3301      	adds	r3, #1
 8004306:	01db      	lsls	r3, r3, #7
 8004308:	4413      	add	r3, r2
 800430a:	3304      	adds	r3, #4
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <HRTIM_WaveformGetOutputLevel+0x6e>
        output_level = HRTIM_OUTPUTLEVEL_ACTIVE;
 8004316:	2301      	movs	r3, #1
 8004318:	617b      	str	r3, [r7, #20]
    break;
 800431a:	e013      	b.n	8004344 <HRTIM_WaveformGetOutputLevel+0x96>
        output_level = HRTIM_OUTPUTLEVEL_INACTIVE;
 800431c:	2302      	movs	r3, #2
 800431e:	617b      	str	r3, [r7, #20]
    break;
 8004320:	e010      	b.n	8004344 <HRTIM_WaveformGetOutputLevel+0x96>
      if ((HRTIMx->HRTIM_TIMERx[TimerIdx].TIMxISR & HRTIM_TIMISR_O2CPY) != RESET)
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	3301      	adds	r3, #1
 8004328:	01db      	lsls	r3, r3, #7
 800432a:	4413      	add	r3, r2
 800432c:	3304      	adds	r3, #4
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d002      	beq.n	800433e <HRTIM_WaveformGetOutputLevel+0x90>
        output_level = HRTIM_OUTPUTLEVEL_ACTIVE;
 8004338:	2301      	movs	r3, #1
 800433a:	617b      	str	r3, [r7, #20]
    break;
 800433c:	e001      	b.n	8004342 <HRTIM_WaveformGetOutputLevel+0x94>
        output_level = HRTIM_OUTPUTLEVEL_INACTIVE;
 800433e:	2302      	movs	r3, #2
 8004340:	617b      	str	r3, [r7, #20]
    break;
 8004342:	bf00      	nop
  }
  
  return output_level; 
 8004344:	697b      	ldr	r3, [r7, #20]
}
 8004346:	4618      	mov	r0, r3
 8004348:	371c      	adds	r7, #28
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <HRTIM_WaveformGetOutputState>:
  * @retval Output state
  */
uint32_t HRTIM_WaveformGetOutputState(HRTIM_TypeDef * HRTIMx,
                                          uint32_t TimerIdx,
                                          uint32_t Output)
{
 8004352:	b480      	push	{r7}
 8004354:	b087      	sub	sp, #28
 8004356:	af00      	add	r7, sp, #0
 8004358:	60f8      	str	r0, [r7, #12]
 800435a:	60b9      	str	r1, [r7, #8]
 800435c:	607a      	str	r2, [r7, #4]
  uint32_t output_bit = 0;
 800435e:	2300      	movs	r3, #0
 8004360:	617b      	str	r3, [r7, #20]
  uint32_t output_state = HRTIM_OUTPUTSTATE_IDLE;
 8004362:	2301      	movs	r3, #1
 8004364:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_HRTIM_TIMER_OUTPUT(TimerIdx, Output));
  
  /* Set output state according to output control status and output disable status */
  switch (Output)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b10      	cmp	r3, #16
 800436a:	d029      	beq.n	80043c0 <HRTIM_WaveformGetOutputState+0x6e>
 800436c:	2b10      	cmp	r3, #16
 800436e:	d80b      	bhi.n	8004388 <HRTIM_WaveformGetOutputState+0x36>
 8004370:	2b02      	cmp	r3, #2
 8004372:	d01c      	beq.n	80043ae <HRTIM_WaveformGetOutputState+0x5c>
 8004374:	2b02      	cmp	r3, #2
 8004376:	d802      	bhi.n	800437e <HRTIM_WaveformGetOutputState+0x2c>
 8004378:	2b01      	cmp	r3, #1
 800437a:	d015      	beq.n	80043a8 <HRTIM_WaveformGetOutputState+0x56>
    {
      output_bit = HRTIM_OENR_TE2OEN;
    }
    break;
    default:
    break;
 800437c:	e034      	b.n	80043e8 <HRTIM_WaveformGetOutputState+0x96>
  switch (Output)
 800437e:	2b04      	cmp	r3, #4
 8004380:	d018      	beq.n	80043b4 <HRTIM_WaveformGetOutputState+0x62>
 8004382:	2b08      	cmp	r3, #8
 8004384:	d019      	beq.n	80043ba <HRTIM_WaveformGetOutputState+0x68>
    break;
 8004386:	e02f      	b.n	80043e8 <HRTIM_WaveformGetOutputState+0x96>
  switch (Output)
 8004388:	2b80      	cmp	r3, #128	; 0x80
 800438a:	d022      	beq.n	80043d2 <HRTIM_WaveformGetOutputState+0x80>
 800438c:	2b80      	cmp	r3, #128	; 0x80
 800438e:	d804      	bhi.n	800439a <HRTIM_WaveformGetOutputState+0x48>
 8004390:	2b20      	cmp	r3, #32
 8004392:	d018      	beq.n	80043c6 <HRTIM_WaveformGetOutputState+0x74>
 8004394:	2b40      	cmp	r3, #64	; 0x40
 8004396:	d019      	beq.n	80043cc <HRTIM_WaveformGetOutputState+0x7a>
    break;
 8004398:	e026      	b.n	80043e8 <HRTIM_WaveformGetOutputState+0x96>
  switch (Output)
 800439a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800439e:	d01b      	beq.n	80043d8 <HRTIM_WaveformGetOutputState+0x86>
 80043a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043a4:	d01c      	beq.n	80043e0 <HRTIM_WaveformGetOutputState+0x8e>
    break;
 80043a6:	e01f      	b.n	80043e8 <HRTIM_WaveformGetOutputState+0x96>
      output_bit = HRTIM_OENR_TA1OEN;
 80043a8:	2301      	movs	r3, #1
 80043aa:	617b      	str	r3, [r7, #20]
    break;
 80043ac:	e01c      	b.n	80043e8 <HRTIM_WaveformGetOutputState+0x96>
      output_bit = HRTIM_OENR_TA2OEN;
 80043ae:	2302      	movs	r3, #2
 80043b0:	617b      	str	r3, [r7, #20]
    break;
 80043b2:	e019      	b.n	80043e8 <HRTIM_WaveformGetOutputState+0x96>
      output_bit = HRTIM_OENR_TB1OEN;
 80043b4:	2304      	movs	r3, #4
 80043b6:	617b      	str	r3, [r7, #20]
    break;
 80043b8:	e016      	b.n	80043e8 <HRTIM_WaveformGetOutputState+0x96>
      output_bit = HRTIM_OENR_TB2OEN;
 80043ba:	2308      	movs	r3, #8
 80043bc:	617b      	str	r3, [r7, #20]
    break;
 80043be:	e013      	b.n	80043e8 <HRTIM_WaveformGetOutputState+0x96>
      output_bit = HRTIM_OENR_TC1OEN;
 80043c0:	2310      	movs	r3, #16
 80043c2:	617b      	str	r3, [r7, #20]
    break;
 80043c4:	e010      	b.n	80043e8 <HRTIM_WaveformGetOutputState+0x96>
      output_bit = HRTIM_OENR_TC2OEN;
 80043c6:	2320      	movs	r3, #32
 80043c8:	617b      	str	r3, [r7, #20]
    break;
 80043ca:	e00d      	b.n	80043e8 <HRTIM_WaveformGetOutputState+0x96>
      output_bit = HRTIM_OENR_TD1OEN;
 80043cc:	2340      	movs	r3, #64	; 0x40
 80043ce:	617b      	str	r3, [r7, #20]
    break;
 80043d0:	e00a      	b.n	80043e8 <HRTIM_WaveformGetOutputState+0x96>
      output_bit = HRTIM_OENR_TD2OEN;
 80043d2:	2380      	movs	r3, #128	; 0x80
 80043d4:	617b      	str	r3, [r7, #20]
    break;
 80043d6:	e007      	b.n	80043e8 <HRTIM_WaveformGetOutputState+0x96>
      output_bit = HRTIM_OENR_TE1OEN;
 80043d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043dc:	617b      	str	r3, [r7, #20]
    break;
 80043de:	e003      	b.n	80043e8 <HRTIM_WaveformGetOutputState+0x96>
      output_bit = HRTIM_OENR_TE2OEN;
 80043e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043e4:	617b      	str	r3, [r7, #20]
    break;
 80043e6:	bf00      	nop
  }
  
  if ((HRTIMx->HRTIM_COMMON.OENR & output_bit) != RESET)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f8d3 2394 	ldr.w	r2, [r3, #916]	; 0x394
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	4013      	ands	r3, r2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d002      	beq.n	80043fc <HRTIM_WaveformGetOutputState+0xaa>
  {
    /* Output is enabled: output in RUN state (whatever output disable status is)*/
    output_state = HRTIM_OUTPUTSTATE_RUN;
 80043f6:	2302      	movs	r3, #2
 80043f8:	613b      	str	r3, [r7, #16]
 80043fa:	e00b      	b.n	8004414 <HRTIM_WaveformGetOutputState+0xc2>
  }
  else
  {
    if ((HRTIMx->HRTIM_COMMON.ODSR & output_bit) != RESET)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f8d3 239c 	ldr.w	r2, [r3, #924]	; 0x39c
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	4013      	ands	r3, r2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d002      	beq.n	8004410 <HRTIM_WaveformGetOutputState+0xbe>
    {
    /* Output is disabled: output in FAULT state */
      output_state = HRTIM_OUTPUTSTATE_FAULT;
 800440a:	2303      	movs	r3, #3
 800440c:	613b      	str	r3, [r7, #16]
 800440e:	e001      	b.n	8004414 <HRTIM_WaveformGetOutputState+0xc2>
    }
    else
    {
      /* Output is disabled: output in IDLE state */
      output_state = HRTIM_OUTPUTSTATE_IDLE;
 8004410:	2301      	movs	r3, #1
 8004412:	613b      	str	r3, [r7, #16]
    }
  }
  
  return(output_state);  
 8004414:	693b      	ldr	r3, [r7, #16]
}
 8004416:	4618      	mov	r0, r3
 8004418:	371c      	adds	r7, #28
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr

08004422 <HRTIM_GetDelayedProtectionStatus>:
  * @retval Delayed protection status 
  */
uint32_t HRTIM_GetDelayedProtectionStatus(HRTIM_TypeDef * HRTIMx,
                                              uint32_t TimerIdx,
                                              uint32_t Output)
{
 8004422:	b480      	push	{r7}
 8004424:	b087      	sub	sp, #28
 8004426:	af00      	add	r7, sp, #0
 8004428:	60f8      	str	r0, [r7, #12]
 800442a:	60b9      	str	r1, [r7, #8]
 800442c:	607a      	str	r2, [r7, #4]
  uint32_t delayed_protection_status = HRTIM_OUTPUTLEVEL_INACTIVE;
 800442e:	2302      	movs	r3, #2
 8004430:	617b      	str	r3, [r7, #20]
  
  /* Check parameters */
  assert_param(IS_HRTIM_TIMER_OUTPUT(TimerIdx, Output));

  /* Read the delayed protection status */
  switch (Output)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b10      	cmp	r3, #16
 8004436:	d01d      	beq.n	8004474 <HRTIM_GetDelayedProtectionStatus+0x52>
 8004438:	2b10      	cmp	r3, #16
 800443a:	d80b      	bhi.n	8004454 <HRTIM_GetDelayedProtectionStatus+0x32>
 800443c:	2b02      	cmp	r3, #2
 800443e:	d02a      	beq.n	8004496 <HRTIM_GetDelayedProtectionStatus+0x74>
 8004440:	2b02      	cmp	r3, #2
 8004442:	d802      	bhi.n	800444a <HRTIM_GetDelayedProtectionStatus+0x28>
 8004444:	2b01      	cmp	r3, #1
 8004446:	d015      	beq.n	8004474 <HRTIM_GetDelayedProtectionStatus+0x52>
        delayed_protection_status = HRTIM_OUTPUTLEVEL_INACTIVE;
      }
    }
    break;
    default:
    break;
 8004448:	e036      	b.n	80044b8 <HRTIM_GetDelayedProtectionStatus+0x96>
  switch (Output)
 800444a:	2b04      	cmp	r3, #4
 800444c:	d012      	beq.n	8004474 <HRTIM_GetDelayedProtectionStatus+0x52>
 800444e:	2b08      	cmp	r3, #8
 8004450:	d021      	beq.n	8004496 <HRTIM_GetDelayedProtectionStatus+0x74>
    break;
 8004452:	e031      	b.n	80044b8 <HRTIM_GetDelayedProtectionStatus+0x96>
  switch (Output)
 8004454:	2b80      	cmp	r3, #128	; 0x80
 8004456:	d01e      	beq.n	8004496 <HRTIM_GetDelayedProtectionStatus+0x74>
 8004458:	2b80      	cmp	r3, #128	; 0x80
 800445a:	d804      	bhi.n	8004466 <HRTIM_GetDelayedProtectionStatus+0x44>
 800445c:	2b20      	cmp	r3, #32
 800445e:	d01a      	beq.n	8004496 <HRTIM_GetDelayedProtectionStatus+0x74>
 8004460:	2b40      	cmp	r3, #64	; 0x40
 8004462:	d007      	beq.n	8004474 <HRTIM_GetDelayedProtectionStatus+0x52>
    break;
 8004464:	e028      	b.n	80044b8 <HRTIM_GetDelayedProtectionStatus+0x96>
  switch (Output)
 8004466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800446a:	d003      	beq.n	8004474 <HRTIM_GetDelayedProtectionStatus+0x52>
 800446c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004470:	d011      	beq.n	8004496 <HRTIM_GetDelayedProtectionStatus+0x74>
    break;
 8004472:	e021      	b.n	80044b8 <HRTIM_GetDelayedProtectionStatus+0x96>
      if ((HRTIMx->HRTIM_TIMERx[TimerIdx].TIMxISR & HRTIM_TIMISR_O1STAT) != RESET)
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	3301      	adds	r3, #1
 800447a:	01db      	lsls	r3, r3, #7
 800447c:	4413      	add	r3, r2
 800447e:	3304      	adds	r3, #4
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d002      	beq.n	8004490 <HRTIM_GetDelayedProtectionStatus+0x6e>
        delayed_protection_status = HRTIM_OUTPUTLEVEL_ACTIVE;
 800448a:	2301      	movs	r3, #1
 800448c:	617b      	str	r3, [r7, #20]
    break;
 800448e:	e013      	b.n	80044b8 <HRTIM_GetDelayedProtectionStatus+0x96>
        delayed_protection_status = HRTIM_OUTPUTLEVEL_INACTIVE;
 8004490:	2302      	movs	r3, #2
 8004492:	617b      	str	r3, [r7, #20]
    break;
 8004494:	e010      	b.n	80044b8 <HRTIM_GetDelayedProtectionStatus+0x96>
      if ((HRTIMx->HRTIM_TIMERx[TimerIdx].TIMxISR & HRTIM_TIMISR_O2STAT) != RESET)
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	3301      	adds	r3, #1
 800449c:	01db      	lsls	r3, r3, #7
 800449e:	4413      	add	r3, r2
 80044a0:	3304      	adds	r3, #4
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d002      	beq.n	80044b2 <HRTIM_GetDelayedProtectionStatus+0x90>
        delayed_protection_status = HRTIM_OUTPUTLEVEL_ACTIVE;
 80044ac:	2301      	movs	r3, #1
 80044ae:	617b      	str	r3, [r7, #20]
    break;
 80044b0:	e001      	b.n	80044b6 <HRTIM_GetDelayedProtectionStatus+0x94>
        delayed_protection_status = HRTIM_OUTPUTLEVEL_INACTIVE;
 80044b2:	2302      	movs	r3, #2
 80044b4:	617b      	str	r3, [r7, #20]
    break;
 80044b6:	bf00      	nop
  }
  
  return delayed_protection_status;
 80044b8:	697b      	ldr	r3, [r7, #20]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	371c      	adds	r7, #28
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <HRTIM_GetBurstStatus>:
  * @brief  Returns the actual status (active or inactive) of the burst mode controller 
  * @param  HRTIMx: pointer to HRTIMx peripheral
  * @retval Burst mode controller status 
  */
uint32_t HRTIM_GetBurstStatus(HRTIM_TypeDef * HRTIMx)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b085      	sub	sp, #20
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  uint32_t burst_mode_status;

  /* Read burst mode status */
  burst_mode_status = (HRTIMx->HRTIM_COMMON.BMCR & HRTIM_BMCR_BMSTAT);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 80044d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044d8:	60fb      	str	r3, [r7, #12]
  
  return burst_mode_status; 
 80044da:	68fb      	ldr	r3, [r7, #12]
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3714      	adds	r7, #20
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <HRTIM_GetCurrentPushPullStatus>:
  *                   @arg 0x0 to 0x4 for timers A to E 
  * @retval Burst mode controller status 
  */
uint32_t HRTIM_GetCurrentPushPullStatus(HRTIM_TypeDef * HRTIMx,
                                            uint32_t TimerIdx)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]

   /* Check the parameters */
  assert_param(IS_HRTIM_TIMING_UNIT(TimerIdx));

  /* Read current push pull status */
  current_pushpull_status = (HRTIMx->HRTIM_TIMERx[TimerIdx].TIMxISR & HRTIM_TIMISR_CPPSTAT);
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	3301      	adds	r3, #1
 80044f8:	01db      	lsls	r3, r3, #7
 80044fa:	4413      	add	r3, r2
 80044fc:	3304      	adds	r3, #4
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004504:	60fb      	str	r3, [r7, #12]
  
  return current_pushpull_status; 
 8004506:	68fb      	ldr	r3, [r7, #12]
}
 8004508:	4618      	mov	r0, r3
 800450a:	3714      	adds	r7, #20
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HRTIM_GetIdlePushPullStatus>:
  *                   @arg 0x0 to 0x4 for timers A to E 
  * @retval Idle Push Pull Status 
  */
uint32_t HRTIM_GetIdlePushPullStatus(HRTIM_TypeDef * HRTIMx,
                                         uint32_t TimerIdx)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]

   /* Check the parameters */
  assert_param(IS_HRTIM_TIMING_UNIT(TimerIdx));

  /* Read current push pull status */
  idle_pushpull_status = (HRTIMx->HRTIM_TIMERx[TimerIdx].TIMxISR & HRTIM_TIMISR_IPPSTAT);
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	3301      	adds	r3, #1
 8004524:	01db      	lsls	r3, r3, #7
 8004526:	4413      	add	r3, r2
 8004528:	3304      	adds	r3, #4
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004530:	60fb      	str	r3, [r7, #12]
  
  return idle_pushpull_status; 
 8004532:	68fb      	ldr	r3, [r7, #12]
}
 8004534:	4618      	mov	r0, r3
 8004536:	3714      	adds	r7, #20
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <HRTIM_MasterBase_Config>:
  * @brief  Configures the master timer time base
  * @param  HRTIMx: pointer to HRTIMx peripheral
  * @retval None
  */
void  HRTIM_MasterBase_Config(HRTIM_TypeDef * HRTIMx, HRTIM_BaseInitTypeDef* HRTIM_BaseInitStruct)
{  
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  /* Set the prescaler ratio */
  HRTIMx->HRTIM_MASTER.MCR &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f023 0207 	bic.w	r2, r3, #7
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	601a      	str	r2, [r3, #0]
  HRTIMx->HRTIM_MASTER.MCR  |= (uint32_t)HRTIM_BaseInitStruct->PrescalerRatio;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	431a      	orrs	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	601a      	str	r2, [r3, #0]
  
  /* Set the operating mode */
  HRTIMx->HRTIM_MASTER.MCR  &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f023 0218 	bic.w	r2, r3, #24
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	601a      	str	r2, [r3, #0]
  HRTIMx->HRTIM_MASTER.MCR  |= (uint32_t)HRTIM_BaseInitStruct->Mode;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	431a      	orrs	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	601a      	str	r2, [r3, #0]
  
  /* Update the HRTIMx registers */
  HRTIMx->HRTIM_MASTER.MPER = HRTIM_BaseInitStruct->Period;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	615a      	str	r2, [r3, #20]
  HRTIMx->HRTIM_MASTER.MREP = HRTIM_BaseInitStruct->RepetitionCounter;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685a      	ldr	r2, [r3, #4]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	619a      	str	r2, [r3, #24]
}
 800458e:	bf00      	nop
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr

0800459a <HRTIM_TimingUnitBase_Config>:
  * @param  HRTIMx: pointer to HRTIMx peripheral
  * @param  TimerIdx: Timer index
  * @retval None
  */
void HRTIM_TimingUnitBase_Config(HRTIM_TypeDef * HRTIMx, uint32_t TimerIdx, HRTIM_BaseInitTypeDef* HRTIM_BaseInitStruct)
{   
 800459a:	b480      	push	{r7}
 800459c:	b085      	sub	sp, #20
 800459e:	af00      	add	r7, sp, #0
 80045a0:	60f8      	str	r0, [r7, #12]
 80045a2:	60b9      	str	r1, [r7, #8]
 80045a4:	607a      	str	r2, [r7, #4]
  /* Set the prescaler ratio */
  HRTIMx->HRTIM_TIMERx[TimerIdx].TIMxCR &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	3301      	adds	r3, #1
 80045ac:	01db      	lsls	r3, r3, #7
 80045ae:	4413      	add	r3, r2
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f023 0207 	bic.w	r2, r3, #7
 80045b6:	68f9      	ldr	r1, [r7, #12]
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	3301      	adds	r3, #1
 80045bc:	01db      	lsls	r3, r3, #7
 80045be:	440b      	add	r3, r1
 80045c0:	601a      	str	r2, [r3, #0]
  HRTIMx->HRTIM_TIMERx[TimerIdx].TIMxCR |= (uint32_t)HRTIM_BaseInitStruct->PrescalerRatio;
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	3301      	adds	r3, #1
 80045c8:	01db      	lsls	r3, r3, #7
 80045ca:	4413      	add	r3, r2
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	431a      	orrs	r2, r3
 80045d4:	68f9      	ldr	r1, [r7, #12]
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	3301      	adds	r3, #1
 80045da:	01db      	lsls	r3, r3, #7
 80045dc:	440b      	add	r3, r1
 80045de:	601a      	str	r2, [r3, #0]

  /* Set the operating mode */
  HRTIMx->HRTIM_TIMERx[TimerIdx].TIMxCR &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	3301      	adds	r3, #1
 80045e6:	01db      	lsls	r3, r3, #7
 80045e8:	4413      	add	r3, r2
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f023 0218 	bic.w	r2, r3, #24
 80045f0:	68f9      	ldr	r1, [r7, #12]
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	3301      	adds	r3, #1
 80045f6:	01db      	lsls	r3, r3, #7
 80045f8:	440b      	add	r3, r1
 80045fa:	601a      	str	r2, [r3, #0]
  HRTIMx->HRTIM_TIMERx[TimerIdx].TIMxCR |= (uint32_t)HRTIM_BaseInitStruct->Mode;
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	3301      	adds	r3, #1
 8004602:	01db      	lsls	r3, r3, #7
 8004604:	4413      	add	r3, r2
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	431a      	orrs	r2, r3
 800460e:	68f9      	ldr	r1, [r7, #12]
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	3301      	adds	r3, #1
 8004614:	01db      	lsls	r3, r3, #7
 8004616:	440b      	add	r3, r1
 8004618:	601a      	str	r2, [r3, #0]
  
  /* Update the HRTIMx registers */
  HRTIMx->HRTIM_TIMERx[TimerIdx].PERxR = HRTIM_BaseInitStruct->Period;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	68f9      	ldr	r1, [r7, #12]
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	01db      	lsls	r3, r3, #7
 8004624:	440b      	add	r3, r1
 8004626:	3394      	adds	r3, #148	; 0x94
 8004628:	601a      	str	r2, [r3, #0]
  HRTIMx->HRTIM_TIMERx[TimerIdx].REPxR = HRTIM_BaseInitStruct->RepetitionCounter;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	68f9      	ldr	r1, [r7, #12]
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	01db      	lsls	r3, r3, #7
 8004634:	440b      	add	r3, r1
 8004636:	3398      	adds	r3, #152	; 0x98
 8004638:	601a      	str	r2, [r3, #0]
}
 800463a:	bf00      	nop
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerInit: pointer to the timer initialization data structure
  * @retval None
  */
void  HRTIM_MasterWaveform_Config(HRTIM_TypeDef * HRTIMx, 
                                HRTIM_TimerInitTypeDef * pTimerInit)
{
 8004646:	b480      	push	{r7}
 8004648:	b085      	sub	sp, #20
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
 800464e:	6039      	str	r1, [r7, #0]
  uint32_t HRTIM_mcr;
  uint32_t HRTIM_bmcr;
  
  /* Configure master timer */
  HRTIM_mcr = HRTIMx->HRTIM_MASTER.MCR;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	60fb      	str	r3, [r7, #12]
  HRTIM_bmcr = HRTIMx->HRTIM_COMMON.BMCR;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 800465c:	60bb      	str	r3, [r7, #8]
  
  /* Enable/Disable the half mode */
  HRTIM_mcr &= ~(HRTIM_MCR_HALF);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f023 0320 	bic.w	r3, r3, #32
 8004664:	60fb      	str	r3, [r7, #12]
  HRTIM_mcr |= pTimerInit->HalfModeEnable;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	4313      	orrs	r3, r2
 800466e:	60fb      	str	r3, [r7, #12]
  
  /* Enable/Disable the timer start upon synchronization event reception */
  HRTIM_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004676:	60fb      	str	r3, [r7, #12]
  HRTIM_mcr |= pTimerInit->StartOnSync;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	4313      	orrs	r3, r2
 8004680:	60fb      	str	r3, [r7, #12]
 
  /* Enable/Disable the timer reset upon synchronization event reception */
  HRTIM_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004688:	60fb      	str	r3, [r7, #12]
  HRTIM_mcr |= pTimerInit->ResetOnSync;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	4313      	orrs	r3, r2
 8004692:	60fb      	str	r3, [r7, #12]
  
  /* Enable/Disable the DAC synchronization event generation */
  HRTIM_mcr &= ~(HRTIM_MCR_DACSYNC);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800469a:	60fb      	str	r3, [r7, #12]
  HRTIM_mcr |= pTimerInit->DACSynchro;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]
  
  /* Enable/Disable preload mechanism for timer registers */
  HRTIM_mcr &= ~(HRTIM_MCR_PREEN);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80046ac:	60fb      	str	r3, [r7, #12]
  HRTIM_mcr |= pTimerInit->PreloadEnable;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	60fb      	str	r3, [r7, #12]
  
  /* Master timer registers update handling */
  HRTIM_mcr &= ~(HRTIM_MCR_BRSTDMA);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80046be:	60fb      	str	r3, [r7, #12]
  HRTIM_mcr |= (pTimerInit->UpdateGating << 2);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]
  
  /* Enable/Disable registers update on repetition */
  HRTIM_mcr &= ~(HRTIM_MCR_MREPU);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80046d2:	60fb      	str	r3, [r7, #12]
  HRTIM_mcr |= pTimerInit->RepetitionUpdate;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	69db      	ldr	r3, [r3, #28]
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	4313      	orrs	r3, r2
 80046dc:	60fb      	str	r3, [r7, #12]
  
  /* Set the timer burst mode */
  HRTIM_bmcr &= ~(HRTIM_BMCR_MTBM);
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046e4:	60bb      	str	r3, [r7, #8]
  HRTIM_bmcr |= pTimerInit->BurstMode;
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIMx registers */
  HRTIMx->HRTIM_MASTER.MCR  = HRTIM_mcr;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	601a      	str	r2, [r3, #0]
  HRTIMx->HRTIM_COMMON.BMCR = HRTIM_bmcr;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68ba      	ldr	r2, [r7, #8]
 80046fa:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
  
}
 80046fe:	bf00      	nop
 8004700:	3714      	adds	r7, #20
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr

0800470a <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
void HRTIM_TimingUnitWaveform_Config(HRTIM_TypeDef * HRTIMx, 
                                    uint32_t TimerIdx, 
                                    HRTIM_TimerInitTypeDef * pTimerInit)
{
 800470a:	b480      	push	{r7}
 800470c:	b087      	sub	sp, #28
 800470e:	af00      	add	r7, sp, #0
 8004710:	60f8      	str	r0, [r7, #12]
 8004712:	60b9      	str	r1, [r7, #8]
 8004714:	607a      	str	r2, [r7, #4]
  uint32_t HRTIM_timcr;
  uint32_t HRTIM_bmcr;
  
  /* Configure timing unit */
  HRTIM_timcr = HRTIMx->HRTIM_TIMERx[TimerIdx].TIMxCR;
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	3301      	adds	r3, #1
 800471c:	01db      	lsls	r3, r3, #7
 800471e:	4413      	add	r3, r2
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	617b      	str	r3, [r7, #20]
  HRTIM_bmcr = HRTIMx->HRTIM_COMMON.BMCR;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 800472a:	613b      	str	r3, [r7, #16]
  
  /* Enable/Disable the half mode */
  HRTIM_timcr &= ~(HRTIM_TIMCR_HALF);
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	f023 0320 	bic.w	r3, r3, #32
 8004732:	617b      	str	r3, [r7, #20]
  HRTIM_timcr |= pTimerInit->HalfModeEnable;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	4313      	orrs	r3, r2
 800473c:	617b      	str	r3, [r7, #20]
  
  /* Enable/Disable the timer start upon synchronization event reception */
  HRTIM_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004744:	617b      	str	r3, [r7, #20]
  HRTIM_timcr |= pTimerInit->StartOnSync;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	4313      	orrs	r3, r2
 800474e:	617b      	str	r3, [r7, #20]
 
  /* Enable/Disable the timer reset upon synchronization event reception */
  HRTIM_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004756:	617b      	str	r3, [r7, #20]
  HRTIM_timcr |= pTimerInit->ResetOnSync;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	4313      	orrs	r3, r2
 8004760:	617b      	str	r3, [r7, #20]
  
  /* Enable/Disable the DAC synchronization event generation */
  HRTIM_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004768:	617b      	str	r3, [r7, #20]
  HRTIM_timcr |= pTimerInit->DACSynchro;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	4313      	orrs	r3, r2
 8004772:	617b      	str	r3, [r7, #20]
  
  /* Enable/Disable preload mechanism for timer registers */
  HRTIM_timcr &= ~(HRTIM_TIMCR_PREEN);
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800477a:	617b      	str	r3, [r7, #20]
  HRTIM_timcr |= pTimerInit->PreloadEnable;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	4313      	orrs	r3, r2
 8004784:	617b      	str	r3, [r7, #20]
  
  /* Timing unit registers update handling */
  HRTIM_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800478c:	617b      	str	r3, [r7, #20]
  HRTIM_timcr |= pTimerInit->UpdateGating;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	4313      	orrs	r3, r2
 8004796:	617b      	str	r3, [r7, #20]
  
  /* Enable/Disable registers update on repetition */
  HRTIM_timcr &= ~(HRTIM_TIMCR_TREPU);
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800479e:	617b      	str	r3, [r7, #20]
  if (pTimerInit->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	69db      	ldr	r3, [r3, #28]
 80047a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047a8:	d103      	bne.n	80047b2 <HRTIM_TimingUnitWaveform_Config+0xa8>
  {
    HRTIM_timcr |= HRTIM_TIMCR_TREPU;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047b0:	617b      	str	r3, [r7, #20]
  }

  /* Set the timer burst mode */
  switch (TimerIdx)
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	2b04      	cmp	r3, #4
 80047b6:	d844      	bhi.n	8004842 <HRTIM_TimingUnitWaveform_Config+0x138>
 80047b8:	a201      	add	r2, pc, #4	; (adr r2, 80047c0 <HRTIM_TimingUnitWaveform_Config+0xb6>)
 80047ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047be:	bf00      	nop
 80047c0:	080047d5 	.word	0x080047d5
 80047c4:	080047eb 	.word	0x080047eb
 80047c8:	08004801 	.word	0x08004801
 80047cc:	08004817 	.word	0x08004817
 80047d0:	0800482d 	.word	0x0800482d
  {
    case HRTIM_TIMERINDEX_TIMER_A:
    {
      HRTIM_bmcr &= ~(HRTIM_BMCR_TABM);
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80047da:	613b      	str	r3, [r7, #16]
      HRTIM_bmcr |= ( pTimerInit->BurstMode << 1);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	613b      	str	r3, [r7, #16]
    }
    break;
 80047e8:	e02c      	b.n	8004844 <HRTIM_TimingUnitWaveform_Config+0x13a>
    case HRTIM_TIMERINDEX_TIMER_B:
    {
      HRTIM_bmcr &= ~(HRTIM_BMCR_TBBM);
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047f0:	613b      	str	r3, [r7, #16]
      HRTIM_bmcr |= ( pTimerInit->BurstMode << 2);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	613b      	str	r3, [r7, #16]
    }
    break;
 80047fe:	e021      	b.n	8004844 <HRTIM_TimingUnitWaveform_Config+0x13a>
    case HRTIM_TIMERINDEX_TIMER_C:
    {
      HRTIM_bmcr &= ~(HRTIM_BMCR_TCBM);
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004806:	613b      	str	r3, [r7, #16]
      HRTIM_bmcr |= ( pTimerInit->BurstMode << 3);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	00db      	lsls	r3, r3, #3
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	4313      	orrs	r3, r2
 8004812:	613b      	str	r3, [r7, #16]
    }
    break;
 8004814:	e016      	b.n	8004844 <HRTIM_TimingUnitWaveform_Config+0x13a>
    case HRTIM_TIMERINDEX_TIMER_D:
    {
      HRTIM_bmcr &= ~(HRTIM_BMCR_TDBM);
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800481c:	613b      	str	r3, [r7, #16]
      HRTIM_bmcr |= ( pTimerInit->BurstMode << 4);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	011b      	lsls	r3, r3, #4
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	4313      	orrs	r3, r2
 8004828:	613b      	str	r3, [r7, #16]
    }
    break;
 800482a:	e00b      	b.n	8004844 <HRTIM_TimingUnitWaveform_Config+0x13a>
    case HRTIM_TIMERINDEX_TIMER_E:
    {
      HRTIM_bmcr &= ~(HRTIM_BMCR_TEBM);
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004832:	613b      	str	r3, [r7, #16]
      HRTIM_bmcr |= ( pTimerInit->BurstMode << 5);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	015b      	lsls	r3, r3, #5
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	4313      	orrs	r3, r2
 800483e:	613b      	str	r3, [r7, #16]
    }
    break;
 8004840:	e000      	b.n	8004844 <HRTIM_TimingUnitWaveform_Config+0x13a>
    default:
    break;
 8004842:	bf00      	nop
  }
  
  /* Update the HRTIMx registers */
  HRTIMx->HRTIM_TIMERx[TimerIdx].TIMxCR = HRTIM_timcr;
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	3301      	adds	r3, #1
 800484a:	01db      	lsls	r3, r3, #7
 800484c:	4413      	add	r3, r2
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	601a      	str	r2, [r3, #0]
  HRTIMx->HRTIM_COMMON.BMCR = HRTIM_bmcr;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 800485a:	bf00      	nop
 800485c:	371c      	adds	r7, #28
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <HRTIM_CompareUnitConfig>:
  */
void  HRTIM_CompareUnitConfig(HRTIM_TypeDef * HRTIMx,
                              uint32_t TimerIdx,
                              uint32_t CompareUnit,
                              HRTIM_CompareCfgTypeDef * pCompareCfg)
{
 8004866:	b480      	push	{r7}
 8004868:	b085      	sub	sp, #20
 800486a:	af00      	add	r7, sp, #0
 800486c:	60f8      	str	r0, [r7, #12]
 800486e:	60b9      	str	r1, [r7, #8]
 8004870:	607a      	str	r2, [r7, #4]
 8004872:	603b      	str	r3, [r7, #0]
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	2b05      	cmp	r3, #5
 8004878:	d12a      	bne.n	80048d0 <HRTIM_CompareUnitConfig+0x6a>
  {
    /* Configure the compare unit of the master timer */
    switch (CompareUnit)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	3b01      	subs	r3, #1
 800487e:	2b07      	cmp	r3, #7
 8004880:	d862      	bhi.n	8004948 <HRTIM_CompareUnitConfig+0xe2>
 8004882:	a201      	add	r2, pc, #4	; (adr r2, 8004888 <HRTIM_CompareUnitConfig+0x22>)
 8004884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004888:	080048a9 	.word	0x080048a9
 800488c:	080048b3 	.word	0x080048b3
 8004890:	08004949 	.word	0x08004949
 8004894:	080048bd 	.word	0x080048bd
 8004898:	08004949 	.word	0x08004949
 800489c:	08004949 	.word	0x08004949
 80048a0:	08004949 	.word	0x08004949
 80048a4:	080048c7 	.word	0x080048c7
    {
      case HRTIM_COMPAREUNIT_1:
      {
        HRTIMx->HRTIM_MASTER.MCMP1R = pCompareCfg->CompareValue;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	61da      	str	r2, [r3, #28]
      }
      break;
 80048b0:	e04d      	b.n	800494e <HRTIM_CompareUnitConfig+0xe8>
      case HRTIM_COMPAREUNIT_2:
      {
        HRTIMx->HRTIM_MASTER.MCMP2R = pCompareCfg->CompareValue;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	625a      	str	r2, [r3, #36]	; 0x24
      }
      break;
 80048ba:	e048      	b.n	800494e <HRTIM_CompareUnitConfig+0xe8>
      case HRTIM_COMPAREUNIT_3:
      {
        HRTIMx->HRTIM_MASTER.MCMP3R = pCompareCfg->CompareValue;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	629a      	str	r2, [r3, #40]	; 0x28
      }
      break;
 80048c4:	e043      	b.n	800494e <HRTIM_CompareUnitConfig+0xe8>
      case HRTIM_COMPAREUNIT_4:
      {
        HRTIMx->HRTIM_MASTER.MCMP4R = pCompareCfg->CompareValue;
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      break;
 80048ce:	e03e      	b.n	800494e <HRTIM_CompareUnitConfig+0xe8>
    }
  }
  else
  {
    /* Configure the compare unit of the timing unit */
    switch (CompareUnit)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3b01      	subs	r3, #1
 80048d4:	2b07      	cmp	r3, #7
 80048d6:	d839      	bhi.n	800494c <HRTIM_CompareUnitConfig+0xe6>
 80048d8:	a201      	add	r2, pc, #4	; (adr r2, 80048e0 <HRTIM_CompareUnitConfig+0x7a>)
 80048da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048de:	bf00      	nop
 80048e0:	08004901 	.word	0x08004901
 80048e4:	08004913 	.word	0x08004913
 80048e8:	0800494d 	.word	0x0800494d
 80048ec:	08004925 	.word	0x08004925
 80048f0:	0800494d 	.word	0x0800494d
 80048f4:	0800494d 	.word	0x0800494d
 80048f8:	0800494d 	.word	0x0800494d
 80048fc:	08004937 	.word	0x08004937
    {
      case HRTIM_COMPAREUNIT_1:
      {
        HRTIMx->HRTIM_TIMERx[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	68f9      	ldr	r1, [r7, #12]
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	01db      	lsls	r3, r3, #7
 800490a:	440b      	add	r3, r1
 800490c:	339c      	adds	r3, #156	; 0x9c
 800490e:	601a      	str	r2, [r3, #0]
      }
      break;
 8004910:	e01d      	b.n	800494e <HRTIM_CompareUnitConfig+0xe8>
      case HRTIM_COMPAREUNIT_2:
      {
        HRTIMx->HRTIM_TIMERx[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	68f9      	ldr	r1, [r7, #12]
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	01db      	lsls	r3, r3, #7
 800491c:	440b      	add	r3, r1
 800491e:	33a4      	adds	r3, #164	; 0xa4
 8004920:	601a      	str	r2, [r3, #0]
      }
      break;
 8004922:	e014      	b.n	800494e <HRTIM_CompareUnitConfig+0xe8>
      case HRTIM_COMPAREUNIT_3:
      {
        HRTIMx->HRTIM_TIMERx[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	68f9      	ldr	r1, [r7, #12]
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	01db      	lsls	r3, r3, #7
 800492e:	440b      	add	r3, r1
 8004930:	33a8      	adds	r3, #168	; 0xa8
 8004932:	601a      	str	r2, [r3, #0]
      }
      break;
 8004934:	e00b      	b.n	800494e <HRTIM_CompareUnitConfig+0xe8>
      case HRTIM_COMPAREUNIT_4:
      {
        HRTIMx->HRTIM_TIMERx[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	68f9      	ldr	r1, [r7, #12]
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	01db      	lsls	r3, r3, #7
 8004940:	440b      	add	r3, r1
 8004942:	33ac      	adds	r3, #172	; 0xac
 8004944:	601a      	str	r2, [r3, #0]
      }
      break;
 8004946:	e002      	b.n	800494e <HRTIM_CompareUnitConfig+0xe8>
      break;
 8004948:	bf00      	nop
 800494a:	e000      	b.n	800494e <HRTIM_CompareUnitConfig+0xe8>
      default:
      break;
 800494c:	bf00      	nop
    }
  }
}
 800494e:	bf00      	nop
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <HRTIM_CaptureUnitConfig>:
  */
void HRTIM_CaptureUnitConfig(HRTIM_TypeDef * HRTIMx,
                             uint32_t TimerIdx,
                             uint32_t CaptureUnit,
                             uint32_t Event)
{
 800495a:	b480      	push	{r7}
 800495c:	b087      	sub	sp, #28
 800495e:	af00      	add	r7, sp, #0
 8004960:	60f8      	str	r0, [r7, #12]
 8004962:	60b9      	str	r1, [r7, #8]
 8004964:	607a      	str	r2, [r7, #4]
 8004966:	603b      	str	r3, [r7, #0]
  uint32_t CaptureTrigger = HRTIM_CAPTURETRIGGER_EEV_1;
 8004968:	2304      	movs	r3, #4
 800496a:	617b      	str	r3, [r7, #20]
  
  switch (Event)
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	2b10      	cmp	r3, #16
 8004970:	d029      	beq.n	80049c6 <HRTIM_CaptureUnitConfig+0x6c>
 8004972:	2b10      	cmp	r3, #16
 8004974:	d80b      	bhi.n	800498e <HRTIM_CaptureUnitConfig+0x34>
 8004976:	2b02      	cmp	r3, #2
 8004978:	d01c      	beq.n	80049b4 <HRTIM_CaptureUnitConfig+0x5a>
 800497a:	2b02      	cmp	r3, #2
 800497c:	d802      	bhi.n	8004984 <HRTIM_CaptureUnitConfig+0x2a>
 800497e:	2b01      	cmp	r3, #1
 8004980:	d015      	beq.n	80049ae <HRTIM_CaptureUnitConfig+0x54>
    {
      CaptureTrigger = HRTIM_CAPTURETRIGGER_EEV_10;
    }
    break;
    default:
    break;  
 8004982:	e036      	b.n	80049f2 <HRTIM_CaptureUnitConfig+0x98>
  switch (Event)
 8004984:	2b04      	cmp	r3, #4
 8004986:	d018      	beq.n	80049ba <HRTIM_CaptureUnitConfig+0x60>
 8004988:	2b08      	cmp	r3, #8
 800498a:	d019      	beq.n	80049c0 <HRTIM_CaptureUnitConfig+0x66>
    break;  
 800498c:	e031      	b.n	80049f2 <HRTIM_CaptureUnitConfig+0x98>
  switch (Event)
 800498e:	2b80      	cmp	r3, #128	; 0x80
 8004990:	d023      	beq.n	80049da <HRTIM_CaptureUnitConfig+0x80>
 8004992:	2b80      	cmp	r3, #128	; 0x80
 8004994:	d804      	bhi.n	80049a0 <HRTIM_CaptureUnitConfig+0x46>
 8004996:	2b20      	cmp	r3, #32
 8004998:	d018      	beq.n	80049cc <HRTIM_CaptureUnitConfig+0x72>
 800499a:	2b40      	cmp	r3, #64	; 0x40
 800499c:	d019      	beq.n	80049d2 <HRTIM_CaptureUnitConfig+0x78>
    break;  
 800499e:	e028      	b.n	80049f2 <HRTIM_CaptureUnitConfig+0x98>
  switch (Event)
 80049a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049a4:	d01d      	beq.n	80049e2 <HRTIM_CaptureUnitConfig+0x88>
 80049a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049aa:	d01e      	beq.n	80049ea <HRTIM_CaptureUnitConfig+0x90>
    break;  
 80049ac:	e021      	b.n	80049f2 <HRTIM_CaptureUnitConfig+0x98>
      CaptureTrigger = HRTIM_CAPTURETRIGGER_EEV_1;
 80049ae:	2304      	movs	r3, #4
 80049b0:	617b      	str	r3, [r7, #20]
    break;
 80049b2:	e01e      	b.n	80049f2 <HRTIM_CaptureUnitConfig+0x98>
      CaptureTrigger = HRTIM_CAPTURETRIGGER_EEV_2;
 80049b4:	2308      	movs	r3, #8
 80049b6:	617b      	str	r3, [r7, #20]
    break;
 80049b8:	e01b      	b.n	80049f2 <HRTIM_CaptureUnitConfig+0x98>
      CaptureTrigger = HRTIM_CAPTURETRIGGER_EEV_3;
 80049ba:	2310      	movs	r3, #16
 80049bc:	617b      	str	r3, [r7, #20]
    break;
 80049be:	e018      	b.n	80049f2 <HRTIM_CaptureUnitConfig+0x98>
      CaptureTrigger = HRTIM_CAPTURETRIGGER_EEV_4;
 80049c0:	2320      	movs	r3, #32
 80049c2:	617b      	str	r3, [r7, #20]
    break;
 80049c4:	e015      	b.n	80049f2 <HRTIM_CaptureUnitConfig+0x98>
      CaptureTrigger = HRTIM_CAPTURETRIGGER_EEV_5;
 80049c6:	2340      	movs	r3, #64	; 0x40
 80049c8:	617b      	str	r3, [r7, #20]
    break;
 80049ca:	e012      	b.n	80049f2 <HRTIM_CaptureUnitConfig+0x98>
      CaptureTrigger = HRTIM_CAPTURETRIGGER_EEV_6;
 80049cc:	2380      	movs	r3, #128	; 0x80
 80049ce:	617b      	str	r3, [r7, #20]
    break;
 80049d0:	e00f      	b.n	80049f2 <HRTIM_CaptureUnitConfig+0x98>
      CaptureTrigger = HRTIM_CAPTURETRIGGER_EEV_7;
 80049d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049d6:	617b      	str	r3, [r7, #20]
    break;
 80049d8:	e00b      	b.n	80049f2 <HRTIM_CaptureUnitConfig+0x98>
      CaptureTrigger = HRTIM_CAPTURETRIGGER_EEV_8;
 80049da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049de:	617b      	str	r3, [r7, #20]
    break;
 80049e0:	e007      	b.n	80049f2 <HRTIM_CaptureUnitConfig+0x98>
      CaptureTrigger = HRTIM_CAPTURETRIGGER_EEV_9;
 80049e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049e6:	617b      	str	r3, [r7, #20]
    break;
 80049e8:	e003      	b.n	80049f2 <HRTIM_CaptureUnitConfig+0x98>
      CaptureTrigger = HRTIM_CAPTURETRIGGER_EEV_10;
 80049ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80049ee:	617b      	str	r3, [r7, #20]
    break;
 80049f0:	bf00      	nop
    
  }  
  switch (CaptureUnit)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d002      	beq.n	80049fe <HRTIM_CaptureUnitConfig+0xa4>
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d008      	beq.n	8004a0e <HRTIM_CaptureUnitConfig+0xb4>
    {
      HRTIMx->HRTIM_TIMERx[TimerIdx].CPT2xCR = CaptureTrigger;
    }
    break;
    default:
    break;  
 80049fc:	e00f      	b.n	8004a1e <HRTIM_CaptureUnitConfig+0xc4>
      HRTIMx->HRTIM_TIMERx[TimerIdx].CPT1xCR = CaptureTrigger;
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	01db      	lsls	r3, r3, #7
 8004a04:	4413      	add	r3, r2
 8004a06:	33dc      	adds	r3, #220	; 0xdc
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	601a      	str	r2, [r3, #0]
    break;
 8004a0c:	e007      	b.n	8004a1e <HRTIM_CaptureUnitConfig+0xc4>
      HRTIMx->HRTIM_TIMERx[TimerIdx].CPT2xCR = CaptureTrigger;
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	01db      	lsls	r3, r3, #7
 8004a14:	4413      	add	r3, r2
 8004a16:	33e0      	adds	r3, #224	; 0xe0
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	601a      	str	r2, [r3, #0]
    break;
 8004a1c:	bf00      	nop
  }
}
 8004a1e:	bf00      	nop
 8004a20:	371c      	adds	r7, #28
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <HRTIM_OutputConfig>:
  */
void  HRTIM_OutputConfig(HRTIM_TypeDef * HRTIMx,
                         uint32_t TimerIdx,
                         uint32_t Output,
                         HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b087      	sub	sp, #28
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	60f8      	str	r0, [r7, #12]
 8004a32:	60b9      	str	r1, [r7, #8]
 8004a34:	607a      	str	r2, [r7, #4]
 8004a36:	603b      	str	r3, [r7, #0]
  uint32_t HRTIM_outr;
  uint32_t shift = 0;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	617b      	str	r3, [r7, #20]
  
  HRTIM_outr = HRTIMx->HRTIM_TIMERx[TimerIdx].OUTxR;
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	01db      	lsls	r3, r3, #7
 8004a42:	4413      	add	r3, r2
 8004a44:	33e4      	adds	r3, #228	; 0xe4
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	613b      	str	r3, [r7, #16]
  
  switch (Output)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2b10      	cmp	r3, #16
 8004a4e:	d01d      	beq.n	8004a8c <HRTIM_OutputConfig+0x62>
 8004a50:	2b10      	cmp	r3, #16
 8004a52:	d80b      	bhi.n	8004a6c <HRTIM_OutputConfig+0x42>
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d02c      	beq.n	8004ab2 <HRTIM_OutputConfig+0x88>
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d802      	bhi.n	8004a62 <HRTIM_OutputConfig+0x38>
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d015      	beq.n	8004a8c <HRTIM_OutputConfig+0x62>

      shift = 16;
    }
    break;
    default:
    break;
 8004a60:	e03a      	b.n	8004ad8 <HRTIM_OutputConfig+0xae>
  switch (Output)
 8004a62:	2b04      	cmp	r3, #4
 8004a64:	d012      	beq.n	8004a8c <HRTIM_OutputConfig+0x62>
 8004a66:	2b08      	cmp	r3, #8
 8004a68:	d023      	beq.n	8004ab2 <HRTIM_OutputConfig+0x88>
    break;
 8004a6a:	e035      	b.n	8004ad8 <HRTIM_OutputConfig+0xae>
  switch (Output)
 8004a6c:	2b80      	cmp	r3, #128	; 0x80
 8004a6e:	d020      	beq.n	8004ab2 <HRTIM_OutputConfig+0x88>
 8004a70:	2b80      	cmp	r3, #128	; 0x80
 8004a72:	d804      	bhi.n	8004a7e <HRTIM_OutputConfig+0x54>
 8004a74:	2b20      	cmp	r3, #32
 8004a76:	d01c      	beq.n	8004ab2 <HRTIM_OutputConfig+0x88>
 8004a78:	2b40      	cmp	r3, #64	; 0x40
 8004a7a:	d007      	beq.n	8004a8c <HRTIM_OutputConfig+0x62>
    break;
 8004a7c:	e02c      	b.n	8004ad8 <HRTIM_OutputConfig+0xae>
  switch (Output)
 8004a7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a82:	d003      	beq.n	8004a8c <HRTIM_OutputConfig+0x62>
 8004a84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a88:	d013      	beq.n	8004ab2 <HRTIM_OutputConfig+0x88>
    break;
 8004a8a:	e025      	b.n	8004ad8 <HRTIM_OutputConfig+0xae>
      HRTIMx->HRTIM_TIMERx[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685a      	ldr	r2, [r3, #4]
 8004a90:	68f9      	ldr	r1, [r7, #12]
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	01db      	lsls	r3, r3, #7
 8004a96:	440b      	add	r3, r1
 8004a98:	33bc      	adds	r3, #188	; 0xbc
 8004a9a:	601a      	str	r2, [r3, #0]
      HRTIMx->HRTIM_TIMERx[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	689a      	ldr	r2, [r3, #8]
 8004aa0:	68f9      	ldr	r1, [r7, #12]
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	01db      	lsls	r3, r3, #7
 8004aa6:	440b      	add	r3, r1
 8004aa8:	33c0      	adds	r3, #192	; 0xc0
 8004aaa:	601a      	str	r2, [r3, #0]
      shift = 0;
 8004aac:	2300      	movs	r3, #0
 8004aae:	617b      	str	r3, [r7, #20]
    break;
 8004ab0:	e012      	b.n	8004ad8 <HRTIM_OutputConfig+0xae>
      HRTIMx->HRTIM_TIMERx[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	68f9      	ldr	r1, [r7, #12]
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	01db      	lsls	r3, r3, #7
 8004abc:	440b      	add	r3, r1
 8004abe:	33c4      	adds	r3, #196	; 0xc4
 8004ac0:	601a      	str	r2, [r3, #0]
      HRTIMx->HRTIM_TIMERx[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	689a      	ldr	r2, [r3, #8]
 8004ac6:	68f9      	ldr	r1, [r7, #12]
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	01db      	lsls	r3, r3, #7
 8004acc:	440b      	add	r3, r1
 8004ace:	33c8      	adds	r3, #200	; 0xc8
 8004ad0:	601a      	str	r2, [r3, #0]
      shift = 16;
 8004ad2:	2310      	movs	r3, #16
 8004ad4:	617b      	str	r3, [r7, #20]
    break;
 8004ad6:	bf00      	nop
  HRTIM_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1)  << shift);
 8004ad8:	22fe      	movs	r2, #254	; 0xfe
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	fa02 f303 	lsl.w	r3, r2, r3
  HRTIM_outr &= ~((HRTIM_OUTR_POL1 |
 8004ae0:	43db      	mvns	r3, r3
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	613b      	str	r3, [r7, #16]
  
  /* Set the polarity */
  HRTIM_outr |= (pOutputCfg->Polarity << shift);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	fa02 f303 	lsl.w	r3, r2, r3
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	613b      	str	r3, [r7, #16]
  
  /* Set the IDLE mode */
  HRTIM_outr |= (pOutputCfg->IdleMode << shift);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	68da      	ldr	r2, [r3, #12]
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	fa02 f303 	lsl.w	r3, r2, r3
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	613b      	str	r3, [r7, #16]
  
  /* Set the IDLE state */
  HRTIM_outr |= (pOutputCfg->IdleState << shift);
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	691a      	ldr	r2, [r3, #16]
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	613b      	str	r3, [r7, #16]
  
  /* Set the FAULT state */
  HRTIM_outr |= (pOutputCfg->FaultState << shift);
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	695a      	ldr	r2, [r3, #20]
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	613b      	str	r3, [r7, #16]
  
  /* Set the chopper mode */
  HRTIM_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	699a      	ldr	r2, [r3, #24]
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	613b      	str	r3, [r7, #16]

  /* Set the burst mode entry mode */
  HRTIM_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	69da      	ldr	r2, [r3, #28]
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	613b      	str	r3, [r7, #16]
  
  /* Update HRTIMx register */
  HRTIMx->HRTIM_TIMERx[TimerIdx].OUTxR = HRTIM_outr;
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	01db      	lsls	r3, r3, #7
 8004b4e:	4413      	add	r3, r2
 8004b50:	33e4      	adds	r3, #228	; 0xe4
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	601a      	str	r2, [r3, #0]
}
 8004b56:	bf00      	nop
 8004b58:	371c      	adds	r7, #28
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr

08004b62 <HRTIM_ExternalEventConfig>:
  * @retval None
  */
static void HRTIM_ExternalEventConfig(HRTIM_TypeDef * HRTIMx,
                              uint32_t Event,
                              HRTIM_EventCfgTypeDef *pEventCfg)
{
 8004b62:	b480      	push	{r7}
 8004b64:	b089      	sub	sp, #36	; 0x24
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	60f8      	str	r0, [r7, #12]
 8004b6a:	60b9      	str	r1, [r7, #8]
 8004b6c:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_eecr1;
  uint32_t hrtim_eecr2;
  uint32_t hrtim_eecr3;

  /* Configure external event channel */
  hrtim_eecr1 = HRTIMx->HRTIM_COMMON.EECR1;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 8004b74:	61fb      	str	r3, [r7, #28]
  hrtim_eecr2 = HRTIMx->HRTIM_COMMON.EECR2;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 8004b7c:	61bb      	str	r3, [r7, #24]
  hrtim_eecr3 = HRTIMx->HRTIM_COMMON.EECR3;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 8004b84:	617b      	str	r3, [r7, #20]
  
  switch (Event)
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	2b10      	cmp	r3, #16
 8004b8a:	f000 80b4 	beq.w	8004cf6 <HRTIM_ExternalEventConfig+0x194>
 8004b8e:	2b10      	cmp	r3, #16
 8004b90:	d80c      	bhi.n	8004bac <HRTIM_ExternalEventConfig+0x4a>
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d040      	beq.n	8004c18 <HRTIM_ExternalEventConfig+0xb6>
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d802      	bhi.n	8004ba0 <HRTIM_ExternalEventConfig+0x3e>
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d01b      	beq.n	8004bd6 <HRTIM_ExternalEventConfig+0x74>
      HRTIMx->HRTIM_COMMON.EECR2 = hrtim_eecr2;
      HRTIMx->HRTIM_COMMON.EECR3 = hrtim_eecr3;
    }
    break;
    default:
    break;
 8004b9e:	e198      	b.n	8004ed2 <HRTIM_ExternalEventConfig+0x370>
  switch (Event)
 8004ba0:	2b04      	cmp	r3, #4
 8004ba2:	d05e      	beq.n	8004c62 <HRTIM_ExternalEventConfig+0x100>
 8004ba4:	2b08      	cmp	r3, #8
 8004ba6:	f000 8081 	beq.w	8004cac <HRTIM_ExternalEventConfig+0x14a>
    break;
 8004baa:	e192      	b.n	8004ed2 <HRTIM_ExternalEventConfig+0x370>
  switch (Event)
 8004bac:	2b80      	cmp	r3, #128	; 0x80
 8004bae:	f000 8115 	beq.w	8004ddc <HRTIM_ExternalEventConfig+0x27a>
 8004bb2:	2b80      	cmp	r3, #128	; 0x80
 8004bb4:	d806      	bhi.n	8004bc4 <HRTIM_ExternalEventConfig+0x62>
 8004bb6:	2b20      	cmp	r3, #32
 8004bb8:	f000 80c2 	beq.w	8004d40 <HRTIM_ExternalEventConfig+0x1de>
 8004bbc:	2b40      	cmp	r3, #64	; 0x40
 8004bbe:	f000 80e4 	beq.w	8004d8a <HRTIM_ExternalEventConfig+0x228>
    break;
 8004bc2:	e186      	b.n	8004ed2 <HRTIM_ExternalEventConfig+0x370>
  switch (Event)
 8004bc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bc8:	f000 8131 	beq.w	8004e2e <HRTIM_ExternalEventConfig+0x2cc>
 8004bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bd0:	f000 8156 	beq.w	8004e80 <HRTIM_ExternalEventConfig+0x31e>
    break;
 8004bd4:	e17d      	b.n	8004ed2 <HRTIM_ExternalEventConfig+0x370>
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE1SRC | HRTIM_EECR1_EE1POL | HRTIM_EECR1_EE1SNS | HRTIM_EECR1_EE1FAST);
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004bdc:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= pEventCfg->Source;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	69fa      	ldr	r2, [r7, #28]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= pEventCfg->Polarity;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	69fa      	ldr	r2, [r7, #28]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= pEventCfg->Sensitivity;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	69fa      	ldr	r2, [r7, #28]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	61fb      	str	r3, [r7, #28]
      HRTIMx->HRTIM_COMMON.EECR1 = hrtim_eecr1;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	69fa      	ldr	r2, [r7, #28]
 8004c00:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      hrtim_eecr1 |= pEventCfg->FastMode;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	69fa      	ldr	r2, [r7, #28]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	61fb      	str	r3, [r7, #28]
      HRTIMx->HRTIM_COMMON.EECR1 = hrtim_eecr1;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	69fa      	ldr	r2, [r7, #28]
 8004c12:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
    break;
 8004c16:	e15c      	b.n	8004ed2 <HRTIM_ExternalEventConfig+0x370>
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE2SRC | HRTIM_EECR1_EE2POL | HRTIM_EECR1_EE2SNS | HRTIM_EECR1_EE2FAST);
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	f423 637c 	bic.w	r3, r3, #4032	; 0xfc0
 8004c1e:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Source << 6);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	019b      	lsls	r3, r3, #6
 8004c26:	69fa      	ldr	r2, [r7, #28]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Polarity << 6);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	019b      	lsls	r3, r3, #6
 8004c32:	69fa      	ldr	r2, [r7, #28]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Sensitivity << 6);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	019b      	lsls	r3, r3, #6
 8004c3e:	69fa      	ldr	r2, [r7, #28]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	61fb      	str	r3, [r7, #28]
      HRTIMx->HRTIM_COMMON.EECR1 = hrtim_eecr1;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	69fa      	ldr	r2, [r7, #28]
 8004c48:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      hrtim_eecr1 |= (pEventCfg->FastMode << 6);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	019b      	lsls	r3, r3, #6
 8004c52:	69fa      	ldr	r2, [r7, #28]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	61fb      	str	r3, [r7, #28]
      HRTIMx->HRTIM_COMMON.EECR1 = hrtim_eecr1;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	69fa      	ldr	r2, [r7, #28]
 8004c5c:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
    break;
 8004c60:	e137      	b.n	8004ed2 <HRTIM_ExternalEventConfig+0x370>
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE3SRC | HRTIM_EECR1_EE3POL | HRTIM_EECR1_EE3SNS | HRTIM_EECR1_EE3FAST);
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004c68:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Source << 12);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	031b      	lsls	r3, r3, #12
 8004c70:	69fa      	ldr	r2, [r7, #28]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Polarity << 12);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	031b      	lsls	r3, r3, #12
 8004c7c:	69fa      	ldr	r2, [r7, #28]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Sensitivity << 12);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	031b      	lsls	r3, r3, #12
 8004c88:	69fa      	ldr	r2, [r7, #28]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	61fb      	str	r3, [r7, #28]
      HRTIMx->HRTIM_COMMON.EECR1 = hrtim_eecr1;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	69fa      	ldr	r2, [r7, #28]
 8004c92:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      hrtim_eecr1 |= (pEventCfg->FastMode << 12);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	031b      	lsls	r3, r3, #12
 8004c9c:	69fa      	ldr	r2, [r7, #28]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	61fb      	str	r3, [r7, #28]
      HRTIMx->HRTIM_COMMON.EECR1 = hrtim_eecr1;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	69fa      	ldr	r2, [r7, #28]
 8004ca6:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
    break;
 8004caa:	e112      	b.n	8004ed2 <HRTIM_ExternalEventConfig+0x370>
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE4SRC | HRTIM_EECR1_EE4POL | HRTIM_EECR1_EE4SNS | HRTIM_EECR1_EE4FAST);
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	f423 037c 	bic.w	r3, r3, #16515072	; 0xfc0000
 8004cb2:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Source << 18);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	049b      	lsls	r3, r3, #18
 8004cba:	69fa      	ldr	r2, [r7, #28]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Polarity << 18);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	049b      	lsls	r3, r3, #18
 8004cc6:	69fa      	ldr	r2, [r7, #28]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Sensitivity << 18);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	049b      	lsls	r3, r3, #18
 8004cd2:	69fa      	ldr	r2, [r7, #28]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	61fb      	str	r3, [r7, #28]
      HRTIMx->HRTIM_COMMON.EECR1 = hrtim_eecr1;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	69fa      	ldr	r2, [r7, #28]
 8004cdc:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      hrtim_eecr1 |= (pEventCfg->FastMode << 18);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	049b      	lsls	r3, r3, #18
 8004ce6:	69fa      	ldr	r2, [r7, #28]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	61fb      	str	r3, [r7, #28]
      HRTIMx->HRTIM_COMMON.EECR1 = hrtim_eecr1;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	69fa      	ldr	r2, [r7, #28]
 8004cf0:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
    break;
 8004cf4:	e0ed      	b.n	8004ed2 <HRTIM_ExternalEventConfig+0x370>
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE5SRC | HRTIM_EECR1_EE5POL | HRTIM_EECR1_EE5SNS | HRTIM_EECR1_EE5FAST);
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8004cfc:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Source << 24);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	061b      	lsls	r3, r3, #24
 8004d04:	69fa      	ldr	r2, [r7, #28]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Polarity << 24);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	061b      	lsls	r3, r3, #24
 8004d10:	69fa      	ldr	r2, [r7, #28]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Sensitivity << 24);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	061b      	lsls	r3, r3, #24
 8004d1c:	69fa      	ldr	r2, [r7, #28]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	61fb      	str	r3, [r7, #28]
      HRTIMx->HRTIM_COMMON.EECR1 = hrtim_eecr1;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	69fa      	ldr	r2, [r7, #28]
 8004d26:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
      hrtim_eecr1 |= (pEventCfg->FastMode << 24);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	061b      	lsls	r3, r3, #24
 8004d30:	69fa      	ldr	r2, [r7, #28]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	61fb      	str	r3, [r7, #28]
      HRTIMx->HRTIM_COMMON.EECR1 = hrtim_eecr1;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	69fa      	ldr	r2, [r7, #28]
 8004d3a:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
    break;
 8004d3e:	e0c8      	b.n	8004ed2 <HRTIM_ExternalEventConfig+0x370>
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE6SRC | HRTIM_EECR2_EE6POL | HRTIM_EECR2_EE6SNS);
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	f023 031f 	bic.w	r3, r3, #31
 8004d46:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= pEventCfg->Source;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	69ba      	ldr	r2, [r7, #24]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= pEventCfg->Polarity;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	69ba      	ldr	r2, [r7, #24]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= pEventCfg->Sensitivity;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	69ba      	ldr	r2, [r7, #24]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE6F);
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f023 030f 	bic.w	r3, r3, #15
 8004d6c:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= pEventCfg->Filter;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	617b      	str	r3, [r7, #20]
      HRTIMx->HRTIM_COMMON.EECR2 = hrtim_eecr2;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	69ba      	ldr	r2, [r7, #24]
 8004d7c:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
      HRTIMx->HRTIM_COMMON.EECR3 = hrtim_eecr3;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
    break;
 8004d88:	e0a3      	b.n	8004ed2 <HRTIM_ExternalEventConfig+0x370>
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE7SRC | HRTIM_EECR2_EE7POL | HRTIM_EECR2_EE7SNS);
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	f423 63f8 	bic.w	r3, r3, #1984	; 0x7c0
 8004d90:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Source << 6);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	019b      	lsls	r3, r3, #6
 8004d98:	69ba      	ldr	r2, [r7, #24]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Polarity << 6);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	019b      	lsls	r3, r3, #6
 8004da4:	69ba      	ldr	r2, [r7, #24]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Sensitivity << 6);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	019b      	lsls	r3, r3, #6
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE7F);
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f423 7370 	bic.w	r3, r3, #960	; 0x3c0
 8004dbc:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= (pEventCfg->Filter << 6);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	019b      	lsls	r3, r3, #6
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	617b      	str	r3, [r7, #20]
      HRTIMx->HRTIM_COMMON.EECR2 = hrtim_eecr2;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	69ba      	ldr	r2, [r7, #24]
 8004dce:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
      HRTIMx->HRTIM_COMMON.EECR3 = hrtim_eecr3;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
    break;
 8004dda:	e07a      	b.n	8004ed2 <HRTIM_ExternalEventConfig+0x370>
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE8SRC | HRTIM_EECR2_EE8POL | HRTIM_EECR2_EE8SNS);
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	f423 33f8 	bic.w	r3, r3, #126976	; 0x1f000
 8004de2:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Source << 12);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	031b      	lsls	r3, r3, #12
 8004dea:	69ba      	ldr	r2, [r7, #24]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Polarity << 12);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	031b      	lsls	r3, r3, #12
 8004df6:	69ba      	ldr	r2, [r7, #24]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Sensitivity << 12);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	031b      	lsls	r3, r3, #12
 8004e02:	69ba      	ldr	r2, [r7, #24]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE8F);
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e0e:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= (pEventCfg->Filter << 12);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	031b      	lsls	r3, r3, #12
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	617b      	str	r3, [r7, #20]
      HRTIMx->HRTIM_COMMON.EECR2 = hrtim_eecr2;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
      HRTIMx->HRTIM_COMMON.EECR3 = hrtim_eecr3;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
    break;
 8004e2c:	e051      	b.n	8004ed2 <HRTIM_ExternalEventConfig+0x370>
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE9SRC | HRTIM_EECR2_EE9POL | HRTIM_EECR2_EE9SNS);
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	f423 03f8 	bic.w	r3, r3, #8126464	; 0x7c0000
 8004e34:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Source << 18);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	049b      	lsls	r3, r3, #18
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Polarity << 18);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	049b      	lsls	r3, r3, #18
 8004e48:	69ba      	ldr	r2, [r7, #24]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Sensitivity << 18);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	049b      	lsls	r3, r3, #18
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE9F);
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8004e60:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= (pEventCfg->Filter << 18);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	049b      	lsls	r3, r3, #18
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	617b      	str	r3, [r7, #20]
      HRTIMx->HRTIM_COMMON.EECR2 = hrtim_eecr2;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	69ba      	ldr	r2, [r7, #24]
 8004e72:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
      HRTIMx->HRTIM_COMMON.EECR3 = hrtim_eecr3;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
    break;
 8004e7e:	e028      	b.n	8004ed2 <HRTIM_ExternalEventConfig+0x370>
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE10SRC | HRTIM_EECR2_EE10POL | HRTIM_EECR2_EE10SNS);
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8004e86:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Source << 24);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	061b      	lsls	r3, r3, #24
 8004e8e:	69ba      	ldr	r2, [r7, #24]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Polarity << 24);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	061b      	lsls	r3, r3, #24
 8004e9a:	69ba      	ldr	r2, [r7, #24]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Sensitivity << 24);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	061b      	lsls	r3, r3, #24
 8004ea6:	69ba      	ldr	r2, [r7, #24]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE10F);
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8004eb2:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= (pEventCfg->Filter << 24);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	061b      	lsls	r3, r3, #24
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	617b      	str	r3, [r7, #20]
      HRTIMx->HRTIM_COMMON.EECR2 = hrtim_eecr2;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	69ba      	ldr	r2, [r7, #24]
 8004ec4:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
      HRTIMx->HRTIM_COMMON.EECR3 = hrtim_eecr3;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
    break;
 8004ed0:	bf00      	nop
  }
}
 8004ed2:	bf00      	nop
 8004ed4:	3724      	adds	r7, #36	; 0x24
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <HRTIM_TIM_ResetConfig>:
  * @retval None
  */
void HRTIM_TIM_ResetConfig(HRTIM_TypeDef * HRTIMx,
                           uint32_t TimerIdx,
                           uint32_t Event)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b085      	sub	sp, #20
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	60f8      	str	r0, [r7, #12]
 8004ee6:	60b9      	str	r1, [r7, #8]
 8004ee8:	607a      	str	r2, [r7, #4]
  switch (Event)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2b10      	cmp	r3, #16
 8004eee:	d041      	beq.n	8004f74 <HRTIM_TIM_ResetConfig+0x96>
 8004ef0:	2b10      	cmp	r3, #16
 8004ef2:	d80b      	bhi.n	8004f0c <HRTIM_TIM_ResetConfig+0x2e>
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d022      	beq.n	8004f3e <HRTIM_TIM_ResetConfig+0x60>
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d802      	bhi.n	8004f02 <HRTIM_TIM_ResetConfig+0x24>
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d015      	beq.n	8004f2c <HRTIM_TIM_ResetConfig+0x4e>
    {
      HRTIMx->HRTIM_TIMERx[TimerIdx].RSTxR = HRTIM_TIMRESETTRIGGER_EEV_10;
    }
    break;
    default:
    break;
 8004f00:	e06e      	b.n	8004fe0 <HRTIM_TIM_ResetConfig+0x102>
  switch (Event)
 8004f02:	2b04      	cmp	r3, #4
 8004f04:	d024      	beq.n	8004f50 <HRTIM_TIM_ResetConfig+0x72>
 8004f06:	2b08      	cmp	r3, #8
 8004f08:	d02b      	beq.n	8004f62 <HRTIM_TIM_ResetConfig+0x84>
    break;
 8004f0a:	e069      	b.n	8004fe0 <HRTIM_TIM_ResetConfig+0x102>
  switch (Event)
 8004f0c:	2b80      	cmp	r3, #128	; 0x80
 8004f0e:	d04c      	beq.n	8004faa <HRTIM_TIM_ResetConfig+0xcc>
 8004f10:	2b80      	cmp	r3, #128	; 0x80
 8004f12:	d804      	bhi.n	8004f1e <HRTIM_TIM_ResetConfig+0x40>
 8004f14:	2b20      	cmp	r3, #32
 8004f16:	d036      	beq.n	8004f86 <HRTIM_TIM_ResetConfig+0xa8>
 8004f18:	2b40      	cmp	r3, #64	; 0x40
 8004f1a:	d03d      	beq.n	8004f98 <HRTIM_TIM_ResetConfig+0xba>
    break;
 8004f1c:	e060      	b.n	8004fe0 <HRTIM_TIM_ResetConfig+0x102>
  switch (Event)
 8004f1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f22:	d04b      	beq.n	8004fbc <HRTIM_TIM_ResetConfig+0xde>
 8004f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f28:	d051      	beq.n	8004fce <HRTIM_TIM_ResetConfig+0xf0>
    break;
 8004f2a:	e059      	b.n	8004fe0 <HRTIM_TIM_ResetConfig+0x102>
      HRTIMx->HRTIM_TIMERx[TimerIdx].RSTxR = HRTIM_TIMRESETTRIGGER_EEV_1;
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	01db      	lsls	r3, r3, #7
 8004f32:	4413      	add	r3, r2
 8004f34:	33d4      	adds	r3, #212	; 0xd4
 8004f36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f3a:	601a      	str	r2, [r3, #0]
    break;
 8004f3c:	e050      	b.n	8004fe0 <HRTIM_TIM_ResetConfig+0x102>
      HRTIMx->HRTIM_TIMERx[TimerIdx].RSTxR = HRTIM_TIMRESETTRIGGER_EEV_2;
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	01db      	lsls	r3, r3, #7
 8004f44:	4413      	add	r3, r2
 8004f46:	33d4      	adds	r3, #212	; 0xd4
 8004f48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f4c:	601a      	str	r2, [r3, #0]
    break;
 8004f4e:	e047      	b.n	8004fe0 <HRTIM_TIM_ResetConfig+0x102>
      HRTIMx->HRTIM_TIMERx[TimerIdx].RSTxR = HRTIM_TIMRESETTRIGGER_EEV_3;
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	01db      	lsls	r3, r3, #7
 8004f56:	4413      	add	r3, r2
 8004f58:	33d4      	adds	r3, #212	; 0xd4
 8004f5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f5e:	601a      	str	r2, [r3, #0]
    break;
 8004f60:	e03e      	b.n	8004fe0 <HRTIM_TIM_ResetConfig+0x102>
      HRTIMx->HRTIM_TIMERx[TimerIdx].RSTxR = HRTIM_TIMRESETTRIGGER_EEV_4;
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	01db      	lsls	r3, r3, #7
 8004f68:	4413      	add	r3, r2
 8004f6a:	33d4      	adds	r3, #212	; 0xd4
 8004f6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004f70:	601a      	str	r2, [r3, #0]
    break;
 8004f72:	e035      	b.n	8004fe0 <HRTIM_TIM_ResetConfig+0x102>
      HRTIMx->HRTIM_TIMERx[TimerIdx].RSTxR = HRTIM_TIMRESETTRIGGER_EEV_5;
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	01db      	lsls	r3, r3, #7
 8004f7a:	4413      	add	r3, r2
 8004f7c:	33d4      	adds	r3, #212	; 0xd4
 8004f7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004f82:	601a      	str	r2, [r3, #0]
    break;
 8004f84:	e02c      	b.n	8004fe0 <HRTIM_TIM_ResetConfig+0x102>
      HRTIMx->HRTIM_TIMERx[TimerIdx].RSTxR = HRTIM_TIMRESETTRIGGER_EEV_6;
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	01db      	lsls	r3, r3, #7
 8004f8c:	4413      	add	r3, r2
 8004f8e:	33d4      	adds	r3, #212	; 0xd4
 8004f90:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004f94:	601a      	str	r2, [r3, #0]
    break;
 8004f96:	e023      	b.n	8004fe0 <HRTIM_TIM_ResetConfig+0x102>
      HRTIMx->HRTIM_TIMERx[TimerIdx].RSTxR = HRTIM_TIMRESETTRIGGER_EEV_7;
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	01db      	lsls	r3, r3, #7
 8004f9e:	4413      	add	r3, r2
 8004fa0:	33d4      	adds	r3, #212	; 0xd4
 8004fa2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004fa6:	601a      	str	r2, [r3, #0]
    break;
 8004fa8:	e01a      	b.n	8004fe0 <HRTIM_TIM_ResetConfig+0x102>
      HRTIMx->HRTIM_TIMERx[TimerIdx].RSTxR = HRTIM_TIMRESETTRIGGER_EEV_8;
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	01db      	lsls	r3, r3, #7
 8004fb0:	4413      	add	r3, r2
 8004fb2:	33d4      	adds	r3, #212	; 0xd4
 8004fb4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004fb8:	601a      	str	r2, [r3, #0]
    break;
 8004fba:	e011      	b.n	8004fe0 <HRTIM_TIM_ResetConfig+0x102>
      HRTIMx->HRTIM_TIMERx[TimerIdx].RSTxR = HRTIM_TIMRESETTRIGGER_EEV_9;
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	01db      	lsls	r3, r3, #7
 8004fc2:	4413      	add	r3, r2
 8004fc4:	33d4      	adds	r3, #212	; 0xd4
 8004fc6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004fca:	601a      	str	r2, [r3, #0]
    break;
 8004fcc:	e008      	b.n	8004fe0 <HRTIM_TIM_ResetConfig+0x102>
      HRTIMx->HRTIM_TIMERx[TimerIdx].RSTxR = HRTIM_TIMRESETTRIGGER_EEV_10;
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	01db      	lsls	r3, r3, #7
 8004fd4:	4413      	add	r3, r2
 8004fd6:	33d4      	adds	r3, #212	; 0xd4
 8004fd8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004fdc:	601a      	str	r2, [r3, #0]
    break;
 8004fde:	bf00      	nop
  }
}
 8004fe0:	bf00      	nop
 8004fe2:	3714      	adds	r7, #20
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <IWDG_WriteAccessCmd>:
  *     @arg IWDG_WriteAccess_Enable: Enable write access to IWDG_PR and IWDG_RLR registers
  *     @arg IWDG_WriteAccess_Disable: Disable write access to IWDG_PR and IWDG_RLR registers
  * @retval None
  */
void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
  IWDG->KR = IWDG_WriteAccess;
 8004ff6:	4a04      	ldr	r2, [pc, #16]	; (8005008 <IWDG_WriteAccessCmd+0x1c>)
 8004ff8:	88fb      	ldrh	r3, [r7, #6]
 8004ffa:	6013      	str	r3, [r2, #0]
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr
 8005008:	40003000 	.word	0x40003000

0800500c <IWDG_SetPrescaler>:
  *     @arg IWDG_Prescaler_128: IWDG prescaler set to 128
  *     @arg IWDG_Prescaler_256: IWDG prescaler set to 256
  * @retval None
  */
void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	4603      	mov	r3, r0
 8005014:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
  IWDG->PR = IWDG_Prescaler;
 8005016:	4a04      	ldr	r2, [pc, #16]	; (8005028 <IWDG_SetPrescaler+0x1c>)
 8005018:	79fb      	ldrb	r3, [r7, #7]
 800501a:	6053      	str	r3, [r2, #4]
}
 800501c:	bf00      	nop
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr
 8005028:	40003000 	.word	0x40003000

0800502c <IWDG_SetReload>:
  * @param  Reload: specifies the IWDG Reload value.
  *   This parameter must be a number between 0 and 0x0FFF.
  * @retval None
  */
void IWDG_SetReload(uint16_t Reload)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	4603      	mov	r3, r0
 8005034:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_IWDG_RELOAD(Reload));
  IWDG->RLR = Reload;
 8005036:	4a04      	ldr	r2, [pc, #16]	; (8005048 <IWDG_SetReload+0x1c>)
 8005038:	88fb      	ldrh	r3, [r7, #6]
 800503a:	6093      	str	r3, [r2, #8]
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr
 8005048:	40003000 	.word	0x40003000

0800504c <IWDG_ReloadCounter>:
  *   (write access to IWDG_PR and IWDG_RLR registers disabled).
  * @param  None
  * @retval None
  */
void IWDG_ReloadCounter(void)
{
 800504c:	b480      	push	{r7}
 800504e:	af00      	add	r7, sp, #0
  IWDG->KR = KR_KEY_RELOAD;
 8005050:	4b04      	ldr	r3, [pc, #16]	; (8005064 <IWDG_ReloadCounter+0x18>)
 8005052:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005056:	601a      	str	r2, [r3, #0]
}
 8005058:	bf00      	nop
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	40003000 	.word	0x40003000

08005068 <IWDG_SetWindowValue>:
  * @brief  Sets the IWDG window value.
  * @param  WindowValue: specifies the window value to be compared to the downcounter.
  * @retval None
  */
void IWDG_SetWindowValue(uint16_t WindowValue)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	4603      	mov	r3, r0
 8005070:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_IWDG_WINDOW_VALUE(WindowValue));
  IWDG->WINR = WindowValue;
 8005072:	4a04      	ldr	r2, [pc, #16]	; (8005084 <IWDG_SetWindowValue+0x1c>)
 8005074:	88fb      	ldrh	r3, [r7, #6]
 8005076:	6113      	str	r3, [r2, #16]
}
 8005078:	bf00      	nop
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	40003000 	.word	0x40003000

08005088 <IWDG_Enable>:
  * @brief  Enables IWDG (write access to IWDG_PR and IWDG_RLR registers disabled).
  * @param  None
  * @retval None
  */
void IWDG_Enable(void)
{
 8005088:	b480      	push	{r7}
 800508a:	af00      	add	r7, sp, #0
  IWDG->KR = KR_KEY_ENABLE;
 800508c:	4b04      	ldr	r3, [pc, #16]	; (80050a0 <IWDG_Enable+0x18>)
 800508e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8005092:	601a      	str	r2, [r3, #0]
}
 8005094:	bf00      	nop
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	40003000 	.word	0x40003000

080050a4 <IWDG_GetFlagStatus>:
  *     @arg IWDG_FLAG_RVU: Reload Value Update on going
  *     @arg IWDG_FLAG_WVU: Counter Window Value Update on going
  * @retval The new state of IWDG_FLAG (SET or RESET).
  */
FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	4603      	mov	r3, r0
 80050ac:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
 80050ae:	2300      	movs	r3, #0
 80050b0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_IWDG_FLAG(IWDG_FLAG));
  if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
 80050b2:	4b09      	ldr	r3, [pc, #36]	; (80050d8 <IWDG_GetFlagStatus+0x34>)
 80050b4:	68da      	ldr	r2, [r3, #12]
 80050b6:	88fb      	ldrh	r3, [r7, #6]
 80050b8:	4013      	ands	r3, r2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d002      	beq.n	80050c4 <IWDG_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 80050be:	2301      	movs	r3, #1
 80050c0:	73fb      	strb	r3, [r7, #15]
 80050c2:	e001      	b.n	80050c8 <IWDG_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 80050c4:	2300      	movs	r3, #0
 80050c6:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 80050c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3714      	adds	r7, #20
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	40003000 	.word	0x40003000

080050dc <NVIC_PriorityGroupConfig>:
  *     @note When NVIC_PriorityGroup_0 is selected, it will no be any nested 
  *           interrupt. This interrupts priority is managed only with subpriority.                                    
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80050e4:	4a06      	ldr	r2, [pc, #24]	; (8005100 <NVIC_PriorityGroupConfig+0x24>)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80050ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050f0:	60d3      	str	r3, [r2, #12]
}
 80050f2:	bf00      	nop
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	e000ed00 	.word	0xe000ed00

08005104 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8005104:	b480      	push	{r7}
 8005106:	b087      	sub	sp, #28
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 800510c:	2300      	movs	r3, #0
 800510e:	617b      	str	r3, [r7, #20]
 8005110:	2300      	movs	r3, #0
 8005112:	613b      	str	r3, [r7, #16]
 8005114:	230f      	movs	r3, #15
 8005116:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	78db      	ldrb	r3, [r3, #3]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d03a      	beq.n	8005196 <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8005120:	4b28      	ldr	r3, [pc, #160]	; (80051c4 <NVIC_Init+0xc0>)
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	43db      	mvns	r3, r3
 8005126:	0a1b      	lsrs	r3, r3, #8
 8005128:	f003 0307 	and.w	r3, r3, #7
 800512c:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f1c3 0304 	rsb	r3, r3, #4
 8005134:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	fa22 f303 	lsr.w	r3, r2, r3
 800513e:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	785b      	ldrb	r3, [r3, #1]
 8005144:	461a      	mov	r2, r3
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	fa02 f303 	lsl.w	r3, r2, r3
 800514c:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	789b      	ldrb	r3, [r3, #2]
 8005152:	461a      	mov	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4013      	ands	r3, r2
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	4313      	orrs	r3, r2
 800515c:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	011b      	lsls	r3, r3, #4
 8005162:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8005164:	4a18      	ldr	r2, [pc, #96]	; (80051c8 <NVIC_Init+0xc4>)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	6979      	ldr	r1, [r7, #20]
 800516c:	b2c9      	uxtb	r1, r1
 800516e:	4413      	add	r3, r2
 8005170:	460a      	mov	r2, r1
 8005172:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005176:	4a14      	ldr	r2, [pc, #80]	; (80051c8 <NVIC_Init+0xc4>)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	095b      	lsrs	r3, r3, #5
 800517e:	b2db      	uxtb	r3, r3
 8005180:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	f003 031f 	and.w	r3, r3, #31
 800518a:	2101      	movs	r1, #1
 800518c:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005190:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8005194:	e00f      	b.n	80051b6 <NVIC_Init+0xb2>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005196:	490c      	ldr	r1, [pc, #48]	; (80051c8 <NVIC_Init+0xc4>)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	095b      	lsrs	r3, r3, #5
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	f003 031f 	and.w	r3, r3, #31
 80051aa:	2201      	movs	r2, #1
 80051ac:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80051ae:	f100 0320 	add.w	r3, r0, #32
 80051b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80051b6:	bf00      	nop
 80051b8:	371c      	adds	r7, #28
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	e000ed00 	.word	0xe000ed00
 80051c8:	e000e100 	.word	0xe000e100

080051cc <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 80051d6:	4907      	ldr	r1, [pc, #28]	; (80051f4 <NVIC_SetVectorTable+0x28>)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80051de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	608b      	str	r3, [r1, #8]
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr
 80051f4:	e000ed00 	.word	0xe000ed00

080051f8 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	4603      	mov	r3, r0
 8005200:	460a      	mov	r2, r1
 8005202:	71fb      	strb	r3, [r7, #7]
 8005204:	4613      	mov	r3, r2
 8005206:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8005208:	79bb      	ldrb	r3, [r7, #6]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d006      	beq.n	800521c <NVIC_SystemLPConfig+0x24>
  {
    SCB->SCR |= LowPowerMode;
 800520e:	490a      	ldr	r1, [pc, #40]	; (8005238 <NVIC_SystemLPConfig+0x40>)
 8005210:	4b09      	ldr	r3, [pc, #36]	; (8005238 <NVIC_SystemLPConfig+0x40>)
 8005212:	691a      	ldr	r2, [r3, #16]
 8005214:	79fb      	ldrb	r3, [r7, #7]
 8005216:	4313      	orrs	r3, r2
 8005218:	610b      	str	r3, [r1, #16]
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
  }
}
 800521a:	e006      	b.n	800522a <NVIC_SystemLPConfig+0x32>
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 800521c:	4906      	ldr	r1, [pc, #24]	; (8005238 <NVIC_SystemLPConfig+0x40>)
 800521e:	4b06      	ldr	r3, [pc, #24]	; (8005238 <NVIC_SystemLPConfig+0x40>)
 8005220:	691a      	ldr	r2, [r3, #16]
 8005222:	79fb      	ldrb	r3, [r7, #7]
 8005224:	43db      	mvns	r3, r3
 8005226:	4013      	ands	r3, r2
 8005228:	610b      	str	r3, [r1, #16]
}
 800522a:	bf00      	nop
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	e000ed00 	.word	0xe000ed00

0800523c <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b04      	cmp	r3, #4
 8005248:	d106      	bne.n	8005258 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 800524a:	4a09      	ldr	r2, [pc, #36]	; (8005270 <SysTick_CLKSourceConfig+0x34>)
 800524c:	4b08      	ldr	r3, [pc, #32]	; (8005270 <SysTick_CLKSourceConfig+0x34>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f043 0304 	orr.w	r3, r3, #4
 8005254:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
  }
}
 8005256:	e005      	b.n	8005264 <SysTick_CLKSourceConfig+0x28>
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8005258:	4a05      	ldr	r2, [pc, #20]	; (8005270 <SysTick_CLKSourceConfig+0x34>)
 800525a:	4b05      	ldr	r3, [pc, #20]	; (8005270 <SysTick_CLKSourceConfig+0x34>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f023 0304 	bic.w	r3, r3, #4
 8005262:	6013      	str	r3, [r2, #0]
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr
 8005270:	e000e010 	.word	0xe000e010

08005274 <OPAMP_DeInit>:
  *          to select the OPAMP peripheral.
  * @param  None
  * @retval None
  */
void OPAMP_DeInit(uint32_t OPAMP_Selection)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  /*!< Set OPAMP_CSR register to reset value */
  *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection) = ((uint32_t)0x00000000);
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	4b05      	ldr	r3, [pc, #20]	; (8005294 <OPAMP_DeInit+0x20>)
 8005280:	4413      	add	r3, r2
 8005282:	461a      	mov	r2, r3
 8005284:	2300      	movs	r3, #0
 8005286:	6013      	str	r3, [r2, #0]
}
 8005288:	bf00      	nop
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr
 8005294:	40010038 	.word	0x40010038

08005298 <OPAMP_Init>:
  *           - OPAMP_InvertingInput specifies the inverting input of OPAMP
  *           - OPAMP_NonInvertingInput specifies the non inverting input of OPAMP
  * @retval None
  */
void OPAMP_Init(uint32_t OPAMP_Selection, OPAMP_InitTypeDef* OPAMP_InitStruct)
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80052a2:	2300      	movs	r3, #0
 80052a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_OPAMP_ALL_PERIPH(OPAMP_Selection));
  assert_param(IS_OPAMP_INVERTING_INPUT(OPAMP_InitStruct->OPAMP_InvertingInput));
  assert_param(IS_OPAMP_NONINVERTING_INPUT(OPAMP_InitStruct->OPAMP_NonInvertingInput));

  /*!< Get the OPAMPx_CSR register value */
  tmpreg = *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection);
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	4b0d      	ldr	r3, [pc, #52]	; (80052e0 <OPAMP_Init+0x48>)
 80052aa:	4413      	add	r3, r2
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	60fb      	str	r3, [r7, #12]

  /*!< Clear the inverting and non inverting bits selection bits */
  tmpreg &= (uint32_t) (OPAMP_CSR_DEFAULT_MASK);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f023 036c 	bic.w	r3, r3, #108	; 0x6c
 80052b6:	60fb      	str	r3, [r7, #12]

  /*!< Configure OPAMP: inverting and non inverting inputs */
  tmpreg |= (uint32_t)(OPAMP_InitStruct->OPAMP_InvertingInput | OPAMP_InitStruct->OPAMP_NonInvertingInput);
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	60fb      	str	r3, [r7, #12]

  /*!< Write to OPAMPx_CSR register */
  *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection) = tmpreg;
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	4b05      	ldr	r3, [pc, #20]	; (80052e0 <OPAMP_Init+0x48>)
 80052cc:	4413      	add	r3, r2
 80052ce:	461a      	mov	r2, r3
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6013      	str	r3, [r2, #0]
}
 80052d4:	bf00      	nop
 80052d6:	3714      	adds	r7, #20
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr
 80052e0:	40010038 	.word	0x40010038

080052e4 <OPAMP_StructInit>:
  * @param  OPAMP_InitStruct: pointer to an OPAMP_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void OPAMP_StructInit(OPAMP_InitTypeDef* OPAMP_InitStruct)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  OPAMP_InitStruct->OPAMP_NonInvertingInput = OPAMP_NonInvertingInput_IO1;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	605a      	str	r2, [r3, #4]
  OPAMP_InitStruct->OPAMP_InvertingInput = OPAMP_InvertingInput_IO1;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	601a      	str	r2, [r3, #0]
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <OPAMP_PGAConfig>:
  * @param  NewState: new state of the OPAMP peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void OPAMP_PGAConfig(uint32_t OPAMP_Selection, uint32_t OPAMP_PGAGain, uint32_t OPAMP_PGAConnect)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
  assert_param(IS_OPAMP_ALL_PERIPH(OPAMP_Selection));
  assert_param(IS_OPAMP_PGAGAIN(OPAMP_PGAGain));
  assert_param(IS_OPAMP_PGACONNECT(OPAMP_PGAConnect));

  /* Reset the configuration bits */
  *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection) &= (uint32_t)(~OPAMP_CSR_PGGAIN);
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	4b0e      	ldr	r3, [pc, #56]	; (800534c <OPAMP_PGAConfig+0x48>)
 8005314:	4413      	add	r3, r2
 8005316:	4619      	mov	r1, r3
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	4b0c      	ldr	r3, [pc, #48]	; (800534c <OPAMP_PGAConfig+0x48>)
 800531c:	4413      	add	r3, r2
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f423 3370 	bic.w	r3, r3, #245760	; 0x3c000
 8005324:	600b      	str	r3, [r1, #0]

  /* Set the new configuration */
  *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection) |= (uint32_t) (OPAMP_PGAGain | OPAMP_PGAConnect);
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	4b08      	ldr	r3, [pc, #32]	; (800534c <OPAMP_PGAConfig+0x48>)
 800532a:	4413      	add	r3, r2
 800532c:	4618      	mov	r0, r3
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	4b06      	ldr	r3, [pc, #24]	; (800534c <OPAMP_PGAConfig+0x48>)
 8005332:	4413      	add	r3, r2
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	68b9      	ldr	r1, [r7, #8]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	430b      	orrs	r3, r1
 800533c:	4313      	orrs	r3, r2
 800533e:	6003      	str	r3, [r0, #0]
}
 8005340:	bf00      	nop
 8005342:	3714      	adds	r7, #20
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr
 800534c:	40010038 	.word	0x40010038

08005350 <OPAMP_VrefConfig>:
  *           OPAMP_Vref_50VDDA: OPMAP Vref = 50% VDDA
  *           OPAMP_Vref_90VDDA: OPMAP Vref = 90% VDDA
  * @retval None
  */
void OPAMP_VrefConfig(uint32_t OPAMP_Selection, uint32_t OPAMP_Vref)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800535a:	2300      	movs	r3, #0
 800535c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_OPAMP_ALL_PERIPH(OPAMP_Selection));
  assert_param(IS_OPAMP_VREF(OPAMP_Vref));

  /*!< Get the OPAMPx_CSR register value */
  tmpreg = *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection);
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	4b0b      	ldr	r3, [pc, #44]	; (8005390 <OPAMP_VrefConfig+0x40>)
 8005362:	4413      	add	r3, r2
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	60fb      	str	r3, [r7, #12]

  /*!< Clear the CALSEL bits */
  tmpreg &= (uint32_t) (~OPAMP_CSR_CALSEL);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800536e:	60fb      	str	r3, [r7, #12]

  /*!< Configure OPAMP reference */
  tmpreg |= (uint32_t)(OPAMP_Vref);
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	4313      	orrs	r3, r2
 8005376:	60fb      	str	r3, [r7, #12]

  /*!< Write to OPAMPx_CSR register */
  *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection) = tmpreg;
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	4b05      	ldr	r3, [pc, #20]	; (8005390 <OPAMP_VrefConfig+0x40>)
 800537c:	4413      	add	r3, r2
 800537e:	461a      	mov	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6013      	str	r3, [r2, #0]
}
 8005384:	bf00      	nop
 8005386:	3714      	adds	r7, #20
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr
 8005390:	40010038 	.word	0x40010038

08005394 <OPAMP_VrefConnectNonInvertingInput>:
  * @param  NewState: new state of the OPAMP peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void OPAMP_VrefConnectNonInvertingInput(uint32_t OPAMP_Selection, FunctionalState NewState)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	460b      	mov	r3, r1
 800539e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_OPAMP_ALL_PERIPH(OPAMP_Selection));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80053a0:	78fb      	ldrb	r3, [r7, #3]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00b      	beq.n	80053be <OPAMP_VrefConnectNonInvertingInput+0x2a>
  {
    /* Connect the internal reference to the OPAMP's non inverting input */
    *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection) |= (uint32_t) (OPAMP_CSR_FORCEVP);
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	4b0d      	ldr	r3, [pc, #52]	; (80053e0 <OPAMP_VrefConnectNonInvertingInput+0x4c>)
 80053aa:	4413      	add	r3, r2
 80053ac:	4619      	mov	r1, r3
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	4b0b      	ldr	r3, [pc, #44]	; (80053e0 <OPAMP_VrefConnectNonInvertingInput+0x4c>)
 80053b2:	4413      	add	r3, r2
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f043 0302 	orr.w	r3, r3, #2
 80053ba:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disconnect the internal reference to the OPAMP's non inverting input */
    *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection) &= (uint32_t)(~OPAMP_CSR_FORCEVP);
  }
}
 80053bc:	e00a      	b.n	80053d4 <OPAMP_VrefConnectNonInvertingInput+0x40>
    *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection) &= (uint32_t)(~OPAMP_CSR_FORCEVP);
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	4b07      	ldr	r3, [pc, #28]	; (80053e0 <OPAMP_VrefConnectNonInvertingInput+0x4c>)
 80053c2:	4413      	add	r3, r2
 80053c4:	4619      	mov	r1, r3
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	4b05      	ldr	r3, [pc, #20]	; (80053e0 <OPAMP_VrefConnectNonInvertingInput+0x4c>)
 80053ca:	4413      	add	r3, r2
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f023 0302 	bic.w	r3, r3, #2
 80053d2:	600b      	str	r3, [r1, #0]
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr
 80053e0:	40010038 	.word	0x40010038

080053e4 <OPAMP_VrefConnectADCCmd>:
  * @param  NewState: new state of the Vrefint output.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void OPAMP_VrefConnectADCCmd(uint32_t OPAMP_Selection, FunctionalState NewState)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	460b      	mov	r3, r1
 80053ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_OPAMP_ALL_PERIPH(OPAMP_Selection));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80053f0:	78fb      	ldrb	r3, [r7, #3]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00b      	beq.n	800540e <OPAMP_VrefConnectADCCmd+0x2a>
  {
    /* Enable output internal reference */
    *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection) |= (uint32_t) (OPAMP_CSR_TSTREF);
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	4b0d      	ldr	r3, [pc, #52]	; (8005430 <OPAMP_VrefConnectADCCmd+0x4c>)
 80053fa:	4413      	add	r3, r2
 80053fc:	4619      	mov	r1, r3
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	4b0b      	ldr	r3, [pc, #44]	; (8005430 <OPAMP_VrefConnectADCCmd+0x4c>)
 8005402:	4413      	add	r3, r2
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800540a:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable output internal reference */
    *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection) &= (uint32_t)(~OPAMP_CSR_TSTREF);
  }
}
 800540c:	e00a      	b.n	8005424 <OPAMP_VrefConnectADCCmd+0x40>
    *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection) &= (uint32_t)(~OPAMP_CSR_TSTREF);
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	4b07      	ldr	r3, [pc, #28]	; (8005430 <OPAMP_VrefConnectADCCmd+0x4c>)
 8005412:	4413      	add	r3, r2
 8005414:	4619      	mov	r1, r3
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	4b05      	ldr	r3, [pc, #20]	; (8005430 <OPAMP_VrefConnectADCCmd+0x4c>)
 800541a:	4413      	add	r3, r2
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005422:	600b      	str	r3, [r1, #0]
}
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr
 8005430:	40010038 	.word	0x40010038

08005434 <OPAMP_TimerControlledMuxConfig>:
  *           - OPAMP_NonInvertingInput specifies the non inverting input of OPAMP
  * @note   PGA and Vout can't be selected as secondary inverting input.
  * @retval None
  */
void OPAMP_TimerControlledMuxConfig(uint32_t OPAMP_Selection, OPAMP_InitTypeDef* OPAMP_InitStruct)
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800543e:	2300      	movs	r3, #0
 8005440:	60fb      	str	r3, [r7, #12]
  assert_param(IS_OPAMP_ALL_PERIPH(OPAMP_Selection));
  assert_param(IS_OPAMP_SECONDARY_INVINPUT(OPAMP_InitStruct->OPAMP_InvertingInput));
  assert_param(IS_OPAMP_NONINVERTING_INPUT(OPAMP_InitStruct->OPAMP_NonInvertingInput));

  /*!< Get the OPAMPx_CSR register value */
  tmpreg = *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection);
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	4b0e      	ldr	r3, [pc, #56]	; (8005480 <OPAMP_TimerControlledMuxConfig+0x4c>)
 8005446:	4413      	add	r3, r2
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	60fb      	str	r3, [r7, #12]

  /*!< Clear the secondary inverting bit, secondary non inverting bit and TCMEN bits */
  tmpreg &= (uint32_t) (OPAMP_CSR_TIMERMUX_MASK);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005452:	60fb      	str	r3, [r7, #12]

  /*!< Configure OPAMP: secondary inverting and non inverting inputs */
  tmpreg |= (uint32_t)((uint32_t)(OPAMP_InitStruct->OPAMP_InvertingInput<<3) | (uint32_t)(OPAMP_InitStruct->OPAMP_NonInvertingInput<<7));
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	00da      	lsls	r2, r3, #3
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	01db      	lsls	r3, r3, #7
 8005460:	4313      	orrs	r3, r2
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	4313      	orrs	r3, r2
 8005466:	60fb      	str	r3, [r7, #12]

  /*!< Write to OPAMPx_CSR register */
  *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection) = tmpreg;
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	4b05      	ldr	r3, [pc, #20]	; (8005480 <OPAMP_TimerControlledMuxConfig+0x4c>)
 800546c:	4413      	add	r3, r2
 800546e:	461a      	mov	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6013      	str	r3, [r2, #0]
}
 8005474:	bf00      	nop
 8005476:	3714      	adds	r7, #20
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr
 8005480:	40010038 	.word	0x40010038

08005484 <OPAMP_TimerControlledMuxCmd>:
  * @param  NewState: new state of the OPAMP peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void OPAMP_TimerControlledMuxCmd(uint32_t OPAMP_Selection, FunctionalState NewState)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	460b      	mov	r3, r1
 800548e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_OPAMP_ALL_PERIPH(OPAMP_Selection));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005490:	78fb      	ldrb	r3, [r7, #3]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00b      	beq.n	80054ae <OPAMP_TimerControlledMuxCmd+0x2a>
  {
    /* Enable the timer-controlled Mux mode */
    *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection) |= (uint32_t) (OPAMP_CSR_TCMEN);
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	4b0d      	ldr	r3, [pc, #52]	; (80054d0 <OPAMP_TimerControlledMuxCmd+0x4c>)
 800549a:	4413      	add	r3, r2
 800549c:	4619      	mov	r1, r3
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	4b0b      	ldr	r3, [pc, #44]	; (80054d0 <OPAMP_TimerControlledMuxCmd+0x4c>)
 80054a2:	4413      	add	r3, r2
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054aa:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the timer-controlled Mux mode */
    *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection) &= (uint32_t)(~OPAMP_CSR_TCMEN);
  }
}
 80054ac:	e00a      	b.n	80054c4 <OPAMP_TimerControlledMuxCmd+0x40>
    *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection) &= (uint32_t)(~OPAMP_CSR_TCMEN);
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	4b07      	ldr	r3, [pc, #28]	; (80054d0 <OPAMP_TimerControlledMuxCmd+0x4c>)
 80054b2:	4413      	add	r3, r2
 80054b4:	4619      	mov	r1, r3
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	4b05      	ldr	r3, [pc, #20]	; (80054d0 <OPAMP_TimerControlledMuxCmd+0x4c>)
 80054ba:	4413      	add	r3, r2
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054c2:	600b      	str	r3, [r1, #0]
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr
 80054d0:	40010038 	.word	0x40010038

080054d4 <OPAMP_Cmd>:
  * @param  NewState: new state of the OPAMP peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void OPAMP_Cmd(uint32_t OPAMP_Selection, FunctionalState NewState)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	460b      	mov	r3, r1
 80054de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_OPAMP_ALL_PERIPH(OPAMP_Selection));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80054e0:	78fb      	ldrb	r3, [r7, #3]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00b      	beq.n	80054fe <OPAMP_Cmd+0x2a>
  {
    /* Enable the selected OPAMPx peripheral */
    *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection) |= (uint32_t) (OPAMP_CSR_OPAMPxEN);
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	4b0d      	ldr	r3, [pc, #52]	; (8005520 <OPAMP_Cmd+0x4c>)
 80054ea:	4413      	add	r3, r2
 80054ec:	4619      	mov	r1, r3
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	4b0b      	ldr	r3, [pc, #44]	; (8005520 <OPAMP_Cmd+0x4c>)
 80054f2:	4413      	add	r3, r2
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f043 0301 	orr.w	r3, r3, #1
 80054fa:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected OPAMPx peripheral */
    *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection) &= (uint32_t)(~OPAMP_CSR_OPAMPxEN);
  }
}
 80054fc:	e00a      	b.n	8005514 <OPAMP_Cmd+0x40>
    *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection) &= (uint32_t)(~OPAMP_CSR_OPAMPxEN);
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	4b07      	ldr	r3, [pc, #28]	; (8005520 <OPAMP_Cmd+0x4c>)
 8005502:	4413      	add	r3, r2
 8005504:	4619      	mov	r1, r3
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	4b05      	ldr	r3, [pc, #20]	; (8005520 <OPAMP_Cmd+0x4c>)
 800550a:	4413      	add	r3, r2
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f023 0301 	bic.w	r3, r3, #1
 8005512:	600b      	str	r3, [r1, #0]
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr
 8005520:	40010038 	.word	0x40010038

08005524 <OPAMP_GetOutputLevel>:
  * @note OPAMP output level is provided only during calibration phase.
  * @retval Returns the selected OPAMP output level: low or high.
  *       
  */
uint32_t OPAMP_GetOutputLevel(uint32_t OPAMP_Selection)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  uint32_t opampout = 0x0;
 800552c:	2300      	movs	r3, #0
 800552e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_OPAMP_ALL_PERIPH(OPAMP_Selection));

  /* Check if selected OPAMP output is high */
  if ((*(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection) & (OPAMP_CSR_OUTCAL)) != 0)
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	4b0a      	ldr	r3, [pc, #40]	; (800555c <OPAMP_GetOutputLevel+0x38>)
 8005534:	4413      	add	r3, r2
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d003      	beq.n	8005548 <OPAMP_GetOutputLevel+0x24>
  {
    opampout = OPAMP_OutputLevel_High;
 8005540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005544:	60fb      	str	r3, [r7, #12]
 8005546:	e001      	b.n	800554c <OPAMP_GetOutputLevel+0x28>
  }
  else
  {
    opampout = OPAMP_OutputLevel_Low;
 8005548:	2300      	movs	r3, #0
 800554a:	60fb      	str	r3, [r7, #12]
  }

  /* Return the OPAMP output level */
  return (uint32_t)(opampout);
 800554c:	68fb      	ldr	r3, [r7, #12]
}
 800554e:	4618      	mov	r0, r3
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	40010038 	.word	0x40010038

08005560 <OPAMP_OffsetTrimModeSelect>:
  *       function or OPAMP_OffsetTrimLowPowerConfig() function to adjust 
  *       trimming value.
  * @retval None
  */
void OPAMP_OffsetTrimModeSelect(uint32_t OPAMP_Selection, uint32_t OPAMP_Trimming)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_OPAMP_ALL_PERIPH(OPAMP_Selection));
  assert_param(IS_OPAMP_TRIMMING(OPAMP_Trimming));

  /* Reset USERTRIM bit */
  *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection) &= (~(uint32_t) (OPAMP_CSR_USERTRIM));
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	4b0d      	ldr	r3, [pc, #52]	; (80055a4 <OPAMP_OffsetTrimModeSelect+0x44>)
 800556e:	4413      	add	r3, r2
 8005570:	4619      	mov	r1, r3
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	4b0b      	ldr	r3, [pc, #44]	; (80055a4 <OPAMP_OffsetTrimModeSelect+0x44>)
 8005576:	4413      	add	r3, r2
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800557e:	600b      	str	r3, [r1, #0]

  /* Select trimming mode */
  *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection) |= OPAMP_Trimming;
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	4b08      	ldr	r3, [pc, #32]	; (80055a4 <OPAMP_OffsetTrimModeSelect+0x44>)
 8005584:	4413      	add	r3, r2
 8005586:	4619      	mov	r1, r3
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	4b06      	ldr	r3, [pc, #24]	; (80055a4 <OPAMP_OffsetTrimModeSelect+0x44>)
 800558c:	4413      	add	r3, r2
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	4313      	orrs	r3, r2
 8005594:	600b      	str	r3, [r1, #0]
}
 8005596:	bf00      	nop
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	40010038 	.word	0x40010038

080055a8 <OPAMP_OffsetTrimConfig>:
  * @param  OPAMP_TrimValue: the trimming value. This parameter can be any value lower
  *         or equal to 0x0000001F. 
  * @retval None
  */
void OPAMP_OffsetTrimConfig(uint32_t OPAMP_Selection, uint32_t OPAMP_Input, uint32_t OPAMP_TrimValue)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b087      	sub	sp, #28
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80055b4:	2300      	movs	r3, #0
 80055b6:	617b      	str	r3, [r7, #20]
  assert_param(IS_OPAMP_ALL_PERIPH(OPAMP_Selection));
  assert_param(IS_OPAMP_INPUT(OPAMP_Input));
  assert_param(IS_OPAMP_TRIMMINGVALUE(OPAMP_TrimValue));

  /*!< Get the OPAMPx_CSR register value */
  tmpreg = *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection);
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	4b0f      	ldr	r3, [pc, #60]	; (80055f8 <OPAMP_OffsetTrimConfig+0x50>)
 80055bc:	4413      	add	r3, r2
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	617b      	str	r3, [r7, #20]

  /*!< Clear the trimming bits */
  tmpreg &= ((uint32_t)~(OPAMP_CSR_TRIMMING_MASK<<OPAMP_Input));
 80055c2:	221f      	movs	r2, #31
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ca:	43db      	mvns	r3, r3
 80055cc:	697a      	ldr	r2, [r7, #20]
 80055ce:	4013      	ands	r3, r2
 80055d0:	617b      	str	r3, [r7, #20]

  /*!< Configure the new trimming value */
  tmpreg |= (uint32_t)(OPAMP_TrimValue<<OPAMP_Input);
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	fa02 f303 	lsl.w	r3, r2, r3
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	4313      	orrs	r3, r2
 80055de:	617b      	str	r3, [r7, #20]

  /*!< Write to OPAMPx_CSR register */
  *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection) = tmpreg;
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	4b05      	ldr	r3, [pc, #20]	; (80055f8 <OPAMP_OffsetTrimConfig+0x50>)
 80055e4:	4413      	add	r3, r2
 80055e6:	461a      	mov	r2, r3
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	6013      	str	r3, [r2, #0]
}
 80055ec:	bf00      	nop
 80055ee:	371c      	adds	r7, #28
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr
 80055f8:	40010038 	.word	0x40010038

080055fc <OPAMP_StartCalibration>:
  * @param  NewState: new state of the OPAMP peripheral.
  *         This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void OPAMP_StartCalibration(uint32_t OPAMP_Selection, FunctionalState NewState)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	460b      	mov	r3, r1
 8005606:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_OPAMP_ALL_PERIPH(OPAMP_Selection));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005608:	78fb      	ldrb	r3, [r7, #3]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00b      	beq.n	8005626 <OPAMP_StartCalibration+0x2a>
  {
    /* Start the OPAMPx calibration */
    *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection) |= (uint32_t) (OPAMP_CSR_CALON);
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	4b0d      	ldr	r3, [pc, #52]	; (8005648 <OPAMP_StartCalibration+0x4c>)
 8005612:	4413      	add	r3, r2
 8005614:	4619      	mov	r1, r3
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	4b0b      	ldr	r3, [pc, #44]	; (8005648 <OPAMP_StartCalibration+0x4c>)
 800561a:	4413      	add	r3, r2
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005622:	600b      	str	r3, [r1, #0]
  else
  {
    /* Stop the OPAMPx calibration */
    *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection) &= (uint32_t)(~OPAMP_CSR_CALON);
  }
}
 8005624:	e00a      	b.n	800563c <OPAMP_StartCalibration+0x40>
    *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection) &= (uint32_t)(~OPAMP_CSR_CALON);
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	4b07      	ldr	r3, [pc, #28]	; (8005648 <OPAMP_StartCalibration+0x4c>)
 800562a:	4413      	add	r3, r2
 800562c:	4619      	mov	r1, r3
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	4b05      	ldr	r3, [pc, #20]	; (8005648 <OPAMP_StartCalibration+0x4c>)
 8005632:	4413      	add	r3, r2
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800563a:	600b      	str	r3, [r1, #0]
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	40010038 	.word	0x40010038

0800564c <OPAMP_LockConfig>:
  *          This parameter can be OPAMP_Selection_OPAMPx where x can be 1 to 4
  *          to select the OPAMP peripheral.
  * @retval None
  */
void OPAMP_LockConfig(uint32_t OPAMP_Selection)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_OPAMP_ALL_PERIPH(OPAMP_Selection));

  /* Set the lock bit corresponding to selected OPAMP */
  *(__IO uint32_t *) (OPAMP_BASE + OPAMP_Selection) |= (uint32_t) (OPAMP_CSR_LOCK);
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	4b08      	ldr	r3, [pc, #32]	; (8005678 <OPAMP_LockConfig+0x2c>)
 8005658:	4413      	add	r3, r2
 800565a:	4619      	mov	r1, r3
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	4b06      	ldr	r3, [pc, #24]	; (8005678 <OPAMP_LockConfig+0x2c>)
 8005660:	4413      	add	r3, r2
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005668:	600b      	str	r3, [r1, #0]
}
 800566a:	bf00      	nop
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	40010038 	.word	0x40010038

0800567c <PWR_DeInit>:
  * @brief  Deinitializes the PWR peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void PWR_DeInit(void)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	af00      	add	r7, sp, #0
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
 8005680:	2101      	movs	r1, #1
 8005682:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8005686:	f000 ffa1 	bl	80065cc <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
 800568a:	2100      	movs	r1, #0
 800568c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8005690:	f000 ff9c 	bl	80065cc <RCC_APB1PeriphResetCmd>
}
 8005694:	bf00      	nop
 8005696:	bd80      	pop	{r7, pc}

08005698 <PWR_BackupAccessCmd>:
  * @param  NewState: new state of the access to the RTC and backup registers.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupAccessCmd(FunctionalState NewState)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	4603      	mov	r3, r0
 80056a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 80056a2:	4a04      	ldr	r2, [pc, #16]	; (80056b4 <PWR_BackupAccessCmd+0x1c>)
 80056a4:	79fb      	ldrb	r3, [r7, #7]
 80056a6:	6013      	str	r3, [r2, #0]
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr
 80056b4:	420e0020 	.word	0x420e0020

080056b8 <PWR_PVDLevelConfig>:
  *             @arg PWR_PVDLevel_6: PVD detection level set to 2.78V
  *             @arg PWR_PVDLevel_7: PVD detection level set to 2.88V
  * @retval None
  */
void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80056c0:	2300      	movs	r3, #0
 80056c2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
  
  tmpreg = PWR->CR;
 80056c4:	4b09      	ldr	r3, [pc, #36]	; (80056ec <PWR_PVDLevelConfig+0x34>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	60fb      	str	r3, [r7, #12]
  
  /* Clear PLS[7:5] bits */
  tmpreg &= CR_PLS_MASK;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80056d0:	60fb      	str	r3, [r7, #12]
  
  /* Set PLS[7:5] bits according to PWR_PVDLevel value */
  tmpreg |= PWR_PVDLevel;
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 80056da:	4a04      	ldr	r2, [pc, #16]	; (80056ec <PWR_PVDLevelConfig+0x34>)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6013      	str	r3, [r2, #0]
}
 80056e0:	bf00      	nop
 80056e2:	3714      	adds	r7, #20
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr
 80056ec:	40007000 	.word	0x40007000

080056f0 <PWR_PVDCmd>:
  * @param  NewState: new state of the PVD.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_PVDCmd(FunctionalState NewState)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	4603      	mov	r3, r0
 80056f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
 80056fa:	4a04      	ldr	r2, [pc, #16]	; (800570c <PWR_PVDCmd+0x1c>)
 80056fc:	79fb      	ldrb	r3, [r7, #7]
 80056fe:	6013      	str	r3, [r2, #0]
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr
 800570c:	420e0010 	.word	0x420e0010

08005710 <PWR_WakeUpPinCmd>:
  * @param  NewState: new state of the WakeUp Pin functionality.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_WakeUpPinCmd(uint32_t PWR_WakeUpPin, FunctionalState NewState)
{  
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	460b      	mov	r3, r1
 800571a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_WAKEUP_PIN(PWR_WakeUpPin));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800571c:	78fb      	ldrb	r3, [r7, #3]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d006      	beq.n	8005730 <PWR_WakeUpPinCmd+0x20>
  {
    /* Enable the EWUPx pin */
    PWR->CSR |= PWR_WakeUpPin;
 8005722:	490a      	ldr	r1, [pc, #40]	; (800574c <PWR_WakeUpPinCmd+0x3c>)
 8005724:	4b09      	ldr	r3, [pc, #36]	; (800574c <PWR_WakeUpPinCmd+0x3c>)
 8005726:	685a      	ldr	r2, [r3, #4]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4313      	orrs	r3, r2
 800572c:	604b      	str	r3, [r1, #4]
  else
  {
    /* Disable the EWUPx pin */
    PWR->CSR &= ~PWR_WakeUpPin;
  }
}
 800572e:	e006      	b.n	800573e <PWR_WakeUpPinCmd+0x2e>
    PWR->CSR &= ~PWR_WakeUpPin;
 8005730:	4906      	ldr	r1, [pc, #24]	; (800574c <PWR_WakeUpPinCmd+0x3c>)
 8005732:	4b06      	ldr	r3, [pc, #24]	; (800574c <PWR_WakeUpPinCmd+0x3c>)
 8005734:	685a      	ldr	r2, [r3, #4]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	43db      	mvns	r3, r3
 800573a:	4013      	ands	r3, r2
 800573c:	604b      	str	r3, [r1, #4]
}
 800573e:	bf00      	nop
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	40007000 	.word	0x40007000

08005750 <PWR_EnterSleepMode>:
  *             @arg PWR_SLEEPEntry_WFI: enter SLEEP mode with WFI instruction
  *             @arg PWR_SLEEPEntry_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void PWR_EnterSleepMode(uint8_t PWR_SLEEPEntry)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	4603      	mov	r3, r0
 8005758:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_SLEEP_ENTRY(PWR_SLEEPEntry));
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 800575a:	4a0a      	ldr	r2, [pc, #40]	; (8005784 <PWR_EnterSleepMode+0x34>)
 800575c:	4b09      	ldr	r3, [pc, #36]	; (8005784 <PWR_EnterSleepMode+0x34>)
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	f023 0304 	bic.w	r3, r3, #4
 8005764:	6113      	str	r3, [r2, #16]
  
  /* Select SLEEP mode entry -------------------------------------------------*/
  if(PWR_SLEEPEntry == PWR_SLEEPEntry_WFI)
 8005766:	79fb      	ldrb	r3, [r7, #7]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d101      	bne.n	8005770 <PWR_EnterSleepMode+0x20>
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 800576c:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE(); 
    __WFE();
  }
}
 800576e:	e002      	b.n	8005776 <PWR_EnterSleepMode+0x26>

    Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
 8005770:	bf40      	sev
  __ASM volatile ("wfe");
 8005772:	bf20      	wfe
 8005774:	bf20      	wfe
 8005776:	bf00      	nop
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	e000ed00 	.word	0xe000ed00

08005788 <PWR_EnterSTOPMode>:
  *             @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
  *             @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
  * @retval None
  */
void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	460b      	mov	r3, r1
 8005792:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 8005794:	2300      	movs	r3, #0
 8005796:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8005798:	4b12      	ldr	r3, [pc, #72]	; (80057e4 <PWR_EnterSTOPMode+0x5c>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	60fb      	str	r3, [r7, #12]
  /* Clear PDDS and LPDSR bits */
  tmpreg &= CR_DS_MASK;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f023 0303 	bic.w	r3, r3, #3
 80057a4:	60fb      	str	r3, [r7, #12]
  
  /* Set LPDSR bit according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 80057ae:	4a0d      	ldr	r2, [pc, #52]	; (80057e4 <PWR_EnterSTOPMode+0x5c>)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6013      	str	r3, [r2, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 80057b4:	4a0c      	ldr	r2, [pc, #48]	; (80057e8 <PWR_EnterSTOPMode+0x60>)
 80057b6:	4b0c      	ldr	r3, [pc, #48]	; (80057e8 <PWR_EnterSTOPMode+0x60>)
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	f043 0304 	orr.w	r3, r3, #4
 80057be:	6113      	str	r3, [r2, #16]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 80057c0:	78fb      	ldrb	r3, [r7, #3]
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d101      	bne.n	80057ca <PWR_EnterSTOPMode+0x42>
  __ASM volatile ("wfi");
 80057c6:	bf30      	wfi
 80057c8:	e000      	b.n	80057cc <PWR_EnterSTOPMode+0x44>
  __ASM volatile ("wfe");
 80057ca:	bf20      	wfe
  {
    /* Request Wait For Event */
    __WFE();
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 80057cc:	4a06      	ldr	r2, [pc, #24]	; (80057e8 <PWR_EnterSTOPMode+0x60>)
 80057ce:	4b06      	ldr	r3, [pc, #24]	; (80057e8 <PWR_EnterSTOPMode+0x60>)
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	f023 0304 	bic.w	r3, r3, #4
 80057d6:	6113      	str	r3, [r2, #16]
}
 80057d8:	bf00      	nop
 80057da:	3714      	adds	r7, #20
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	40007000 	.word	0x40007000
 80057e8:	e000ed00 	.word	0xe000ed00

080057ec <PWR_EnterSTANDBYMode>:
  * @note The Wakeup flag (WUF) need to be cleared at application level before to call this function.        
  * @param  None
  * @retval None
  */
void PWR_EnterSTANDBYMode(void)
{
 80057ec:	b480      	push	{r7}
 80057ee:	af00      	add	r7, sp, #0
  /* Select STANDBY mode */
  PWR->CR |= PWR_CR_PDDS;
 80057f0:	4a08      	ldr	r2, [pc, #32]	; (8005814 <PWR_EnterSTANDBYMode+0x28>)
 80057f2:	4b08      	ldr	r3, [pc, #32]	; (8005814 <PWR_EnterSTANDBYMode+0x28>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f043 0302 	orr.w	r3, r3, #2
 80057fa:	6013      	str	r3, [r2, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 80057fc:	4a06      	ldr	r2, [pc, #24]	; (8005818 <PWR_EnterSTANDBYMode+0x2c>)
 80057fe:	4b06      	ldr	r3, [pc, #24]	; (8005818 <PWR_EnterSTANDBYMode+0x2c>)
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	f043 0304 	orr.w	r3, r3, #4
 8005806:	6113      	str	r3, [r2, #16]
  __ASM volatile ("wfi");
 8005808:	bf30      	wfi
#if defined ( __CC_ARM   )
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
}
 800580a:	bf00      	nop
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr
 8005814:	40007000 	.word	0x40007000
 8005818:	e000ed00 	.word	0xe000ed00

0800581c <PWR_GetFlagStatus>:
  *     @arg PWR_FLAG_VREFINTRDY: Internal Voltage Reference Ready flag. This 
  *       flag indicates the state of the internal voltage reference, VREFINT.
  * @retval The new state of PWR_FLAG (SET or RESET).
  */
FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8005824:	2300      	movs	r3, #0
 8005826:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
  
  if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 8005828:	4b08      	ldr	r3, [pc, #32]	; (800584c <PWR_GetFlagStatus+0x30>)
 800582a:	685a      	ldr	r2, [r3, #4]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4013      	ands	r3, r2
 8005830:	2b00      	cmp	r3, #0
 8005832:	d002      	beq.n	800583a <PWR_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 8005834:	2301      	movs	r3, #1
 8005836:	73fb      	strb	r3, [r7, #15]
 8005838:	e001      	b.n	800583e <PWR_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 800583a:	2300      	movs	r3, #0
 800583c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 800583e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005840:	4618      	mov	r0, r3
 8005842:	3714      	adds	r7, #20
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr
 800584c:	40007000 	.word	0x40007000

08005850 <PWR_ClearFlag>:
  *     @arg PWR_FLAG_WU: Wake Up flag
  *     @arg PWR_FLAG_SB: StandBy flag
  * @retval None
  */
void PWR_ClearFlag(uint32_t PWR_FLAG)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
         
  PWR->CR |=  PWR_FLAG << 2;
 8005858:	4906      	ldr	r1, [pc, #24]	; (8005874 <PWR_ClearFlag+0x24>)
 800585a:	4b06      	ldr	r3, [pc, #24]	; (8005874 <PWR_ClearFlag+0x24>)
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	4313      	orrs	r3, r2
 8005864:	600b      	str	r3, [r1, #0]
}
 8005866:	bf00      	nop
 8005868:	370c      	adds	r7, #12
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	40007000 	.word	0x40007000

08005878 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8005878:	b480      	push	{r7}
 800587a:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800587c:	4a1a      	ldr	r2, [pc, #104]	; (80058e8 <RCC_DeInit+0x70>)
 800587e:	4b1a      	ldr	r3, [pc, #104]	; (80058e8 <RCC_DeInit+0x70>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f043 0301 	orr.w	r3, r3, #1
 8005886:	6013      	str	r3, [r2, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0] and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFC000;
 8005888:	4917      	ldr	r1, [pc, #92]	; (80058e8 <RCC_DeInit+0x70>)
 800588a:	4b17      	ldr	r3, [pc, #92]	; (80058e8 <RCC_DeInit+0x70>)
 800588c:	685a      	ldr	r2, [r3, #4]
 800588e:	4b17      	ldr	r3, [pc, #92]	; (80058ec <RCC_DeInit+0x74>)
 8005890:	4013      	ands	r3, r2
 8005892:	604b      	str	r3, [r1, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005894:	4a14      	ldr	r2, [pc, #80]	; (80058e8 <RCC_DeInit+0x70>)
 8005896:	4b14      	ldr	r3, [pc, #80]	; (80058e8 <RCC_DeInit+0x70>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800589e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058a2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80058a4:	4a10      	ldr	r2, [pc, #64]	; (80058e8 <RCC_DeInit+0x70>)
 80058a6:	4b10      	ldr	r3, [pc, #64]	; (80058e8 <RCC_DeInit+0x70>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058ae:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80058b0:	4a0d      	ldr	r2, [pc, #52]	; (80058e8 <RCC_DeInit+0x70>)
 80058b2:	4b0d      	ldr	r3, [pc, #52]	; (80058e8 <RCC_DeInit+0x70>)
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80058ba:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] and ADCPRE[13:4] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFC000;
 80058bc:	4a0a      	ldr	r2, [pc, #40]	; (80058e8 <RCC_DeInit+0x70>)
 80058be:	4b0a      	ldr	r3, [pc, #40]	; (80058e8 <RCC_DeInit+0x70>)
 80058c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80058c6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80058ca:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMSW bits */
  RCC->CFGR3 &= (uint32_t)0xF00ECCC;
 80058cc:	4906      	ldr	r1, [pc, #24]	; (80058e8 <RCC_DeInit+0x70>)
 80058ce:	4b06      	ldr	r3, [pc, #24]	; (80058e8 <RCC_DeInit+0x70>)
 80058d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058d2:	4b07      	ldr	r3, [pc, #28]	; (80058f0 <RCC_DeInit+0x78>)
 80058d4:	4013      	ands	r3, r2
 80058d6:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80058d8:	4b03      	ldr	r3, [pc, #12]	; (80058e8 <RCC_DeInit+0x70>)
 80058da:	2200      	movs	r2, #0
 80058dc:	609a      	str	r2, [r3, #8]
}
 80058de:	bf00      	nop
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr
 80058e8:	40021000 	.word	0x40021000
 80058ec:	f8ffc000 	.word	0xf8ffc000
 80058f0:	0f00eccc 	.word	0x0f00eccc

080058f4 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: turn ON the HSE oscillator
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	4603      	mov	r3, r0
 80058fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE_OFF;
 80058fe:	4b06      	ldr	r3, [pc, #24]	; (8005918 <RCC_HSEConfig+0x24>)
 8005900:	2200      	movs	r2, #0
 8005902:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE;
 8005904:	4a04      	ldr	r2, [pc, #16]	; (8005918 <RCC_HSEConfig+0x24>)
 8005906:	79fb      	ldrb	r3, [r7, #7]
 8005908:	7013      	strb	r3, [r2, #0]

}
 800590a:	bf00      	nop
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	40021002 	.word	0x40021002

0800591c <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
 8005922:	2300      	movs	r3, #0
 8005924:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 8005926:	2300      	movs	r3, #0
 8005928:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
 800592a:	2300      	movs	r3, #0
 800592c:	71bb      	strb	r3, [r7, #6]
  
  /* Wait till HSE is ready and if timeout is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 800592e:	2011      	movs	r0, #17
 8005930:	f000 fe92 	bl	8006658 <RCC_GetFlagStatus>
 8005934:	4603      	mov	r3, r0
 8005936:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;  
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	3301      	adds	r3, #1
 800593c:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005944:	d002      	beq.n	800594c <RCC_WaitForHSEStartUp+0x30>
 8005946:	79bb      	ldrb	r3, [r7, #6]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d0f0      	beq.n	800592e <RCC_WaitForHSEStartUp+0x12>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 800594c:	2011      	movs	r0, #17
 800594e:	f000 fe83 	bl	8006658 <RCC_GetFlagStatus>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d002      	beq.n	800595e <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 8005958:	2301      	movs	r3, #1
 800595a:	71fb      	strb	r3, [r7, #7]
 800595c:	e001      	b.n	8005962 <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 800595e:	2300      	movs	r3, #0
 8005960:	71fb      	strb	r3, [r7, #7]
  }  
  return (status);
 8005962:	79fb      	ldrb	r3, [r7, #7]
}
 8005964:	4618      	mov	r0, r3
 8005966:	3708      	adds	r7, #8
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the HSI calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 800596c:	b480      	push	{r7}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
 8005972:	4603      	mov	r3, r0
 8005974:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 8005976:	2300      	movs	r3, #0
 8005978:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HSI_CALIBRATION_VALUE(HSICalibrationValue));
  
  tmpreg = RCC->CR;
 800597a:	4b0a      	ldr	r3, [pc, #40]	; (80059a4 <RCC_AdjustHSICalibrationValue+0x38>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	60fb      	str	r3, [r7, #12]
  
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005986:	60fb      	str	r3, [r7, #12]
  
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8005988:	79fb      	ldrb	r3, [r7, #7]
 800598a:	00db      	lsls	r3, r3, #3
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	4313      	orrs	r3, r2
 8005990:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CR = tmpreg;
 8005992:	4a04      	ldr	r2, [pc, #16]	; (80059a4 <RCC_AdjustHSICalibrationValue+0x38>)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6013      	str	r3, [r2, #0]
}
 8005998:	bf00      	nop
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr
 80059a4:	40021000 	.word	0x40021000

080059a8 <RCC_HSICmd>:
  * @param  NewState: new state of the HSI.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	4603      	mov	r3, r0
 80059b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 80059b2:	4a04      	ldr	r2, [pc, #16]	; (80059c4 <RCC_HSICmd+0x1c>)
 80059b4:	79fb      	ldrb	r3, [r7, #7]
 80059b6:	6013      	str	r3, [r2, #0]
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr
 80059c4:	42420000 	.word	0x42420000

080059c8 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: turn ON the LSE oscillator
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint32_t RCC_LSE)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEON);
 80059d0:	4a0b      	ldr	r2, [pc, #44]	; (8005a00 <RCC_LSEConfig+0x38>)
 80059d2:	4b0b      	ldr	r3, [pc, #44]	; (8005a00 <RCC_LSEConfig+0x38>)
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	f023 0301 	bic.w	r3, r3, #1
 80059da:	6213      	str	r3, [r2, #32]

  /* Reset LSEBYP bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEBYP);
 80059dc:	4a08      	ldr	r2, [pc, #32]	; (8005a00 <RCC_LSEConfig+0x38>)
 80059de:	4b08      	ldr	r3, [pc, #32]	; (8005a00 <RCC_LSEConfig+0x38>)
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	f023 0304 	bic.w	r3, r3, #4
 80059e6:	6213      	str	r3, [r2, #32]

  /* Configure LSE */
  RCC->BDCR |= RCC_LSE;
 80059e8:	4905      	ldr	r1, [pc, #20]	; (8005a00 <RCC_LSEConfig+0x38>)
 80059ea:	4b05      	ldr	r3, [pc, #20]	; (8005a00 <RCC_LSEConfig+0x38>)
 80059ec:	6a1a      	ldr	r2, [r3, #32]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	620b      	str	r3, [r1, #32]
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr
 8005a00:	40021000 	.word	0x40021000

08005a04 <RCC_LSEDriveConfig>:
  *     @arg RCC_LSEDrive_MediumHigh: LSE oscillator medium high drive capability.
  *     @arg RCC_LSEDrive_High: LSE oscillator high drive capability.
  * @retval None
  */
void RCC_LSEDriveConfig(uint32_t RCC_LSEDrive)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_LSE_DRIVE(RCC_LSEDrive));
  
  /* Clear LSEDRV[1:0] bits */
  RCC->BDCR &= ~(RCC_BDCR_LSEDRV);
 8005a0c:	4a08      	ldr	r2, [pc, #32]	; (8005a30 <RCC_LSEDriveConfig+0x2c>)
 8005a0e:	4b08      	ldr	r3, [pc, #32]	; (8005a30 <RCC_LSEDriveConfig+0x2c>)
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	f023 0318 	bic.w	r3, r3, #24
 8005a16:	6213      	str	r3, [r2, #32]

  /* Set the LSE Drive */
  RCC->BDCR |= RCC_LSEDrive;
 8005a18:	4905      	ldr	r1, [pc, #20]	; (8005a30 <RCC_LSEDriveConfig+0x2c>)
 8005a1a:	4b05      	ldr	r3, [pc, #20]	; (8005a30 <RCC_LSEDriveConfig+0x2c>)
 8005a1c:	6a1a      	ldr	r2, [r3, #32]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	620b      	str	r3, [r1, #32]
}
 8005a24:	bf00      	nop
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr
 8005a30:	40021000 	.word	0x40021000

08005a34 <RCC_LSICmd>:
  * @param  NewState: new state of the LSI.
  *         This parameter can be: ENABLE or DISABLE. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8005a3e:	4a04      	ldr	r2, [pc, #16]	; (8005a50 <RCC_LSICmd+0x1c>)
 8005a40:	79fb      	ldrb	r3, [r7, #7]
 8005a42:	6013      	str	r3, [r2, #0]
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr
 8005a50:	42420480 	.word	0x42420480

08005a54 <RCC_PLLConfig>:
  *   This parameter can be RCC_PLLMul_x where x:[2,16] 
  *                                               
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));
  
  /* Clear PLL Source [16] and Multiplier [21:18] bits */
  RCC->CFGR &= ~(RCC_CFGR_PLLMULL | RCC_CFGR_PLLSRC);
 8005a5e:	4a0a      	ldr	r2, [pc, #40]	; (8005a88 <RCC_PLLConfig+0x34>)
 8005a60:	4b09      	ldr	r3, [pc, #36]	; (8005a88 <RCC_PLLConfig+0x34>)
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8005a68:	6053      	str	r3, [r2, #4]

  /* Set the PLL Source and Multiplier */
  RCC->CFGR |= (uint32_t)(RCC_PLLSource | RCC_PLLMul);
 8005a6a:	4807      	ldr	r0, [pc, #28]	; (8005a88 <RCC_PLLConfig+0x34>)
 8005a6c:	4b06      	ldr	r3, [pc, #24]	; (8005a88 <RCC_PLLConfig+0x34>)
 8005a6e:	685a      	ldr	r2, [r3, #4]
 8005a70:	6879      	ldr	r1, [r7, #4]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	430b      	orrs	r3, r1
 8005a76:	4313      	orrs	r3, r2
 8005a78:	6043      	str	r3, [r0, #4]
}
 8005a7a:	bf00      	nop
 8005a7c:	370c      	adds	r7, #12
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	40021000 	.word	0x40021000

08005a8c <RCC_PLLCmd>:
  * @param  NewState: new state of the PLL.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	4603      	mov	r3, r0
 8005a94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8005a96:	4a04      	ldr	r2, [pc, #16]	; (8005aa8 <RCC_PLLCmd+0x1c>)
 8005a98:	79fb      	ldrb	r3, [r7, #7]
 8005a9a:	6013      	str	r3, [r2, #0]
}
 8005a9c:	bf00      	nop
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr
 8005aa8:	42420060 	.word	0x42420060

08005aac <RCC_PREDIV1Config>:
  * @param  RCC_PREDIV1_Div: specifies the PREDIV1 clock division factor.
  *         This parameter can be RCC_PREDIV1_Divx where x:[1,16]
  * @retval None
  */
void RCC_PREDIV1Config(uint32_t RCC_PREDIV1_Div)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));

  tmpreg = RCC->CFGR2;
 8005ab8:	4b09      	ldr	r3, [pc, #36]	; (8005ae0 <RCC_PREDIV1Config+0x34>)
 8005aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005abc:	60fb      	str	r3, [r7, #12]
  /* Clear PREDIV1[3:0] bits */
  tmpreg &= ~(RCC_CFGR2_PREDIV1);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f023 030f 	bic.w	r3, r3, #15
 8005ac4:	60fb      	str	r3, [r7, #12]

  /* Set the PREDIV1 division factor */
  tmpreg |= RCC_PREDIV1_Div;
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR2 = tmpreg;
 8005ace:	4a04      	ldr	r2, [pc, #16]	; (8005ae0 <RCC_PREDIV1Config+0x34>)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8005ad4:	bf00      	nop
 8005ad6:	3714      	adds	r7, #20
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr
 8005ae0:	40021000 	.word	0x40021000

08005ae4 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	4603      	mov	r3, r0
 8005aec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8005aee:	4a04      	ldr	r2, [pc, #16]	; (8005b00 <RCC_ClockSecuritySystemCmd+0x1c>)
 8005af0:	79fb      	ldrb	r3, [r7, #7]
 8005af2:	6013      	str	r3, [r2, #0]
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr
 8005b00:	4242004c 	.word	0x4242004c

08005b04 <RCC_MCOConfig>:
  *            @arg RCC_MCOPrescaler_64: MCO clock is divided by 64.
  *            @arg RCC_MCOPrescaler_128: MCO clock is divided by 128.    
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCOSource, uint32_t RCC_MCOPrescaler)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	6039      	str	r1, [r7, #0]
 8005b0e:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 8005b10:	2300      	movs	r3, #0
 8005b12:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_MCO_SOURCE(RCC_MCOSource));
  assert_param(IS_RCC_MCO_PRESCALER(RCC_MCOPrescaler));
    
  /* Get CFGR value */  
  tmpreg = RCC->CFGR;
 8005b14:	4b0b      	ldr	r3, [pc, #44]	; (8005b44 <RCC_MCOConfig+0x40>)
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	60fb      	str	r3, [r7, #12]
  /* Clear MCOPRE[2:0] bits */
  tmpreg &= ~(RCC_CFGR_MCO_PRE | RCC_CFGR_MCO | RCC_CFGR_PLLNODIV);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f023 4377 	bic.w	r3, r3, #4143972352	; 0xf7000000
 8005b20:	60fb      	str	r3, [r7, #12]
  /* Set the RCC_MCOSource and RCC_MCOPrescaler */
  tmpreg |= (RCC_MCOPrescaler | RCC_MCOSource<<24);
 8005b22:	79fb      	ldrb	r3, [r7, #7]
 8005b24:	061b      	lsls	r3, r3, #24
 8005b26:	461a      	mov	r2, r3
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8005b32:	4a04      	ldr	r2, [pc, #16]	; (8005b44 <RCC_MCOConfig+0x40>)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6053      	str	r3, [r2, #4]
}
 8005b38:	bf00      	nop
 8005b3a:	3714      	adds	r7, #20
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr
 8005b44:	40021000 	.word	0x40021000

08005b48 <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8005b50:	2300      	movs	r3, #0
 8005b52:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  
  tmpreg = RCC->CFGR;
 8005b54:	4b09      	ldr	r3, [pc, #36]	; (8005b7c <RCC_SYSCLKConfig+0x34>)
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	60fb      	str	r3, [r7, #12]
  
  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f023 0303 	bic.w	r3, r3, #3
 8005b60:	60fb      	str	r3, [r7, #12]
  
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8005b6a:	4a04      	ldr	r2, [pc, #16]	; (8005b7c <RCC_SYSCLKConfig+0x34>)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6053      	str	r3, [r2, #4]
}
 8005b70:	bf00      	nop
 8005b72:	3714      	adds	r7, #20
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr
 8005b7c:	40021000 	.word	0x40021000

08005b80 <RCC_GetSYSCLKSource>:
  *              - 0x00: HSI used as system clock
  *              - 0x04: HSE used as system clock  
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8005b80:	b480      	push	{r7}
 8005b82:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8005b84:	4b05      	ldr	r3, [pc, #20]	; (8005b9c <RCC_GetSYSCLKSource+0x1c>)
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	f003 030c 	and.w	r3, r3, #12
 8005b8e:	b2db      	uxtb	r3, r3
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	40021000 	.word	0x40021000

08005ba0 <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  
  tmpreg = RCC->CFGR;
 8005bac:	4b09      	ldr	r3, [pc, #36]	; (8005bd4 <RCC_HCLKConfig+0x34>)
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	60fb      	str	r3, [r7, #12]
  
  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bb8:	60fb      	str	r3, [r7, #12]
  
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8005bc2:	4a04      	ldr	r2, [pc, #16]	; (8005bd4 <RCC_HCLKConfig+0x34>)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6053      	str	r3, [r2, #4]
}
 8005bc8:	bf00      	nop
 8005bca:	3714      	adds	r7, #20
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr
 8005bd4:	40021000 	.word	0x40021000

08005bd8 <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8005be0:	2300      	movs	r3, #0
 8005be2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  
  tmpreg = RCC->CFGR;
 8005be4:	4b09      	ldr	r3, [pc, #36]	; (8005c0c <RCC_PCLK1Config+0x34>)
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005bf0:	60fb      	str	r3, [r7, #12]
  
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8005bfa:	4a04      	ldr	r2, [pc, #16]	; (8005c0c <RCC_PCLK1Config+0x34>)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6053      	str	r3, [r2, #4]
}
 8005c00:	bf00      	nop
 8005c02:	3714      	adds	r7, #20
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr
 8005c0c:	40021000 	.word	0x40021000

08005c10 <RCC_PCLK2Config>:
  *             @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *             @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  
  tmpreg = RCC->CFGR;
 8005c1c:	4b0a      	ldr	r3, [pc, #40]	; (8005c48 <RCC_PCLK2Config+0x38>)
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8005c28:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	00db      	lsls	r3, r3, #3
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8005c34:	4a04      	ldr	r2, [pc, #16]	; (8005c48 <RCC_PCLK2Config+0x38>)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6053      	str	r3, [r2, #4]
}
 8005c3a:	bf00      	nop
 8005c3c:	3714      	adds	r7, #20
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	40021000 	.word	0x40021000

08005c4c <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b08b      	sub	sp, #44	; 0x2c
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8005c54:	2300      	movs	r3, #0
 8005c56:	623b      	str	r3, [r7, #32]
 8005c58:	2300      	movs	r3, #0
 8005c5a:	61fb      	str	r3, [r7, #28]
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	61bb      	str	r3, [r7, #24]
 8005c60:	2300      	movs	r3, #0
 8005c62:	617b      	str	r3, [r7, #20]
 8005c64:	2300      	movs	r3, #0
 8005c66:	613b      	str	r3, [r7, #16]
 8005c68:	2300      	movs	r3, #0
 8005c6a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	60fb      	str	r3, [r7, #12]
 8005c70:	2300      	movs	r3, #0
 8005c72:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8005c74:	4b8d      	ldr	r3, [pc, #564]	; (8005eac <RCC_GetClocksFreq+0x260>)
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	f003 030c 	and.w	r3, r3, #12
 8005c7c:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 8005c7e:	6a3b      	ldr	r3, [r7, #32]
 8005c80:	2b04      	cmp	r3, #4
 8005c82:	d007      	beq.n	8005c94 <RCC_GetClocksFreq+0x48>
 8005c84:	2b08      	cmp	r3, #8
 8005c86:	d009      	beq.n	8005c9c <RCC_GetClocksFreq+0x50>
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d130      	bne.n	8005cee <RCC_GetClocksFreq+0xa2>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a88      	ldr	r2, [pc, #544]	; (8005eb0 <RCC_GetClocksFreq+0x264>)
 8005c90:	601a      	str	r2, [r3, #0]
      break;
 8005c92:	e030      	b.n	8005cf6 <RCC_GetClocksFreq+0xaa>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a86      	ldr	r2, [pc, #536]	; (8005eb0 <RCC_GetClocksFreq+0x264>)
 8005c98:	601a      	str	r2, [r3, #0]
      break;
 8005c9a:	e02c      	b.n	8005cf6 <RCC_GetClocksFreq+0xaa>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8005c9c:	4b83      	ldr	r3, [pc, #524]	; (8005eac <RCC_GetClocksFreq+0x260>)
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005ca4:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8005ca6:	4b81      	ldr	r3, [pc, #516]	; (8005eac <RCC_GetClocksFreq+0x260>)
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cae:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	0c9b      	lsrs	r3, r3, #18
 8005cb4:	3302      	adds	r3, #2
 8005cb6:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d105      	bne.n	8005cca <RCC_GetClocksFreq+0x7e>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	4a7c      	ldr	r2, [pc, #496]	; (8005eb4 <RCC_GetClocksFreq+0x268>)
 8005cc2:	fb02 f303 	mul.w	r3, r2, r3
 8005cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8005cc8:	e00d      	b.n	8005ce6 <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8005cca:	4b78      	ldr	r3, [pc, #480]	; (8005eac <RCC_GetClocksFreq+0x260>)
 8005ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cce:	f003 030f 	and.w	r3, r3, #15
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8005cd6:	4a76      	ldr	r2, [pc, #472]	; (8005eb0 <RCC_GetClocksFreq+0x264>)
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cde:	69fa      	ldr	r2, [r7, #28]
 8005ce0:	fb02 f303 	mul.w	r3, r2, r3
 8005ce4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cea:	601a      	str	r2, [r3, #0]
      break;
 8005cec:	e003      	b.n	8005cf6 <RCC_GetClocksFreq+0xaa>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a6f      	ldr	r2, [pc, #444]	; (8005eb0 <RCC_GetClocksFreq+0x264>)
 8005cf2:	601a      	str	r2, [r3, #0]
      break;
 8005cf4:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8005cf6:	4b6d      	ldr	r3, [pc, #436]	; (8005eac <RCC_GetClocksFreq+0x260>)
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cfe:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8005d00:	6a3b      	ldr	r3, [r7, #32]
 8005d02:	091b      	lsrs	r3, r3, #4
 8005d04:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 8005d06:	4a6c      	ldr	r2, [pc, #432]	; (8005eb8 <RCC_GetClocksFreq+0x26c>)
 8005d08:	6a3b      	ldr	r3, [r7, #32]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	40da      	lsrs	r2, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8005d1e:	4b63      	ldr	r3, [pc, #396]	; (8005eac <RCC_GetClocksFreq+0x260>)
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d26:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8005d28:	6a3b      	ldr	r3, [r7, #32]
 8005d2a:	0a1b      	lsrs	r3, r3, #8
 8005d2c:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8005d2e:	4a62      	ldr	r2, [pc, #392]	; (8005eb8 <RCC_GetClocksFreq+0x26c>)
 8005d30:	6a3b      	ldr	r3, [r7, #32]
 8005d32:	4413      	add	r3, r2
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	40da      	lsrs	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8005d46:	4b59      	ldr	r3, [pc, #356]	; (8005eac <RCC_GetClocksFreq+0x260>)
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005d4e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8005d50:	6a3b      	ldr	r3, [r7, #32]
 8005d52:	0adb      	lsrs	r3, r3, #11
 8005d54:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 8005d56:	4a58      	ldr	r2, [pc, #352]	; (8005eb8 <RCC_GetClocksFreq+0x26c>)
 8005d58:	6a3b      	ldr	r3, [r7, #32]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	60fb      	str	r3, [r7, #12]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685a      	ldr	r2, [r3, #4]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	40da      	lsrs	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 8005d6e:	4b4f      	ldr	r3, [pc, #316]	; (8005eac <RCC_GetClocksFreq+0x260>)
 8005d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d72:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d76:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8005d78:	6a3b      	ldr	r3, [r7, #32]
 8005d7a:	091b      	lsrs	r3, r3, #4
 8005d7c:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp & 0x0F];
 8005d7e:	6a3b      	ldr	r3, [r7, #32]
 8005d80:	f003 030f 	and.w	r3, r3, #15
 8005d84:	4a4d      	ldr	r2, [pc, #308]	; (8005ebc <RCC_GetClocksFreq+0x270>)
 8005d86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	613b      	str	r3, [r7, #16]
  if (((tmp & 0x10) != 0) && (presc != 0))
 8005d8e:	6a3b      	ldr	r3, [r7, #32]
 8005d90:	f003 0310 	and.w	r3, r3, #16
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d009      	beq.n	8005dac <RCC_GetClocksFreq+0x160>
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d006      	beq.n	8005dac <RCC_GetClocksFreq+0x160>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 8005d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	fbb2 f2f3 	udiv	r2, r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	611a      	str	r2, [r3, #16]
 8005daa:	e003      	b.n	8005db4 <RCC_GetClocksFreq+0x168>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 8005db4:	4b3d      	ldr	r3, [pc, #244]	; (8005eac <RCC_GetClocksFreq+0x260>)
 8005db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db8:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8005dbc:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 8005dbe:	6a3b      	ldr	r3, [r7, #32]
 8005dc0:	0a5b      	lsrs	r3, r3, #9
 8005dc2:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp & 0x0F];
 8005dc4:	6a3b      	ldr	r3, [r7, #32]
 8005dc6:	f003 030f 	and.w	r3, r3, #15
 8005dca:	4a3c      	ldr	r2, [pc, #240]	; (8005ebc <RCC_GetClocksFreq+0x270>)
 8005dcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	613b      	str	r3, [r7, #16]
  if (((tmp & 0x10) != 0) && (presc != 0))
 8005dd4:	6a3b      	ldr	r3, [r7, #32]
 8005dd6:	f003 0310 	and.w	r3, r3, #16
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d009      	beq.n	8005df2 <RCC_GetClocksFreq+0x1a6>
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d006      	beq.n	8005df2 <RCC_GetClocksFreq+0x1a6>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8005de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	615a      	str	r2, [r3, #20]
 8005df0:	e003      	b.n	8005dfa <RCC_GetClocksFreq+0x1ae>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8005dfa:	4b2c      	ldr	r3, [pc, #176]	; (8005eac <RCC_GetClocksFreq+0x260>)
 8005dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dfe:	f003 0310 	and.w	r3, r3, #16
 8005e02:	2b10      	cmp	r3, #16
 8005e04:	d003      	beq.n	8005e0e <RCC_GetClocksFreq+0x1c2>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a29      	ldr	r2, [pc, #164]	; (8005eb0 <RCC_GetClocksFreq+0x264>)
 8005e0a:	619a      	str	r2, [r3, #24]
 8005e0c:	e003      	b.n	8005e16 <RCC_GetClocksFreq+0x1ca>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 8005e16:	4b25      	ldr	r3, [pc, #148]	; (8005eac <RCC_GetClocksFreq+0x260>)
 8005e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1a:	f003 0320 	and.w	r3, r3, #32
 8005e1e:	2b20      	cmp	r3, #32
 8005e20:	d003      	beq.n	8005e2a <RCC_GetClocksFreq+0x1de>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a22      	ldr	r2, [pc, #136]	; (8005eb0 <RCC_GetClocksFreq+0x264>)
 8005e26:	61da      	str	r2, [r3, #28]
 8005e28:	e003      	b.n	8005e32 <RCC_GetClocksFreq+0x1e6>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	61da      	str	r2, [r3, #28]
  }

  /* I2C3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C3SW) != RCC_CFGR3_I2C3SW)
 8005e32:	4b1e      	ldr	r3, [pc, #120]	; (8005eac <RCC_GetClocksFreq+0x260>)
 8005e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e3a:	2b40      	cmp	r3, #64	; 0x40
 8005e3c:	d003      	beq.n	8005e46 <RCC_GetClocksFreq+0x1fa>
  {
    /* I2C3 Clock is HSI Osc. */
    RCC_Clocks->I2C3CLK_Frequency = HSI_VALUE;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a1b      	ldr	r2, [pc, #108]	; (8005eb0 <RCC_GetClocksFreq+0x264>)
 8005e42:	621a      	str	r2, [r3, #32]
 8005e44:	e003      	b.n	8005e4e <RCC_GetClocksFreq+0x202>
  }
  else
  {
    /* I2C3 Clock is System Clock */
    RCC_Clocks->I2C3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	621a      	str	r2, [r3, #32]
  }
    
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8005e4e:	4b17      	ldr	r3, [pc, #92]	; (8005eac <RCC_GetClocksFreq+0x260>)
 8005e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e5a:	d10d      	bne.n	8005e78 <RCC_GetClocksFreq+0x22c>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d108      	bne.n	8005e78 <RCC_GetClocksFreq+0x22c>
  && (apb2presc == ahbpresc)) 
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d104      	bne.n	8005e78 <RCC_GetClocksFreq+0x22c>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 8005e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e70:	005a      	lsls	r2, r3, #1
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	625a      	str	r2, [r3, #36]	; 0x24
 8005e76:	e003      	b.n	8005e80 <RCC_GetClocksFreq+0x234>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	68da      	ldr	r2, [r3, #12]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	625a      	str	r2, [r3, #36]	; 0x24
    RCC_Clocks->TIM3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
  }
#endif /* STM32F303xE */
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_HRTIM1SW) == RCC_CFGR3_HRTIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8005e80:	4b0a      	ldr	r3, [pc, #40]	; (8005eac <RCC_GetClocksFreq+0x260>)
 8005e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e8c:	d118      	bne.n	8005ec0 <RCC_GetClocksFreq+0x274>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d113      	bne.n	8005ec0 <RCC_GetClocksFreq+0x274>
  && (apb2presc == ahbpresc)) 
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d10f      	bne.n	8005ec0 <RCC_GetClocksFreq+0x274>
  {
    /* HRTIM1 Clock is 2 * pllclk */
    RCC_Clocks->HRTIM1CLK_Frequency = pllclk * 2;
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea2:	005a      	lsls	r2, r3, #1
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	629a      	str	r2, [r3, #40]	; 0x28
 8005ea8:	e00e      	b.n	8005ec8 <RCC_GetClocksFreq+0x27c>
 8005eaa:	bf00      	nop
 8005eac:	40021000 	.word	0x40021000
 8005eb0:	007a1200 	.word	0x007a1200
 8005eb4:	003d0900 	.word	0x003d0900
 8005eb8:	20000030 	.word	0x20000030
 8005ebc:	20000040 	.word	0x20000040
  }
  else
  {
    /* HRTIM1 Clock is APB2 clock. */
    RCC_Clocks->HRTIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	68da      	ldr	r2, [r3, #12]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	629a      	str	r2, [r3, #40]	; 0x28
  }
  
    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8005ec8:	4b91      	ldr	r3, [pc, #580]	; (8006110 <RCC_GetClocksFreq+0x4c4>)
 8005eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ecc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ed0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ed4:	d10d      	bne.n	8005ef2 <RCC_GetClocksFreq+0x2a6>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d108      	bne.n	8005ef2 <RCC_GetClocksFreq+0x2a6>
  && (apb2presc == ahbpresc))
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d104      	bne.n	8005ef2 <RCC_GetClocksFreq+0x2a6>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eea:	005a      	lsls	r2, r3, #1
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	62da      	str	r2, [r3, #44]	; 0x2c
 8005ef0:	e003      	b.n	8005efa <RCC_GetClocksFreq+0x2ae>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	68da      	ldr	r2, [r3, #12]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* TIM15CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM15SW) == RCC_CFGR3_TIM15SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8005efa:	4b85      	ldr	r3, [pc, #532]	; (8006110 <RCC_GetClocksFreq+0x4c4>)
 8005efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f06:	d10d      	bne.n	8005f24 <RCC_GetClocksFreq+0x2d8>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d108      	bne.n	8005f24 <RCC_GetClocksFreq+0x2d8>
  && (apb2presc == ahbpresc))
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d104      	bne.n	8005f24 <RCC_GetClocksFreq+0x2d8>
  {
    /* TIM15 Clock is 2 * pllclk */
    RCC_Clocks->TIM15CLK_Frequency = pllclk * 2;
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	005a      	lsls	r2, r3, #1
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	64da      	str	r2, [r3, #76]	; 0x4c
 8005f22:	e003      	b.n	8005f2c <RCC_GetClocksFreq+0x2e0>
  }
  else
  {
    /* TIM15 Clock is APB2 clock. */
    RCC_Clocks->TIM15CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	68da      	ldr	r2, [r3, #12]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
    
    /* TIM16CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM16SW) == RCC_CFGR3_TIM16SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8005f2c:	4b78      	ldr	r3, [pc, #480]	; (8006110 <RCC_GetClocksFreq+0x4c4>)
 8005f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f38:	d10d      	bne.n	8005f56 <RCC_GetClocksFreq+0x30a>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d108      	bne.n	8005f56 <RCC_GetClocksFreq+0x30a>
  && (apb2presc == ahbpresc))
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d104      	bne.n	8005f56 <RCC_GetClocksFreq+0x30a>
  {
    /* TIM16 Clock is 2 * pllclk */
    RCC_Clocks->TIM16CLK_Frequency = pllclk * 2;
 8005f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4e:	005a      	lsls	r2, r3, #1
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	651a      	str	r2, [r3, #80]	; 0x50
 8005f54:	e003      	b.n	8005f5e <RCC_GetClocksFreq+0x312>
  }
  else
  {
    /* TIM16 Clock is APB2 clock. */
    RCC_Clocks->TIM16CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	68da      	ldr	r2, [r3, #12]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	651a      	str	r2, [r3, #80]	; 0x50
  }

    /* TIM17CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM17SW) == RCC_CFGR3_TIM17SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8005f5e:	4b6c      	ldr	r3, [pc, #432]	; (8006110 <RCC_GetClocksFreq+0x4c4>)
 8005f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f6a:	d10d      	bne.n	8005f88 <RCC_GetClocksFreq+0x33c>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d108      	bne.n	8005f88 <RCC_GetClocksFreq+0x33c>
  && (apb2presc == ahbpresc))
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d104      	bne.n	8005f88 <RCC_GetClocksFreq+0x33c>
  {
    /* TIM17 Clock is 2 * pllclk */
    RCC_Clocks->TIM17CLK_Frequency = pllclk * 2;
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f80:	005a      	lsls	r2, r3, #1
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	655a      	str	r2, [r3, #84]	; 0x54
 8005f86:	e003      	b.n	8005f90 <RCC_GetClocksFreq+0x344>
  }
  else
  {
    /* TIM17 Clock is APB2 clock. */
    RCC_Clocks->TIM16CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	68da      	ldr	r2, [r3, #12]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  
  /* TIM20CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM20SW) == RCC_CFGR3_TIM20SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8005f90:	4b5f      	ldr	r3, [pc, #380]	; (8006110 <RCC_GetClocksFreq+0x4c4>)
 8005f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f9c:	d10d      	bne.n	8005fba <RCC_GetClocksFreq+0x36e>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d108      	bne.n	8005fba <RCC_GetClocksFreq+0x36e>
  && (apb2presc == ahbpresc))
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d104      	bne.n	8005fba <RCC_GetClocksFreq+0x36e>
  {
    /* TIM20 Clock is 2 * pllclk */
    RCC_Clocks->TIM20CLK_Frequency = pllclk * 2;
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb2:	005a      	lsls	r2, r3, #1
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	659a      	str	r2, [r3, #88]	; 0x58
 8005fb8:	e003      	b.n	8005fc2 <RCC_GetClocksFreq+0x376>
  }
  else
  {
    /* TIM20 Clock is APB2 clock. */
    RCC_Clocks->TIM20CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	68da      	ldr	r2, [r3, #12]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	659a      	str	r2, [r3, #88]	; 0x58
  }
    
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8005fc2:	4b53      	ldr	r3, [pc, #332]	; (8006110 <RCC_GetClocksFreq+0x4c4>)
 8005fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc6:	f003 0303 	and.w	r3, r3, #3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d104      	bne.n	8005fd8 <RCC_GetClocksFreq+0x38c>
  {
#if defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F301x8) || defined(STM32F302x8)
    /* USART1 Clock is PCLK1 instead of PCLK2 (limitation described in the 
       STM32F302/01/34 x4/x6/x8 respective erratasheets) */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	689a      	ldr	r2, [r3, #8]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	639a      	str	r2, [r3, #56]	; 0x38
 8005fd6:	e01e      	b.n	8006016 <RCC_GetClocksFreq+0x3ca>
#else
    /* USART Clock is PCLK2 */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
#endif  
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8005fd8:	4b4d      	ldr	r3, [pc, #308]	; (8006110 <RCC_GetClocksFreq+0x4c4>)
 8005fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fdc:	f003 0303 	and.w	r3, r3, #3
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d104      	bne.n	8005fee <RCC_GetClocksFreq+0x3a2>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	639a      	str	r2, [r3, #56]	; 0x38
 8005fec:	e013      	b.n	8006016 <RCC_GetClocksFreq+0x3ca>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8005fee:	4b48      	ldr	r3, [pc, #288]	; (8006110 <RCC_GetClocksFreq+0x4c4>)
 8005ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff2:	f003 0303 	and.w	r3, r3, #3
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d104      	bne.n	8006004 <RCC_GetClocksFreq+0x3b8>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006000:	639a      	str	r2, [r3, #56]	; 0x38
 8006002:	e008      	b.n	8006016 <RCC_GetClocksFreq+0x3ca>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8006004:	4b42      	ldr	r3, [pc, #264]	; (8006110 <RCC_GetClocksFreq+0x4c4>)
 8006006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006008:	f003 0303 	and.w	r3, r3, #3
 800600c:	2b03      	cmp	r3, #3
 800600e:	d102      	bne.n	8006016 <RCC_GetClocksFreq+0x3ca>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a40      	ldr	r2, [pc, #256]	; (8006114 <RCC_GetClocksFreq+0x4c8>)
 8006014:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 8006016:	4b3e      	ldr	r3, [pc, #248]	; (8006110 <RCC_GetClocksFreq+0x4c4>)
 8006018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800601a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d104      	bne.n	800602c <RCC_GetClocksFreq+0x3e0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	689a      	ldr	r2, [r3, #8]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	63da      	str	r2, [r3, #60]	; 0x3c
 800602a:	e021      	b.n	8006070 <RCC_GetClocksFreq+0x424>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 800602c:	4b38      	ldr	r3, [pc, #224]	; (8006110 <RCC_GetClocksFreq+0x4c4>)
 800602e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006030:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006038:	d104      	bne.n	8006044 <RCC_GetClocksFreq+0x3f8>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	63da      	str	r2, [r3, #60]	; 0x3c
 8006042:	e015      	b.n	8006070 <RCC_GetClocksFreq+0x424>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 8006044:	4b32      	ldr	r3, [pc, #200]	; (8006110 <RCC_GetClocksFreq+0x4c4>)
 8006046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006048:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800604c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006050:	d104      	bne.n	800605c <RCC_GetClocksFreq+0x410>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006058:	63da      	str	r2, [r3, #60]	; 0x3c
 800605a:	e009      	b.n	8006070 <RCC_GetClocksFreq+0x424>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 800605c:	4b2c      	ldr	r3, [pc, #176]	; (8006110 <RCC_GetClocksFreq+0x4c4>)
 800605e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006060:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006064:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006068:	d102      	bne.n	8006070 <RCC_GetClocksFreq+0x424>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a29      	ldr	r2, [pc, #164]	; (8006114 <RCC_GetClocksFreq+0x4c8>)
 800606e:	63da      	str	r2, [r3, #60]	; 0x3c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8006070:	4b27      	ldr	r3, [pc, #156]	; (8006110 <RCC_GetClocksFreq+0x4c4>)
 8006072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006074:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006078:	2b00      	cmp	r3, #0
 800607a:	d104      	bne.n	8006086 <RCC_GetClocksFreq+0x43a>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	689a      	ldr	r2, [r3, #8]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	641a      	str	r2, [r3, #64]	; 0x40
 8006084:	e021      	b.n	80060ca <RCC_GetClocksFreq+0x47e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 8006086:	4b22      	ldr	r3, [pc, #136]	; (8006110 <RCC_GetClocksFreq+0x4c4>)
 8006088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800608a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800608e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006092:	d104      	bne.n	800609e <RCC_GetClocksFreq+0x452>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	641a      	str	r2, [r3, #64]	; 0x40
 800609c:	e015      	b.n	80060ca <RCC_GetClocksFreq+0x47e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 800609e:	4b1c      	ldr	r3, [pc, #112]	; (8006110 <RCC_GetClocksFreq+0x4c4>)
 80060a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80060a6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80060aa:	d104      	bne.n	80060b6 <RCC_GetClocksFreq+0x46a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80060b2:	641a      	str	r2, [r3, #64]	; 0x40
 80060b4:	e009      	b.n	80060ca <RCC_GetClocksFreq+0x47e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 80060b6:	4b16      	ldr	r3, [pc, #88]	; (8006110 <RCC_GetClocksFreq+0x4c4>)
 80060b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ba:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80060be:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80060c2:	d102      	bne.n	80060ca <RCC_GetClocksFreq+0x47e>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a13      	ldr	r2, [pc, #76]	; (8006114 <RCC_GetClocksFreq+0x4c8>)
 80060c8:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 80060ca:	4b11      	ldr	r3, [pc, #68]	; (8006110 <RCC_GetClocksFreq+0x4c4>)
 80060cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ce:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d104      	bne.n	80060e0 <RCC_GetClocksFreq+0x494>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	689a      	ldr	r2, [r3, #8]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	645a      	str	r2, [r3, #68]	; 0x44
 80060de:	e025      	b.n	800612c <RCC_GetClocksFreq+0x4e0>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 80060e0:	4b0b      	ldr	r3, [pc, #44]	; (8006110 <RCC_GetClocksFreq+0x4c4>)
 80060e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80060e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060ec:	d104      	bne.n	80060f8 <RCC_GetClocksFreq+0x4ac>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	645a      	str	r2, [r3, #68]	; 0x44
 80060f6:	e019      	b.n	800612c <RCC_GetClocksFreq+0x4e0>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 80060f8:	4b05      	ldr	r3, [pc, #20]	; (8006110 <RCC_GetClocksFreq+0x4c4>)
 80060fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060fc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006100:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006104:	d108      	bne.n	8006118 <RCC_GetClocksFreq+0x4cc>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800610c:	645a      	str	r2, [r3, #68]	; 0x44
 800610e:	e00d      	b.n	800612c <RCC_GetClocksFreq+0x4e0>
 8006110:	40021000 	.word	0x40021000
 8006114:	007a1200 	.word	0x007a1200
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8006118:	4b1e      	ldr	r3, [pc, #120]	; (8006194 <RCC_GetClocksFreq+0x548>)
 800611a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800611c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006120:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006124:	d102      	bne.n	800612c <RCC_GetClocksFreq+0x4e0>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a1b      	ldr	r2, [pc, #108]	; (8006198 <RCC_GetClocksFreq+0x54c>)
 800612a:	645a      	str	r2, [r3, #68]	; 0x44
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 800612c:	4b19      	ldr	r3, [pc, #100]	; (8006194 <RCC_GetClocksFreq+0x548>)
 800612e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006130:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006134:	2b00      	cmp	r3, #0
 8006136:	d104      	bne.n	8006142 <RCC_GetClocksFreq+0x4f6>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	689a      	ldr	r2, [r3, #8]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	649a      	str	r2, [r3, #72]	; 0x48
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 8006140:	e021      	b.n	8006186 <RCC_GetClocksFreq+0x53a>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8006142:	4b14      	ldr	r3, [pc, #80]	; (8006194 <RCC_GetClocksFreq+0x548>)
 8006144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006146:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800614a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800614e:	d104      	bne.n	800615a <RCC_GetClocksFreq+0x50e>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006158:	e015      	b.n	8006186 <RCC_GetClocksFreq+0x53a>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 800615a:	4b0e      	ldr	r3, [pc, #56]	; (8006194 <RCC_GetClocksFreq+0x548>)
 800615c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800615e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006162:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006166:	d104      	bne.n	8006172 <RCC_GetClocksFreq+0x526>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800616e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006170:	e009      	b.n	8006186 <RCC_GetClocksFreq+0x53a>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8006172:	4b08      	ldr	r3, [pc, #32]	; (8006194 <RCC_GetClocksFreq+0x548>)
 8006174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006176:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800617a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800617e:	d102      	bne.n	8006186 <RCC_GetClocksFreq+0x53a>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a05      	ldr	r2, [pc, #20]	; (8006198 <RCC_GetClocksFreq+0x54c>)
 8006184:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006186:	bf00      	nop
 8006188:	372c      	adds	r7, #44	; 0x2c
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	40021000 	.word	0x40021000
 8006198:	007a1200 	.word	0x007a1200

0800619c <RCC_ADCCLKConfig>:
  *     @arg RCC_ADC34PLLCLK_Div128: ADC34 clock = PLLCLK/128                                  
  *     @arg RCC_ADC34PLLCLK_Div256: ADC34 clock = PLLCLK/256
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PLLCLK)
{
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80061a4:	2300      	movs	r3, #0
 80061a6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PLLCLK));

  tmp = (RCC_PLLCLK >> 28);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	0f1b      	lsrs	r3, r3, #28
 80061ac:	60fb      	str	r3, [r7, #12]
  
  /* Clears ADCPRE34 bits */
  if (tmp != 0)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d006      	beq.n	80061c2 <RCC_ADCCLKConfig+0x26>
  {
    RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE34;
 80061b4:	4a0c      	ldr	r2, [pc, #48]	; (80061e8 <RCC_ADCCLKConfig+0x4c>)
 80061b6:	4b0c      	ldr	r3, [pc, #48]	; (80061e8 <RCC_ADCCLKConfig+0x4c>)
 80061b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ba:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 80061be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80061c0:	e005      	b.n	80061ce <RCC_ADCCLKConfig+0x32>
  }
   /* Clears ADCPRE12 bits */
  else
  {
    RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE12;
 80061c2:	4a09      	ldr	r2, [pc, #36]	; (80061e8 <RCC_ADCCLKConfig+0x4c>)
 80061c4:	4b08      	ldr	r3, [pc, #32]	; (80061e8 <RCC_ADCCLKConfig+0x4c>)
 80061c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c8:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80061cc:	62d3      	str	r3, [r2, #44]	; 0x2c
  }
  /* Set ADCPRE bits according to RCC_PLLCLK value */
  RCC->CFGR2 |= RCC_PLLCLK;
 80061ce:	4906      	ldr	r1, [pc, #24]	; (80061e8 <RCC_ADCCLKConfig+0x4c>)
 80061d0:	4b05      	ldr	r3, [pc, #20]	; (80061e8 <RCC_ADCCLKConfig+0x4c>)
 80061d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80061da:	bf00      	nop
 80061dc:	3714      	adds	r7, #20
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
 80061e6:	bf00      	nop
 80061e8:	40021000 	.word	0x40021000

080061ec <RCC_I2CCLKConfig>:
  *     @arg RCC_I2CxCLK_SYSCLK: I2Cx clock = System Clock
  *          (x can be 1 or 2 or 3).  
  * @retval None
  */
void RCC_I2CCLKConfig(uint32_t RCC_I2CCLK)
{ 
 80061ec:	b480      	push	{r7}
 80061ee:	b085      	sub	sp, #20
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80061f4:	2300      	movs	r3, #0
 80061f6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_I2CCLK(RCC_I2CCLK));

  tmp = (RCC_I2CCLK >> 28);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	0f1b      	lsrs	r3, r3, #28
 80061fc:	60fb      	str	r3, [r7, #12]
  
  /* Clear I2CSW bit */
    switch (tmp)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d00b      	beq.n	800621c <RCC_I2CCLKConfig+0x30>
 8006204:	2b01      	cmp	r3, #1
 8006206:	d302      	bcc.n	800620e <RCC_I2CCLKConfig+0x22>
 8006208:	2b02      	cmp	r3, #2
 800620a:	d00e      	beq.n	800622a <RCC_I2CCLKConfig+0x3e>
      break;
    case 0x02:
      RCC->CFGR3 &= ~RCC_CFGR3_I2C3SW;
      break;
    default:
      break;
 800620c:	e014      	b.n	8006238 <RCC_I2CCLKConfig+0x4c>
      RCC->CFGR3 &= ~RCC_CFGR3_I2C1SW;
 800620e:	4a10      	ldr	r2, [pc, #64]	; (8006250 <RCC_I2CCLKConfig+0x64>)
 8006210:	4b0f      	ldr	r3, [pc, #60]	; (8006250 <RCC_I2CCLKConfig+0x64>)
 8006212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006214:	f023 0310 	bic.w	r3, r3, #16
 8006218:	6313      	str	r3, [r2, #48]	; 0x30
      break;
 800621a:	e00d      	b.n	8006238 <RCC_I2CCLKConfig+0x4c>
      RCC->CFGR3 &= ~RCC_CFGR3_I2C2SW;
 800621c:	4a0c      	ldr	r2, [pc, #48]	; (8006250 <RCC_I2CCLKConfig+0x64>)
 800621e:	4b0c      	ldr	r3, [pc, #48]	; (8006250 <RCC_I2CCLKConfig+0x64>)
 8006220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006222:	f023 0320 	bic.w	r3, r3, #32
 8006226:	6313      	str	r3, [r2, #48]	; 0x30
      break;
 8006228:	e006      	b.n	8006238 <RCC_I2CCLKConfig+0x4c>
      RCC->CFGR3 &= ~RCC_CFGR3_I2C3SW;
 800622a:	4a09      	ldr	r2, [pc, #36]	; (8006250 <RCC_I2CCLKConfig+0x64>)
 800622c:	4b08      	ldr	r3, [pc, #32]	; (8006250 <RCC_I2CCLKConfig+0x64>)
 800622e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006230:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006234:	6313      	str	r3, [r2, #48]	; 0x30
      break;
 8006236:	bf00      	nop
  }
  
  /* Set I2CSW bits according to RCC_I2CCLK value */
  RCC->CFGR3 |= RCC_I2CCLK;
 8006238:	4905      	ldr	r1, [pc, #20]	; (8006250 <RCC_I2CCLKConfig+0x64>)
 800623a:	4b05      	ldr	r3, [pc, #20]	; (8006250 <RCC_I2CCLKConfig+0x64>)
 800623c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4313      	orrs	r3, r2
 8006242:	630b      	str	r3, [r1, #48]	; 0x30
}
 8006244:	bf00      	nop
 8006246:	3714      	adds	r7, #20
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr
 8006250:	40021000 	.word	0x40021000

08006254 <RCC_TIMCLKConfig>:
  *         For STM32F334x8 devices , only TIM1 can be clocked at 144MHz.
  *         For STM32F302x8 devices, TIM1/15/16/17 can be clocked at 144MHz
  * @retval None
  */
void RCC_TIMCLKConfig(uint32_t RCC_TIMCLK)
{ 
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 800625c:	2300      	movs	r3, #0
 800625e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK(RCC_TIMCLK));

  tmp = (RCC_TIMCLK >> 28);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	0f1b      	lsrs	r3, r3, #28
 8006264:	60fb      	str	r3, [r7, #12]
  
  /* Clear TIMSW bit */
  
  switch (tmp)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2b07      	cmp	r3, #7
 800626a:	d849      	bhi.n	8006300 <RCC_TIMCLKConfig+0xac>
 800626c:	a201      	add	r2, pc, #4	; (adr r2, 8006274 <RCC_TIMCLKConfig+0x20>)
 800626e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006272:	bf00      	nop
 8006274:	08006295 	.word	0x08006295
 8006278:	080062a3 	.word	0x080062a3
 800627c:	080062b1 	.word	0x080062b1
 8006280:	080062bf 	.word	0x080062bf
 8006284:	080062cd 	.word	0x080062cd
 8006288:	080062db 	.word	0x080062db
 800628c:	080062e7 	.word	0x080062e7
 8006290:	080062f3 	.word	0x080062f3
  {
    case 0x00: 
      RCC->CFGR3 &= ~RCC_CFGR3_TIM1SW;
 8006294:	4a21      	ldr	r2, [pc, #132]	; (800631c <RCC_TIMCLKConfig+0xc8>)
 8006296:	4b21      	ldr	r3, [pc, #132]	; (800631c <RCC_TIMCLKConfig+0xc8>)
 8006298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800629e:	6313      	str	r3, [r2, #48]	; 0x30
      break;
 80062a0:	e02f      	b.n	8006302 <RCC_TIMCLKConfig+0xae>
    case 0x01:
      RCC->CFGR3 &= ~RCC_CFGR3_TIM8SW;
 80062a2:	4a1e      	ldr	r2, [pc, #120]	; (800631c <RCC_TIMCLKConfig+0xc8>)
 80062a4:	4b1d      	ldr	r3, [pc, #116]	; (800631c <RCC_TIMCLKConfig+0xc8>)
 80062a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062ac:	6313      	str	r3, [r2, #48]	; 0x30
      break;
 80062ae:	e028      	b.n	8006302 <RCC_TIMCLKConfig+0xae>
    case 0x02:
      RCC->CFGR3 &= ~RCC_CFGR3_TIM15SW;
 80062b0:	4a1a      	ldr	r2, [pc, #104]	; (800631c <RCC_TIMCLKConfig+0xc8>)
 80062b2:	4b1a      	ldr	r3, [pc, #104]	; (800631c <RCC_TIMCLKConfig+0xc8>)
 80062b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062ba:	6313      	str	r3, [r2, #48]	; 0x30
      break;
 80062bc:	e021      	b.n	8006302 <RCC_TIMCLKConfig+0xae>
    case 0x03:
      RCC->CFGR3 &= ~RCC_CFGR3_TIM16SW;
 80062be:	4a17      	ldr	r2, [pc, #92]	; (800631c <RCC_TIMCLKConfig+0xc8>)
 80062c0:	4b16      	ldr	r3, [pc, #88]	; (800631c <RCC_TIMCLKConfig+0xc8>)
 80062c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062c8:	6313      	str	r3, [r2, #48]	; 0x30
      break;
 80062ca:	e01a      	b.n	8006302 <RCC_TIMCLKConfig+0xae>
    case 0x04:
      RCC->CFGR3 &= ~RCC_CFGR3_TIM17SW;
 80062cc:	4a13      	ldr	r2, [pc, #76]	; (800631c <RCC_TIMCLKConfig+0xc8>)
 80062ce:	4b13      	ldr	r3, [pc, #76]	; (800631c <RCC_TIMCLKConfig+0xc8>)
 80062d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062d6:	6313      	str	r3, [r2, #48]	; 0x30
      break;
 80062d8:	e013      	b.n	8006302 <RCC_TIMCLKConfig+0xae>
    case 0x05:
      RCC->CFGR3 &= ~RCC_CFGR3_TIM20SW;
 80062da:	4a10      	ldr	r2, [pc, #64]	; (800631c <RCC_TIMCLKConfig+0xc8>)
 80062dc:	4b0f      	ldr	r3, [pc, #60]	; (800631c <RCC_TIMCLKConfig+0xc8>)
 80062de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062e4:	6313      	str	r3, [r2, #48]	; 0x30
    case 0x06:
      RCC->CFGR3 &= ~RCC_CFGR3_TIM2SW;
 80062e6:	4a0d      	ldr	r2, [pc, #52]	; (800631c <RCC_TIMCLKConfig+0xc8>)
 80062e8:	4b0c      	ldr	r3, [pc, #48]	; (800631c <RCC_TIMCLKConfig+0xc8>)
 80062ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062f0:	6313      	str	r3, [r2, #48]	; 0x30
    case 0x07:
      RCC->CFGR3 &= ~RCC_CFGR3_TIM3SW;
 80062f2:	4a0a      	ldr	r2, [pc, #40]	; (800631c <RCC_TIMCLKConfig+0xc8>)
 80062f4:	4b09      	ldr	r3, [pc, #36]	; (800631c <RCC_TIMCLKConfig+0xc8>)
 80062f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80062fc:	6313      	str	r3, [r2, #48]	; 0x30
      break;
 80062fe:	e000      	b.n	8006302 <RCC_TIMCLKConfig+0xae>
    default:
      break;
 8006300:	bf00      	nop
  }
  
  /* Set I2CSW bits according to RCC_TIMCLK value */
  RCC->CFGR3 |= RCC_TIMCLK;
 8006302:	4906      	ldr	r1, [pc, #24]	; (800631c <RCC_TIMCLKConfig+0xc8>)
 8006304:	4b05      	ldr	r3, [pc, #20]	; (800631c <RCC_TIMCLKConfig+0xc8>)
 8006306:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4313      	orrs	r3, r2
 800630c:	630b      	str	r3, [r1, #48]	; 0x30
}
 800630e:	bf00      	nop
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	40021000 	.word	0x40021000

08006320 <RCC_HRTIM1CLKConfig>:
  *     @arg RCC_HRTIM1CLK_PLLCLK: TIMx clock = PLL output (running up to 144 MHz)
  *          (x can be 1 or 8).
  * @retval None
  */
void RCC_HRTIM1CLKConfig(uint32_t RCC_HRTIMCLK)
{ 
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HRTIMCLK(RCC_HRTIMCLK));
  
  /* Clear HRTIMSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_HRTIM1SW;
 8006328:	4a08      	ldr	r2, [pc, #32]	; (800634c <RCC_HRTIM1CLKConfig+0x2c>)
 800632a:	4b08      	ldr	r3, [pc, #32]	; (800634c <RCC_HRTIM1CLKConfig+0x2c>)
 800632c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800632e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006332:	6313      	str	r3, [r2, #48]	; 0x30

  /* Set HRTIMSW bits according to RCC_HRTIMCLK value */
  RCC->CFGR3 |= RCC_HRTIMCLK;
 8006334:	4905      	ldr	r1, [pc, #20]	; (800634c <RCC_HRTIM1CLKConfig+0x2c>)
 8006336:	4b05      	ldr	r3, [pc, #20]	; (800634c <RCC_HRTIM1CLKConfig+0x2c>)
 8006338:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4313      	orrs	r3, r2
 800633e:	630b      	str	r3, [r1, #48]	; 0x30
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	40021000 	.word	0x40021000

08006350 <RCC_USARTCLKConfig>:
  *     @arg RCC_USARTxCLK_HSI: USART clock = HSI Clock
  *          (x can be 1, 2, 3, 4 or 5).  
  * @retval None
  */
void RCC_USARTCLKConfig(uint32_t RCC_USARTCLK)
{ 
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8006358:	2300      	movs	r3, #0
 800635a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_USARTCLK(RCC_USARTCLK));

  tmp = (RCC_USARTCLK >> 28);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	0f1b      	lsrs	r3, r3, #28
 8006360:	60fb      	str	r3, [r7, #12]

  /* Clear USARTSW[1:0] bit */
  switch (tmp)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	3b01      	subs	r3, #1
 8006366:	2b04      	cmp	r3, #4
 8006368:	d82f      	bhi.n	80063ca <RCC_USARTCLKConfig+0x7a>
 800636a:	a201      	add	r2, pc, #4	; (adr r2, 8006370 <RCC_USARTCLKConfig+0x20>)
 800636c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006370:	08006385 	.word	0x08006385
 8006374:	08006393 	.word	0x08006393
 8006378:	080063a1 	.word	0x080063a1
 800637c:	080063af 	.word	0x080063af
 8006380:	080063bd 	.word	0x080063bd
  {
    case 0x01:  /* clear USART1SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART1SW;
 8006384:	4a17      	ldr	r2, [pc, #92]	; (80063e4 <RCC_USARTCLKConfig+0x94>)
 8006386:	4b17      	ldr	r3, [pc, #92]	; (80063e4 <RCC_USARTCLKConfig+0x94>)
 8006388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638a:	f023 0303 	bic.w	r3, r3, #3
 800638e:	6313      	str	r3, [r2, #48]	; 0x30
      break;
 8006390:	e01c      	b.n	80063cc <RCC_USARTCLKConfig+0x7c>
    case 0x02:  /* clear USART2SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART2SW;
 8006392:	4a14      	ldr	r2, [pc, #80]	; (80063e4 <RCC_USARTCLKConfig+0x94>)
 8006394:	4b13      	ldr	r3, [pc, #76]	; (80063e4 <RCC_USARTCLKConfig+0x94>)
 8006396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006398:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800639c:	6313      	str	r3, [r2, #48]	; 0x30
      break;
 800639e:	e015      	b.n	80063cc <RCC_USARTCLKConfig+0x7c>
    case 0x03:  /* clear USART3SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART3SW;
 80063a0:	4a10      	ldr	r2, [pc, #64]	; (80063e4 <RCC_USARTCLKConfig+0x94>)
 80063a2:	4b10      	ldr	r3, [pc, #64]	; (80063e4 <RCC_USARTCLKConfig+0x94>)
 80063a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a6:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80063aa:	6313      	str	r3, [r2, #48]	; 0x30
      break;
 80063ac:	e00e      	b.n	80063cc <RCC_USARTCLKConfig+0x7c>
    case 0x04:  /* clear UART4SW */
      RCC->CFGR3 &= ~RCC_CFGR3_UART4SW;
 80063ae:	4a0d      	ldr	r2, [pc, #52]	; (80063e4 <RCC_USARTCLKConfig+0x94>)
 80063b0:	4b0c      	ldr	r3, [pc, #48]	; (80063e4 <RCC_USARTCLKConfig+0x94>)
 80063b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80063b8:	6313      	str	r3, [r2, #48]	; 0x30
      break;
 80063ba:	e007      	b.n	80063cc <RCC_USARTCLKConfig+0x7c>
    case 0x05:  /* clear UART5SW */
      RCC->CFGR3 &= ~RCC_CFGR3_UART5SW;
 80063bc:	4a09      	ldr	r2, [pc, #36]	; (80063e4 <RCC_USARTCLKConfig+0x94>)
 80063be:	4b09      	ldr	r3, [pc, #36]	; (80063e4 <RCC_USARTCLKConfig+0x94>)
 80063c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80063c6:	6313      	str	r3, [r2, #48]	; 0x30
      break;
 80063c8:	e000      	b.n	80063cc <RCC_USARTCLKConfig+0x7c>
    default:
      break;
 80063ca:	bf00      	nop
  }

  /* Set USARTSW bits according to RCC_USARTCLK value */
  RCC->CFGR3 |= RCC_USARTCLK;
 80063cc:	4905      	ldr	r1, [pc, #20]	; (80063e4 <RCC_USARTCLKConfig+0x94>)
 80063ce:	4b05      	ldr	r3, [pc, #20]	; (80063e4 <RCC_USARTCLKConfig+0x94>)
 80063d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	630b      	str	r3, [r1, #48]	; 0x30
}
 80063d8:	bf00      	nop
 80063da:	3714      	adds	r7, #20
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr
 80063e4:	40021000 	.word	0x40021000

080063e8 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 80063f0:	4a04      	ldr	r2, [pc, #16]	; (8006404 <RCC_USBCLKConfig+0x1c>)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6013      	str	r3, [r2, #0]
}
 80063f6:	bf00      	nop
 80063f8:	370c      	adds	r7, #12
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr
 8006402:	bf00      	nop
 8006404:	424200d8 	.word	0x424200d8

08006408 <RCC_RTCCLKConfig>:
  * @note     The maximum input clock frequency for RTC is 2MHz (when using HSE as
  *           RTC clock source).             
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 8006410:	4905      	ldr	r1, [pc, #20]	; (8006428 <RCC_RTCCLKConfig+0x20>)
 8006412:	4b05      	ldr	r3, [pc, #20]	; (8006428 <RCC_RTCCLKConfig+0x20>)
 8006414:	6a1a      	ldr	r2, [r3, #32]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4313      	orrs	r3, r2
 800641a:	620b      	str	r3, [r1, #32]
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr
 8006428:	40021000 	.word	0x40021000

0800642c <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8006434:	4a04      	ldr	r2, [pc, #16]	; (8006448 <RCC_I2SCLKConfig+0x1c>)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6013      	str	r3, [r2, #0]
}
 800643a:	bf00      	nop
 800643c:	370c      	adds	r7, #12
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop
 8006448:	424200dc 	.word	0x424200dc

0800644c <RCC_RTCCLKCmd>:
  * @param  NewState: new state of the RTC clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	4603      	mov	r3, r0
 8006454:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8006456:	4a04      	ldr	r2, [pc, #16]	; (8006468 <RCC_RTCCLKCmd+0x1c>)
 8006458:	79fb      	ldrb	r3, [r7, #7]
 800645a:	6013      	str	r3, [r2, #0]
}
 800645c:	bf00      	nop
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr
 8006468:	4242043c 	.word	0x4242043c

0800646c <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	4603      	mov	r3, r0
 8006474:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8006476:	4a04      	ldr	r2, [pc, #16]	; (8006488 <RCC_BackupResetCmd+0x1c>)
 8006478:	79fb      	ldrb	r3, [r7, #7]
 800647a:	6013      	str	r3, [r2, #0]
}
 800647c:	bf00      	nop
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr
 8006488:	42420440 	.word	0x42420440

0800648c <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	460b      	mov	r3, r1
 8006496:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8006498:	78fb      	ldrb	r3, [r7, #3]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d006      	beq.n	80064ac <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 800649e:	490a      	ldr	r1, [pc, #40]	; (80064c8 <RCC_AHBPeriphClockCmd+0x3c>)
 80064a0:	4b09      	ldr	r3, [pc, #36]	; (80064c8 <RCC_AHBPeriphClockCmd+0x3c>)
 80064a2:	695a      	ldr	r2, [r3, #20]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 80064aa:	e006      	b.n	80064ba <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 80064ac:	4906      	ldr	r1, [pc, #24]	; (80064c8 <RCC_AHBPeriphClockCmd+0x3c>)
 80064ae:	4b06      	ldr	r3, [pc, #24]	; (80064c8 <RCC_AHBPeriphClockCmd+0x3c>)
 80064b0:	695a      	ldr	r2, [r3, #20]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	43db      	mvns	r3, r3
 80064b6:	4013      	ands	r3, r2
 80064b8:	614b      	str	r3, [r1, #20]
}
 80064ba:	bf00      	nop
 80064bc:	370c      	adds	r7, #12
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop
 80064c8:	40021000 	.word	0x40021000

080064cc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	460b      	mov	r3, r1
 80064d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80064d8:	78fb      	ldrb	r3, [r7, #3]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d006      	beq.n	80064ec <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80064de:	490a      	ldr	r1, [pc, #40]	; (8006508 <RCC_APB2PeriphClockCmd+0x3c>)
 80064e0:	4b09      	ldr	r3, [pc, #36]	; (8006508 <RCC_APB2PeriphClockCmd+0x3c>)
 80064e2:	699a      	ldr	r2, [r3, #24]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80064ea:	e006      	b.n	80064fa <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80064ec:	4906      	ldr	r1, [pc, #24]	; (8006508 <RCC_APB2PeriphClockCmd+0x3c>)
 80064ee:	4b06      	ldr	r3, [pc, #24]	; (8006508 <RCC_APB2PeriphClockCmd+0x3c>)
 80064f0:	699a      	ldr	r2, [r3, #24]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	43db      	mvns	r3, r3
 80064f6:	4013      	ands	r3, r2
 80064f8:	618b      	str	r3, [r1, #24]
}
 80064fa:	bf00      	nop
 80064fc:	370c      	adds	r7, #12
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	40021000 	.word	0x40021000

0800650c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	460b      	mov	r3, r1
 8006516:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006518:	78fb      	ldrb	r3, [r7, #3]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d006      	beq.n	800652c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800651e:	490a      	ldr	r1, [pc, #40]	; (8006548 <RCC_APB1PeriphClockCmd+0x3c>)
 8006520:	4b09      	ldr	r3, [pc, #36]	; (8006548 <RCC_APB1PeriphClockCmd+0x3c>)
 8006522:	69da      	ldr	r2, [r3, #28]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4313      	orrs	r3, r2
 8006528:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800652a:	e006      	b.n	800653a <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800652c:	4906      	ldr	r1, [pc, #24]	; (8006548 <RCC_APB1PeriphClockCmd+0x3c>)
 800652e:	4b06      	ldr	r3, [pc, #24]	; (8006548 <RCC_APB1PeriphClockCmd+0x3c>)
 8006530:	69da      	ldr	r2, [r3, #28]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	43db      	mvns	r3, r3
 8006536:	4013      	ands	r3, r2
 8006538:	61cb      	str	r3, [r1, #28]
}
 800653a:	bf00      	nop
 800653c:	370c      	adds	r7, #12
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	40021000 	.word	0x40021000

0800654c <RCC_AHBPeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphResetCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	460b      	mov	r3, r1
 8006556:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006558:	78fb      	ldrb	r3, [r7, #3]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d006      	beq.n	800656c <RCC_AHBPeriphResetCmd+0x20>
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
 800655e:	490a      	ldr	r1, [pc, #40]	; (8006588 <RCC_AHBPeriphResetCmd+0x3c>)
 8006560:	4b09      	ldr	r3, [pc, #36]	; (8006588 <RCC_AHBPeriphResetCmd+0x3c>)
 8006562:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4313      	orrs	r3, r2
 8006568:	628b      	str	r3, [r1, #40]	; 0x28
  }
  else
  {
    RCC->AHBRSTR &= ~RCC_AHBPeriph;
  }
}
 800656a:	e006      	b.n	800657a <RCC_AHBPeriphResetCmd+0x2e>
    RCC->AHBRSTR &= ~RCC_AHBPeriph;
 800656c:	4906      	ldr	r1, [pc, #24]	; (8006588 <RCC_AHBPeriphResetCmd+0x3c>)
 800656e:	4b06      	ldr	r3, [pc, #24]	; (8006588 <RCC_AHBPeriphResetCmd+0x3c>)
 8006570:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	43db      	mvns	r3, r3
 8006576:	4013      	ands	r3, r2
 8006578:	628b      	str	r3, [r1, #40]	; 0x28
}
 800657a:	bf00      	nop
 800657c:	370c      	adds	r7, #12
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	40021000 	.word	0x40021000

0800658c <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	460b      	mov	r3, r1
 8006596:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006598:	78fb      	ldrb	r3, [r7, #3]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d006      	beq.n	80065ac <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800659e:	490a      	ldr	r1, [pc, #40]	; (80065c8 <RCC_APB2PeriphResetCmd+0x3c>)
 80065a0:	4b09      	ldr	r3, [pc, #36]	; (80065c8 <RCC_APB2PeriphResetCmd+0x3c>)
 80065a2:	68da      	ldr	r2, [r3, #12]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	60cb      	str	r3, [r1, #12]
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 80065aa:	e006      	b.n	80065ba <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80065ac:	4906      	ldr	r1, [pc, #24]	; (80065c8 <RCC_APB2PeriphResetCmd+0x3c>)
 80065ae:	4b06      	ldr	r3, [pc, #24]	; (80065c8 <RCC_APB2PeriphResetCmd+0x3c>)
 80065b0:	68da      	ldr	r2, [r3, #12]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	43db      	mvns	r3, r3
 80065b6:	4013      	ands	r3, r2
 80065b8:	60cb      	str	r3, [r1, #12]
}
 80065ba:	bf00      	nop
 80065bc:	370c      	adds	r7, #12
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	40021000 	.word	0x40021000

080065cc <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	460b      	mov	r3, r1
 80065d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80065d8:	78fb      	ldrb	r3, [r7, #3]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d006      	beq.n	80065ec <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80065de:	490a      	ldr	r1, [pc, #40]	; (8006608 <RCC_APB1PeriphResetCmd+0x3c>)
 80065e0:	4b09      	ldr	r3, [pc, #36]	; (8006608 <RCC_APB1PeriphResetCmd+0x3c>)
 80065e2:	691a      	ldr	r2, [r3, #16]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	610b      	str	r3, [r1, #16]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 80065ea:	e006      	b.n	80065fa <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 80065ec:	4906      	ldr	r1, [pc, #24]	; (8006608 <RCC_APB1PeriphResetCmd+0x3c>)
 80065ee:	4b06      	ldr	r3, [pc, #24]	; (8006608 <RCC_APB1PeriphResetCmd+0x3c>)
 80065f0:	691a      	ldr	r2, [r3, #16]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	43db      	mvns	r3, r3
 80065f6:	4013      	ands	r3, r2
 80065f8:	610b      	str	r3, [r1, #16]
}
 80065fa:	bf00      	nop
 80065fc:	370c      	adds	r7, #12
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	40021000 	.word	0x40021000

0800660c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	4603      	mov	r3, r0
 8006614:	460a      	mov	r2, r1
 8006616:	71fb      	strb	r3, [r7, #7]
 8006618:	4613      	mov	r3, r2
 800661a:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800661c:	79bb      	ldrb	r3, [r7, #6]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d008      	beq.n	8006634 <RCC_ITConfig+0x28>
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8006622:	490c      	ldr	r1, [pc, #48]	; (8006654 <RCC_ITConfig+0x48>)
 8006624:	4b0b      	ldr	r3, [pc, #44]	; (8006654 <RCC_ITConfig+0x48>)
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	b2da      	uxtb	r2, r3
 800662a:	79fb      	ldrb	r3, [r7, #7]
 800662c:	4313      	orrs	r3, r2
 800662e:	b2db      	uxtb	r3, r3
 8006630:	700b      	strb	r3, [r1, #0]
  else
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
  }
}
 8006632:	e009      	b.n	8006648 <RCC_ITConfig+0x3c>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8006634:	4907      	ldr	r1, [pc, #28]	; (8006654 <RCC_ITConfig+0x48>)
 8006636:	4b07      	ldr	r3, [pc, #28]	; (8006654 <RCC_ITConfig+0x48>)
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	b2da      	uxtb	r2, r3
 800663c:	79fb      	ldrb	r3, [r7, #7]
 800663e:	43db      	mvns	r3, r3
 8006640:	b2db      	uxtb	r3, r3
 8006642:	4013      	ands	r3, r2
 8006644:	b2db      	uxtb	r3, r3
 8006646:	700b      	strb	r3, [r1, #0]
}
 8006648:	bf00      	nop
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr
 8006654:	40021009 	.word	0x40021009

08006658 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8006658:	b480      	push	{r7}
 800665a:	b087      	sub	sp, #28
 800665c:	af00      	add	r7, sp, #0
 800665e:	4603      	mov	r3, r0
 8006660:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8006662:	2300      	movs	r3, #0
 8006664:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8006666:	2300      	movs	r3, #0
 8006668:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 800666a:	2300      	movs	r3, #0
 800666c:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 800666e:	79fb      	ldrb	r3, [r7, #7]
 8006670:	095b      	lsrs	r3, r3, #5
 8006672:	b2db      	uxtb	r3, r3
 8006674:	60fb      	str	r3, [r7, #12]

   if (tmp == 0)               /* The flag to check is in CR register */
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d103      	bne.n	8006684 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 800667c:	4b16      	ldr	r3, [pc, #88]	; (80066d8 <RCC_GetFlagStatus+0x80>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	617b      	str	r3, [r7, #20]
 8006682:	e010      	b.n	80066a6 <RCC_GetFlagStatus+0x4e>
  }
  else if (tmp == 1)          /* The flag to check is in BDCR register */
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2b01      	cmp	r3, #1
 8006688:	d103      	bne.n	8006692 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 800668a:	4b13      	ldr	r3, [pc, #76]	; (80066d8 <RCC_GetFlagStatus+0x80>)
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	617b      	str	r3, [r7, #20]
 8006690:	e009      	b.n	80066a6 <RCC_GetFlagStatus+0x4e>
  }
  else if (tmp == 4)          /* The flag to check is in CFGR register */
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2b04      	cmp	r3, #4
 8006696:	d103      	bne.n	80066a0 <RCC_GetFlagStatus+0x48>
  {
    statusreg = RCC->CFGR;
 8006698:	4b0f      	ldr	r3, [pc, #60]	; (80066d8 <RCC_GetFlagStatus+0x80>)
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	617b      	str	r3, [r7, #20]
 800669e:	e002      	b.n	80066a6 <RCC_GetFlagStatus+0x4e>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 80066a0:	4b0d      	ldr	r3, [pc, #52]	; (80066d8 <RCC_GetFlagStatus+0x80>)
 80066a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a4:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 80066a6:	79fb      	ldrb	r3, [r7, #7]
 80066a8:	f003 031f 	and.w	r3, r3, #31
 80066ac:	60fb      	str	r3, [r7, #12]

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 80066ae:	697a      	ldr	r2, [r7, #20]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	fa22 f303 	lsr.w	r3, r2, r3
 80066b6:	f003 0301 	and.w	r3, r3, #1
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d002      	beq.n	80066c4 <RCC_GetFlagStatus+0x6c>
  {
    bitstatus = SET;
 80066be:	2301      	movs	r3, #1
 80066c0:	74fb      	strb	r3, [r7, #19]
 80066c2:	e001      	b.n	80066c8 <RCC_GetFlagStatus+0x70>
  }
  else
  {
    bitstatus = RESET;
 80066c4:	2300      	movs	r3, #0
 80066c6:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 80066c8:	7cfb      	ldrb	r3, [r7, #19]
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	371c      	adds	r7, #28
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	40021000 	.word	0x40021000

080066dc <RCC_ClearFlag>:
  *         RCC_FLAG_SFTRST, RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST.
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 80066dc:	b480      	push	{r7}
 80066de:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 80066e0:	4a05      	ldr	r2, [pc, #20]	; (80066f8 <RCC_ClearFlag+0x1c>)
 80066e2:	4b05      	ldr	r3, [pc, #20]	; (80066f8 <RCC_ClearFlag+0x1c>)
 80066e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066ea:	6253      	str	r3, [r2, #36]	; 0x24
}
 80066ec:	bf00      	nop
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	40021000 	.word	0x40021000

080066fc <RCC_GetITStatus>:
  *     @arg RCC_IT_PLLRDY: PLL ready interrupt
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	4603      	mov	r3, r0
 8006704:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 8006706:	2300      	movs	r3, #0
 8006708:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));
  
  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 800670a:	4b09      	ldr	r3, [pc, #36]	; (8006730 <RCC_GetITStatus+0x34>)
 800670c:	689a      	ldr	r2, [r3, #8]
 800670e:	79fb      	ldrb	r3, [r7, #7]
 8006710:	4013      	ands	r3, r2
 8006712:	2b00      	cmp	r3, #0
 8006714:	d002      	beq.n	800671c <RCC_GetITStatus+0x20>
  {
    bitstatus = SET;
 8006716:	2301      	movs	r3, #1
 8006718:	73fb      	strb	r3, [r7, #15]
 800671a:	e001      	b.n	8006720 <RCC_GetITStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 800671c:	2300      	movs	r3, #0
 800671e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 8006720:	7bfb      	ldrb	r3, [r7, #15]
}
 8006722:	4618      	mov	r0, r3
 8006724:	3714      	adds	r7, #20
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	40021000 	.word	0x40021000

08006734 <RCC_ClearITPendingBit>:
  *     @arg RCC_IT_PLLRDY: PLL ready interrupt
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	4603      	mov	r3, r0
 800673c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));
  
  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 800673e:	4a04      	ldr	r2, [pc, #16]	; (8006750 <RCC_ClearITPendingBit+0x1c>)
 8006740:	79fb      	ldrb	r3, [r7, #7]
 8006742:	7013      	strb	r3, [r2, #0]
}
 8006744:	bf00      	nop
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr
 8006750:	4002100a 	.word	0x4002100a

08006754 <SYSCFG_DeInit>:
  * @retval None
  * @note   MEM_MODE bits are not affected by APB reset.
  *         MEM_MODE bits took the value from the user option bytes.
  */
void SYSCFG_DeInit(void)
{
 8006754:	b480      	push	{r7}
 8006756:	af00      	add	r7, sp, #0
  /* Reset SYSCFG_CFGR1 register to reset value without affecting MEM_MODE bits */
  SYSCFG->CFGR1 &= SYSCFG_CFGR1_MEM_MODE;
 8006758:	4a14      	ldr	r2, [pc, #80]	; (80067ac <SYSCFG_DeInit+0x58>)
 800675a:	4b14      	ldr	r3, [pc, #80]	; (80067ac <SYSCFG_DeInit+0x58>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 0307 	and.w	r3, r3, #7
 8006762:	6013      	str	r3, [r2, #0]
  /* Set FPU Interrupt Enable bits to default value */
  SYSCFG->CFGR1 |= 0x7C000000;
 8006764:	4a11      	ldr	r2, [pc, #68]	; (80067ac <SYSCFG_DeInit+0x58>)
 8006766:	4b11      	ldr	r3, [pc, #68]	; (80067ac <SYSCFG_DeInit+0x58>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f043 43f8 	orr.w	r3, r3, #2080374784	; 0x7c000000
 800676e:	6013      	str	r3, [r2, #0]
  /* Reset RAM Write protection bits to default value */
  SYSCFG->RCR = 0x00000000;
 8006770:	4b0e      	ldr	r3, [pc, #56]	; (80067ac <SYSCFG_DeInit+0x58>)
 8006772:	2200      	movs	r2, #0
 8006774:	605a      	str	r2, [r3, #4]
  /* Set EXTICRx registers to reset value */
  SYSCFG->EXTICR[0] = 0;
 8006776:	4b0d      	ldr	r3, [pc, #52]	; (80067ac <SYSCFG_DeInit+0x58>)
 8006778:	2200      	movs	r2, #0
 800677a:	609a      	str	r2, [r3, #8]
  SYSCFG->EXTICR[1] = 0;
 800677c:	4b0b      	ldr	r3, [pc, #44]	; (80067ac <SYSCFG_DeInit+0x58>)
 800677e:	2200      	movs	r2, #0
 8006780:	60da      	str	r2, [r3, #12]
  SYSCFG->EXTICR[2] = 0;
 8006782:	4b0a      	ldr	r3, [pc, #40]	; (80067ac <SYSCFG_DeInit+0x58>)
 8006784:	2200      	movs	r2, #0
 8006786:	611a      	str	r2, [r3, #16]
  SYSCFG->EXTICR[3] = 0;
 8006788:	4b08      	ldr	r3, [pc, #32]	; (80067ac <SYSCFG_DeInit+0x58>)
 800678a:	2200      	movs	r2, #0
 800678c:	615a      	str	r2, [r3, #20]
  /* Set CFGR2 register to reset value */
  SYSCFG->CFGR2 = 0;
 800678e:	4b07      	ldr	r3, [pc, #28]	; (80067ac <SYSCFG_DeInit+0x58>)
 8006790:	2200      	movs	r2, #0
 8006792:	619a      	str	r2, [r3, #24]
  /* Set CFGR3 register to reset value */
  SYSCFG->CFGR3 = 0;
 8006794:	4b05      	ldr	r3, [pc, #20]	; (80067ac <SYSCFG_DeInit+0x58>)
 8006796:	2200      	movs	r2, #0
 8006798:	651a      	str	r2, [r3, #80]	; 0x50
  /* Set CFGR4 register to reset value */
  SYSCFG->CFGR4 = 0;
 800679a:	4b04      	ldr	r3, [pc, #16]	; (80067ac <SYSCFG_DeInit+0x58>)
 800679c:	2200      	movs	r2, #0
 800679e:	649a      	str	r2, [r3, #72]	; 0x48
}
 80067a0:	bf00      	nop
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	40010000 	.word	0x40010000

080067b0 <SYSCFG_MemoryRemapConfig>:
  *     @arg SYSCFG_MemoryRemap_SRAM: Embedded SRAM mapped at 0x00000000
  *     @arg SYSCFG_MemoryRemap_FMC: External memory through FMC   
  * @retval None
  */
void SYSCFG_MemoryRemapConfig(uint32_t SYSCFG_MemoryRemap)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b085      	sub	sp, #20
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr1 = 0;
 80067b8:	2300      	movs	r3, #0
 80067ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameter */
  assert_param(IS_SYSCFG_MEMORY_REMAP(SYSCFG_MemoryRemap));

  /* Get CFGR1 register value */
  tmpcfgr1 = SYSCFG->CFGR1;
 80067bc:	4b09      	ldr	r3, [pc, #36]	; (80067e4 <SYSCFG_MemoryRemapConfig+0x34>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	60fb      	str	r3, [r7, #12]

  /* Clear MEM_MODE bits */
  tmpcfgr1 &= (uint32_t) (~SYSCFG_CFGR1_MEM_MODE);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f023 0307 	bic.w	r3, r3, #7
 80067c8:	60fb      	str	r3, [r7, #12]

  /* Set the new MEM_MODE bits value */
  tmpcfgr1 |= (uint32_t) SYSCFG_MemoryRemap;
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	60fb      	str	r3, [r7, #12]

  /* Set CFGR1 register with the new memory remap configuration */
  SYSCFG->CFGR1 = tmpcfgr1;
 80067d2:	4a04      	ldr	r2, [pc, #16]	; (80067e4 <SYSCFG_MemoryRemapConfig+0x34>)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6013      	str	r3, [r2, #0]
}
 80067d8:	bf00      	nop
 80067da:	3714      	adds	r7, #20
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr
 80067e4:	40010000 	.word	0x40010000

080067e8 <SYSCFG_DMAChannelRemapConfig>:
  *           use SYSCFG_DMAChannelRemapConfig(SYSCFG_DMARemap_TIM17, Disable)
  *           to map TIM17 DMA requests to DMA1 channel 1 (default mapping)
  * @retval None
  */
void SYSCFG_DMAChannelRemapConfig(uint32_t SYSCFG_DMARemap, FunctionalState NewState)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	460b      	mov	r3, r1
 80067f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SYSCFG_DMA_REMAP(SYSCFG_DMARemap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if ((SYSCFG_DMARemap & 0x80000000)!= 0x80000000)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	db11      	blt.n	800681e <SYSCFG_DMAChannelRemapConfig+0x36>
  {
    if (NewState != DISABLE)
 80067fa:	78fb      	ldrb	r3, [r7, #3]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d006      	beq.n	800680e <SYSCFG_DMAChannelRemapConfig+0x26>
    {
      /* Remap the DMA channel */
      SYSCFG->CFGR1 |= (uint32_t)SYSCFG_DMARemap;
 8006800:	4912      	ldr	r1, [pc, #72]	; (800684c <SYSCFG_DMAChannelRemapConfig+0x64>)
 8006802:	4b12      	ldr	r3, [pc, #72]	; (800684c <SYSCFG_DMAChannelRemapConfig+0x64>)
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4313      	orrs	r3, r2
 800680a:	600b      	str	r3, [r1, #0]
    {
      /* use the default DMA channel mapping */
      SYSCFG->CFGR3 &= (uint32_t)(~SYSCFG_DMARemap);
    }
  }
}
 800680c:	e018      	b.n	8006840 <SYSCFG_DMAChannelRemapConfig+0x58>
      SYSCFG->CFGR1 &= (uint32_t)(~SYSCFG_DMARemap);
 800680e:	490f      	ldr	r1, [pc, #60]	; (800684c <SYSCFG_DMAChannelRemapConfig+0x64>)
 8006810:	4b0e      	ldr	r3, [pc, #56]	; (800684c <SYSCFG_DMAChannelRemapConfig+0x64>)
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	43db      	mvns	r3, r3
 8006818:	4013      	ands	r3, r2
 800681a:	600b      	str	r3, [r1, #0]
}
 800681c:	e010      	b.n	8006840 <SYSCFG_DMAChannelRemapConfig+0x58>
    if (NewState != DISABLE)
 800681e:	78fb      	ldrb	r3, [r7, #3]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d006      	beq.n	8006832 <SYSCFG_DMAChannelRemapConfig+0x4a>
      SYSCFG->CFGR3 |= (uint32_t)SYSCFG_DMARemap;
 8006824:	4909      	ldr	r1, [pc, #36]	; (800684c <SYSCFG_DMAChannelRemapConfig+0x64>)
 8006826:	4b09      	ldr	r3, [pc, #36]	; (800684c <SYSCFG_DMAChannelRemapConfig+0x64>)
 8006828:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4313      	orrs	r3, r2
 800682e:	650b      	str	r3, [r1, #80]	; 0x50
}
 8006830:	e006      	b.n	8006840 <SYSCFG_DMAChannelRemapConfig+0x58>
      SYSCFG->CFGR3 &= (uint32_t)(~SYSCFG_DMARemap);
 8006832:	4906      	ldr	r1, [pc, #24]	; (800684c <SYSCFG_DMAChannelRemapConfig+0x64>)
 8006834:	4b05      	ldr	r3, [pc, #20]	; (800684c <SYSCFG_DMAChannelRemapConfig+0x64>)
 8006836:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	43db      	mvns	r3, r3
 800683c:	4013      	ands	r3, r2
 800683e:	650b      	str	r3, [r1, #80]	; 0x50
}
 8006840:	bf00      	nop
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr
 800684c:	40010000 	.word	0x40010000

08006850 <SYSCFG_TriggerRemapConfig>:
  * @note   ENABLE:  Enable fast mode plus driving capability for selected pin
  * @note   DISABLE: Disable fast mode plus driving capability for selected pin
  * @retval None
  */
void SYSCFG_TriggerRemapConfig(uint32_t SYSCFG_TriggerRemap, FunctionalState NewState)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	460b      	mov	r3, r1
 800685a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SYSCFG_TRIGGER_REMAP(SYSCFG_TriggerRemap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if ((SYSCFG_TriggerRemap & 0x80000000)!= 0x80000000)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2b00      	cmp	r3, #0
 8006860:	db11      	blt.n	8006886 <SYSCFG_TriggerRemapConfig+0x36>
  {
    if (NewState != DISABLE)
 8006862:	78fb      	ldrb	r3, [r7, #3]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d006      	beq.n	8006876 <SYSCFG_TriggerRemapConfig+0x26>
    {
      /* Remap the trigger */
      SYSCFG->CFGR1 |= (uint32_t)SYSCFG_TriggerRemap;
 8006868:	4912      	ldr	r1, [pc, #72]	; (80068b4 <SYSCFG_TriggerRemapConfig+0x64>)
 800686a:	4b12      	ldr	r3, [pc, #72]	; (80068b4 <SYSCFG_TriggerRemapConfig+0x64>)
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4313      	orrs	r3, r2
 8006872:	600b      	str	r3, [r1, #0]
    {
      /* Use the default trigger mapping */
      SYSCFG->CFGR3 &= (uint32_t)(~SYSCFG_TriggerRemap);
    }
  }
}
 8006874:	e018      	b.n	80068a8 <SYSCFG_TriggerRemapConfig+0x58>
      SYSCFG->CFGR1 &= (uint32_t)(~SYSCFG_TriggerRemap);
 8006876:	490f      	ldr	r1, [pc, #60]	; (80068b4 <SYSCFG_TriggerRemapConfig+0x64>)
 8006878:	4b0e      	ldr	r3, [pc, #56]	; (80068b4 <SYSCFG_TriggerRemapConfig+0x64>)
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	43db      	mvns	r3, r3
 8006880:	4013      	ands	r3, r2
 8006882:	600b      	str	r3, [r1, #0]
}
 8006884:	e010      	b.n	80068a8 <SYSCFG_TriggerRemapConfig+0x58>
    if (NewState != DISABLE)
 8006886:	78fb      	ldrb	r3, [r7, #3]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d006      	beq.n	800689a <SYSCFG_TriggerRemapConfig+0x4a>
      SYSCFG->CFGR3 |= (uint32_t)SYSCFG_TriggerRemap;
 800688c:	4909      	ldr	r1, [pc, #36]	; (80068b4 <SYSCFG_TriggerRemapConfig+0x64>)
 800688e:	4b09      	ldr	r3, [pc, #36]	; (80068b4 <SYSCFG_TriggerRemapConfig+0x64>)
 8006890:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4313      	orrs	r3, r2
 8006896:	650b      	str	r3, [r1, #80]	; 0x50
}
 8006898:	e006      	b.n	80068a8 <SYSCFG_TriggerRemapConfig+0x58>
      SYSCFG->CFGR3 &= (uint32_t)(~SYSCFG_TriggerRemap);
 800689a:	4906      	ldr	r1, [pc, #24]	; (80068b4 <SYSCFG_TriggerRemapConfig+0x64>)
 800689c:	4b05      	ldr	r3, [pc, #20]	; (80068b4 <SYSCFG_TriggerRemapConfig+0x64>)
 800689e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	43db      	mvns	r3, r3
 80068a4:	4013      	ands	r3, r2
 80068a6:	650b      	str	r3, [r1, #80]	; 0x50
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr
 80068b4:	40010000 	.word	0x40010000

080068b8 <SYSCFG_EncoderRemapConfig>:
  *     @arg SYSCFG_EncoderRemap_TIM3: Timer 3 IC1 and IC2 connected to TIM15 IC1 and IC2
  *     @arg SYSCFG_EncoderRemap_TIM4: Timer 4 IC1 and IC2 connected to TIM15 IC1 and IC2
  * @retval None
  */
void SYSCFG_EncoderRemapConfig(uint32_t SYSCFG_EncoderRemap)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ENCODER_REMAP(SYSCFG_EncoderRemap));

  /* Reset the encoder mode remapping bits */
  SYSCFG->CFGR1 &= (uint32_t)(~SYSCFG_CFGR1_ENCODER_MODE);
 80068c0:	4a08      	ldr	r2, [pc, #32]	; (80068e4 <SYSCFG_EncoderRemapConfig+0x2c>)
 80068c2:	4b08      	ldr	r3, [pc, #32]	; (80068e4 <SYSCFG_EncoderRemapConfig+0x2c>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80068ca:	6013      	str	r3, [r2, #0]

  /* Set the selected configuration */
  SYSCFG->CFGR1 |= (uint32_t)(SYSCFG_EncoderRemap);
 80068cc:	4905      	ldr	r1, [pc, #20]	; (80068e4 <SYSCFG_EncoderRemapConfig+0x2c>)
 80068ce:	4b05      	ldr	r3, [pc, #20]	; (80068e4 <SYSCFG_EncoderRemapConfig+0x2c>)
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	600b      	str	r3, [r1, #0]
}
 80068d8:	bf00      	nop
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr
 80068e4:	40010000 	.word	0x40010000

080068e8 <SYSCFG_USBInterruptLineRemapCmd>:
  *         @arg  USB Device Low Priority (USB_LP) interrupt mapped to line 20.
  *         @arg  USB Wakeup Interrupt (USB_WKUP) interrupt mapped to line 42.
  * @retval None
  */
void SYSCFG_USBInterruptLineRemapCmd(FunctionalState NewState)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	4603      	mov	r3, r0
 80068f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Remap the USB interrupt lines */
  *(__IO uint32_t *) CFGR1_USBITRMP_BB = (uint32_t)NewState;
 80068f2:	4a04      	ldr	r2, [pc, #16]	; (8006904 <SYSCFG_USBInterruptLineRemapCmd+0x1c>)
 80068f4:	79fb      	ldrb	r3, [r7, #7]
 80068f6:	6013      	str	r3, [r2, #0]
}
 80068f8:	bf00      	nop
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr
 8006904:	42200014 	.word	0x42200014

08006908 <SYSCFG_I2CFastModePlusConfig>:
  * @note  For all I2C2 pins fast mode plus driving capability can be enabled
  *        only by using SYSCFG_I2CFastModePlus_I2C2 parameter.
  * @retval None
  */
void SYSCFG_I2CFastModePlusConfig(uint32_t SYSCFG_I2CFastModePlus, FunctionalState NewState)
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	460b      	mov	r3, r1
 8006912:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SYSCFG_I2C_FMP(SYSCFG_I2CFastModePlus));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006914:	78fb      	ldrb	r3, [r7, #3]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d006      	beq.n	8006928 <SYSCFG_I2CFastModePlusConfig+0x20>
  {
    /* Enable fast mode plus driving capability for selected I2C pin */
    SYSCFG->CFGR1 |= (uint32_t)SYSCFG_I2CFastModePlus;
 800691a:	490a      	ldr	r1, [pc, #40]	; (8006944 <SYSCFG_I2CFastModePlusConfig+0x3c>)
 800691c:	4b09      	ldr	r3, [pc, #36]	; (8006944 <SYSCFG_I2CFastModePlusConfig+0x3c>)
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4313      	orrs	r3, r2
 8006924:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable fast mode plus driving capability for selected I2C pin */
    SYSCFG->CFGR1 &= (uint32_t)(~SYSCFG_I2CFastModePlus);
  }
}
 8006926:	e006      	b.n	8006936 <SYSCFG_I2CFastModePlusConfig+0x2e>
    SYSCFG->CFGR1 &= (uint32_t)(~SYSCFG_I2CFastModePlus);
 8006928:	4906      	ldr	r1, [pc, #24]	; (8006944 <SYSCFG_I2CFastModePlusConfig+0x3c>)
 800692a:	4b06      	ldr	r3, [pc, #24]	; (8006944 <SYSCFG_I2CFastModePlusConfig+0x3c>)
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	43db      	mvns	r3, r3
 8006932:	4013      	ands	r3, r2
 8006934:	600b      	str	r3, [r1, #0]
}
 8006936:	bf00      	nop
 8006938:	370c      	adds	r7, #12
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	40010000 	.word	0x40010000

08006948 <SYSCFG_ITConfig>:
  * @param  NewState: new state of the specified SYSCFG interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SYSCFG_ITConfig(uint32_t SYSCFG_IT, FunctionalState NewState)  
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	460b      	mov	r3, r1
 8006952:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SYSCFG_IT(SYSCFG_IT)); 

  if (NewState != DISABLE)
 8006954:	78fb      	ldrb	r3, [r7, #3]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d006      	beq.n	8006968 <SYSCFG_ITConfig+0x20>
  {
    /* Enable the selected SYSCFG interrupts */
    SYSCFG->CFGR1 |= SYSCFG_IT;
 800695a:	490a      	ldr	r1, [pc, #40]	; (8006984 <SYSCFG_ITConfig+0x3c>)
 800695c:	4b09      	ldr	r3, [pc, #36]	; (8006984 <SYSCFG_ITConfig+0x3c>)
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4313      	orrs	r3, r2
 8006964:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected SYSCFG interrupts */
    SYSCFG->CFGR1 &= ((uint32_t)~SYSCFG_IT);
  }
}
 8006966:	e006      	b.n	8006976 <SYSCFG_ITConfig+0x2e>
    SYSCFG->CFGR1 &= ((uint32_t)~SYSCFG_IT);
 8006968:	4906      	ldr	r1, [pc, #24]	; (8006984 <SYSCFG_ITConfig+0x3c>)
 800696a:	4b06      	ldr	r3, [pc, #24]	; (8006984 <SYSCFG_ITConfig+0x3c>)
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	43db      	mvns	r3, r3
 8006972:	4013      	ands	r3, r2
 8006974:	600b      	str	r3, [r1, #0]
}
 8006976:	bf00      	nop
 8006978:	370c      	adds	r7, #12
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop
 8006984:	40010000 	.word	0x40010000

08006988 <SYSCFG_EXTILineConfig>:
  * @param  EXTI_PinSourcex: specifies the EXTI line to be configured.
  *         This parameter can be EXTI_PinSourcex where x can be (0..15)
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8006988:	b490      	push	{r4, r7}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	4603      	mov	r3, r0
 8006990:	460a      	mov	r2, r1
 8006992:	71fb      	strb	r3, [r7, #7]
 8006994:	4613      	mov	r3, r2
 8006996:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8006998:	2300      	movs	r3, #0
 800699a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 800699c:	79bb      	ldrb	r3, [r7, #6]
 800699e:	f003 0303 	and.w	r3, r3, #3
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	220f      	movs	r2, #15
 80069a6:	fa02 f303 	lsl.w	r3, r2, r3
 80069aa:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80069ac:	4916      	ldr	r1, [pc, #88]	; (8006a08 <SYSCFG_EXTILineConfig+0x80>)
 80069ae:	79bb      	ldrb	r3, [r7, #6]
 80069b0:	089b      	lsrs	r3, r3, #2
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	4618      	mov	r0, r3
 80069b6:	4a14      	ldr	r2, [pc, #80]	; (8006a08 <SYSCFG_EXTILineConfig+0x80>)
 80069b8:	79bb      	ldrb	r3, [r7, #6]
 80069ba:	089b      	lsrs	r3, r3, #2
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	3302      	adds	r3, #2
 80069c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	43db      	mvns	r3, r3
 80069c8:	401a      	ands	r2, r3
 80069ca:	1c83      	adds	r3, r0, #2
 80069cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 80069d0:	480d      	ldr	r0, [pc, #52]	; (8006a08 <SYSCFG_EXTILineConfig+0x80>)
 80069d2:	79bb      	ldrb	r3, [r7, #6]
 80069d4:	089b      	lsrs	r3, r3, #2
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	461c      	mov	r4, r3
 80069da:	4a0b      	ldr	r2, [pc, #44]	; (8006a08 <SYSCFG_EXTILineConfig+0x80>)
 80069dc:	79bb      	ldrb	r3, [r7, #6]
 80069de:	089b      	lsrs	r3, r3, #2
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	3302      	adds	r3, #2
 80069e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80069e8:	79f9      	ldrb	r1, [r7, #7]
 80069ea:	79bb      	ldrb	r3, [r7, #6]
 80069ec:	f003 0303 	and.w	r3, r3, #3
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	fa01 f303 	lsl.w	r3, r1, r3
 80069f6:	431a      	orrs	r2, r3
 80069f8:	1ca3      	adds	r3, r4, #2
 80069fa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80069fe:	bf00      	nop
 8006a00:	3710      	adds	r7, #16
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bc90      	pop	{r4, r7}
 8006a06:	4770      	bx	lr
 8006a08:	40010000 	.word	0x40010000

08006a0c <SYSCFG_BreakConfig>:
  *     @arg SYSCFG_Break_SRAMParity: SRAM Parity error is connected to the break input of TIM1.
  *     @arg SYSCFG_Break_HardFault: Lockup output of CortexM4 is connected to the break input of TIM1.
  * @retval None
  */
void SYSCFG_BreakConfig(uint32_t SYSCFG_Break)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_LOCK_CONFIG(SYSCFG_Break));

  SYSCFG->CFGR2 |= (uint32_t) SYSCFG_Break;
 8006a14:	4905      	ldr	r1, [pc, #20]	; (8006a2c <SYSCFG_BreakConfig+0x20>)
 8006a16:	4b05      	ldr	r3, [pc, #20]	; (8006a2c <SYSCFG_BreakConfig+0x20>)
 8006a18:	699a      	ldr	r2, [r3, #24]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	618b      	str	r3, [r1, #24]
}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr
 8006a2c:	40010000 	.word	0x40010000

08006a30 <SYSCFG_BypassParityCheckDisable>:
  *         To re-enable the parity check on RAM perform a system reset.  
  * @param  None
  * @retval None
  */
void SYSCFG_BypassParityCheckDisable(void)
{
 8006a30:	b480      	push	{r7}
 8006a32:	af00      	add	r7, sp, #0
  /* Disable the address parity check on RAM */
  *(__IO uint32_t *) CFGR1_BYPADDRPAR_BB = (uint32_t)0x00000001;
 8006a34:	4b03      	ldr	r3, [pc, #12]	; (8006a44 <SYSCFG_BypassParityCheckDisable+0x14>)
 8006a36:	2201      	movs	r2, #1
 8006a38:	601a      	str	r2, [r3, #0]
}
 8006a3a:	bf00      	nop
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr
 8006a44:	42200310 	.word	0x42200310

08006a48 <SYSCFG_ADCTriggerRemapConfig>:
  * @note   ENABLE:  Enable fast mode plus driving capability for selected pin
  * @note   DISABLE: Disable fast mode plus driving capability for selected pin
  * @retval None
  */
void SYSCFG_ADCTriggerRemapConfig(uint32_t SYSCFG_ADCTriggerRemap, FunctionalState NewState)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	460b      	mov	r3, r1
 8006a52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SYSCFG_ADC_TRIGGER_REMAP(SYSCFG_ADCTriggerRemap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8006a54:	78fb      	ldrb	r3, [r7, #3]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d006      	beq.n	8006a68 <SYSCFG_ADCTriggerRemapConfig+0x20>
  {
    /* Remap the trigger */
    SYSCFG->CFGR4 |= (uint32_t)SYSCFG_ADCTriggerRemap;
 8006a5a:	490a      	ldr	r1, [pc, #40]	; (8006a84 <SYSCFG_ADCTriggerRemapConfig+0x3c>)
 8006a5c:	4b09      	ldr	r3, [pc, #36]	; (8006a84 <SYSCFG_ADCTriggerRemapConfig+0x3c>)
 8006a5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	648b      	str	r3, [r1, #72]	; 0x48
  else
  {
    /* Use the default trigger mapping */
    SYSCFG->CFGR4 &= (uint32_t)(~SYSCFG_ADCTriggerRemap);
  }
}
 8006a66:	e006      	b.n	8006a76 <SYSCFG_ADCTriggerRemapConfig+0x2e>
    SYSCFG->CFGR4 &= (uint32_t)(~SYSCFG_ADCTriggerRemap);
 8006a68:	4906      	ldr	r1, [pc, #24]	; (8006a84 <SYSCFG_ADCTriggerRemapConfig+0x3c>)
 8006a6a:	4b06      	ldr	r3, [pc, #24]	; (8006a84 <SYSCFG_ADCTriggerRemapConfig+0x3c>)
 8006a6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	43db      	mvns	r3, r3
 8006a72:	4013      	ands	r3, r2
 8006a74:	648b      	str	r3, [r1, #72]	; 0x48
}
 8006a76:	bf00      	nop
 8006a78:	370c      	adds	r7, #12
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr
 8006a82:	bf00      	nop
 8006a84:	40010000 	.word	0x40010000

08006a88 <SYSCFG_SRAMWRPEnable>:
  *         To disable the ICODE SRAM write protection perform a system reset.
  * @param  None
  * @retval None
  */
void SYSCFG_SRAMWRPEnable(uint32_t SYSCFG_SRAMWRP)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_PAGE(SYSCFG_SRAMWRP));

  /* Enable the write-protection on the selected ICODE SRAM page */
  SYSCFG->RCR |= (uint32_t)SYSCFG_SRAMWRP;
 8006a90:	4905      	ldr	r1, [pc, #20]	; (8006aa8 <SYSCFG_SRAMWRPEnable+0x20>)
 8006a92:	4b05      	ldr	r3, [pc, #20]	; (8006aa8 <SYSCFG_SRAMWRPEnable+0x20>)
 8006a94:	685a      	ldr	r2, [r3, #4]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	604b      	str	r3, [r1, #4]
}
 8006a9c:	bf00      	nop
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr
 8006aa8:	40010000 	.word	0x40010000

08006aac <SYSCFG_GetFlagStatus>:
  *   This parameter can be one of the following values:
  *     @arg SYSCFG_FLAG_PE: SRAM parity error flag.
  * @retval The new state of SYSCFG_Flag (SET or RESET).
  */
FlagStatus SYSCFG_GetFlagStatus(uint32_t SYSCFG_Flag)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameter */
  assert_param(IS_SYSCFG_FLAG(SYSCFG_Flag));

  /* Check the status of the specified SPI flag */
  if ((SYSCFG->CFGR2 & SYSCFG_CFGR2_SRAM_PE) != (uint32_t)RESET)
 8006ab8:	4b08      	ldr	r3, [pc, #32]	; (8006adc <SYSCFG_GetFlagStatus+0x30>)
 8006aba:	699b      	ldr	r3, [r3, #24]
 8006abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d002      	beq.n	8006aca <SYSCFG_GetFlagStatus+0x1e>
  {
    /* SYSCFG_Flag is set */
    bitstatus = SET;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	73fb      	strb	r3, [r7, #15]
 8006ac8:	e001      	b.n	8006ace <SYSCFG_GetFlagStatus+0x22>
  }
  else
  {
    /* SYSCFG_Flag is reset */
    bitstatus = RESET;
 8006aca:	2300      	movs	r3, #0
 8006acc:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SYSCFG_Flag status */
  return  bitstatus;
 8006ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3714      	adds	r7, #20
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr
 8006adc:	40010000 	.word	0x40010000

08006ae0 <SYSCFG_ClearFlag>:
  *   This parameter can be any combination of the following values:
  *     @arg SYSCFG_FLAG_PE: SRAM parity error flag.
  * @retval None
  */
void SYSCFG_ClearFlag(uint32_t SYSCFG_Flag)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_FLAG(SYSCFG_Flag));

  SYSCFG->CFGR2 |= (uint32_t) SYSCFG_Flag;
 8006ae8:	4905      	ldr	r1, [pc, #20]	; (8006b00 <SYSCFG_ClearFlag+0x20>)
 8006aea:	4b05      	ldr	r3, [pc, #20]	; (8006b00 <SYSCFG_ClearFlag+0x20>)
 8006aec:	699a      	ldr	r2, [r3, #24]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	618b      	str	r3, [r1, #24]
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr
 8006b00:	40010000 	.word	0x40010000

08006b04 <TIM_DeInit>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 6 ,7 ,8, 15, 16,17 or 20 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a4e      	ldr	r2, [pc, #312]	; (8006c48 <TIM_DeInit+0x144>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d10a      	bne.n	8006b2a <TIM_DeInit+0x26>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8006b14:	2101      	movs	r1, #1
 8006b16:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006b1a:	f7ff fd37 	bl	800658c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8006b1e:	2100      	movs	r1, #0
 8006b20:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006b24:	f7ff fd32 	bl	800658c <RCC_APB2PeriphResetCmd>
    {     
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM20, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM20, DISABLE); 
    }   
  }
}
 8006b28:	e08a      	b.n	8006c40 <TIM_DeInit+0x13c>
  else if (TIMx == TIM2) 
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b30:	d108      	bne.n	8006b44 <TIM_DeInit+0x40>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8006b32:	2101      	movs	r1, #1
 8006b34:	2001      	movs	r0, #1
 8006b36:	f7ff fd49 	bl	80065cc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8006b3a:	2100      	movs	r1, #0
 8006b3c:	2001      	movs	r0, #1
 8006b3e:	f7ff fd45 	bl	80065cc <RCC_APB1PeriphResetCmd>
}
 8006b42:	e07d      	b.n	8006c40 <TIM_DeInit+0x13c>
  else if (TIMx == TIM3)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a41      	ldr	r2, [pc, #260]	; (8006c4c <TIM_DeInit+0x148>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d108      	bne.n	8006b5e <TIM_DeInit+0x5a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8006b4c:	2101      	movs	r1, #1
 8006b4e:	2002      	movs	r0, #2
 8006b50:	f7ff fd3c 	bl	80065cc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8006b54:	2100      	movs	r1, #0
 8006b56:	2002      	movs	r0, #2
 8006b58:	f7ff fd38 	bl	80065cc <RCC_APB1PeriphResetCmd>
}
 8006b5c:	e070      	b.n	8006c40 <TIM_DeInit+0x13c>
  else if (TIMx == TIM4)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a3b      	ldr	r2, [pc, #236]	; (8006c50 <TIM_DeInit+0x14c>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d108      	bne.n	8006b78 <TIM_DeInit+0x74>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8006b66:	2101      	movs	r1, #1
 8006b68:	2004      	movs	r0, #4
 8006b6a:	f7ff fd2f 	bl	80065cc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8006b6e:	2100      	movs	r1, #0
 8006b70:	2004      	movs	r0, #4
 8006b72:	f7ff fd2b 	bl	80065cc <RCC_APB1PeriphResetCmd>
}
 8006b76:	e063      	b.n	8006c40 <TIM_DeInit+0x13c>
  else if (TIMx == TIM6)  
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a36      	ldr	r2, [pc, #216]	; (8006c54 <TIM_DeInit+0x150>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d108      	bne.n	8006b92 <TIM_DeInit+0x8e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8006b80:	2101      	movs	r1, #1
 8006b82:	2010      	movs	r0, #16
 8006b84:	f7ff fd22 	bl	80065cc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8006b88:	2100      	movs	r1, #0
 8006b8a:	2010      	movs	r0, #16
 8006b8c:	f7ff fd1e 	bl	80065cc <RCC_APB1PeriphResetCmd>
}
 8006b90:	e056      	b.n	8006c40 <TIM_DeInit+0x13c>
  else if (TIMx == TIM7)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a30      	ldr	r2, [pc, #192]	; (8006c58 <TIM_DeInit+0x154>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d108      	bne.n	8006bac <TIM_DeInit+0xa8>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8006b9a:	2101      	movs	r1, #1
 8006b9c:	2020      	movs	r0, #32
 8006b9e:	f7ff fd15 	bl	80065cc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8006ba2:	2100      	movs	r1, #0
 8006ba4:	2020      	movs	r0, #32
 8006ba6:	f7ff fd11 	bl	80065cc <RCC_APB1PeriphResetCmd>
}
 8006baa:	e049      	b.n	8006c40 <TIM_DeInit+0x13c>
  else if (TIMx == TIM8)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a2b      	ldr	r2, [pc, #172]	; (8006c5c <TIM_DeInit+0x158>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d10a      	bne.n	8006bca <TIM_DeInit+0xc6>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8006bb4:	2101      	movs	r1, #1
 8006bb6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006bba:	f7ff fce7 	bl	800658c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8006bbe:	2100      	movs	r1, #0
 8006bc0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006bc4:	f7ff fce2 	bl	800658c <RCC_APB2PeriphResetCmd>
}
 8006bc8:	e03a      	b.n	8006c40 <TIM_DeInit+0x13c>
  else if (TIMx == TIM15)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a24      	ldr	r2, [pc, #144]	; (8006c60 <TIM_DeInit+0x15c>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d10a      	bne.n	8006be8 <TIM_DeInit+0xe4>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
 8006bd2:	2101      	movs	r1, #1
 8006bd4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006bd8:	f7ff fcd8 	bl	800658c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);  
 8006bdc:	2100      	movs	r1, #0
 8006bde:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006be2:	f7ff fcd3 	bl	800658c <RCC_APB2PeriphResetCmd>
}
 8006be6:	e02b      	b.n	8006c40 <TIM_DeInit+0x13c>
  else if (TIMx == TIM16) 
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4a1e      	ldr	r2, [pc, #120]	; (8006c64 <TIM_DeInit+0x160>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d10a      	bne.n	8006c06 <TIM_DeInit+0x102>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
 8006bf0:	2101      	movs	r1, #1
 8006bf2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8006bf6:	f7ff fcc9 	bl	800658c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);  
 8006bfa:	2100      	movs	r1, #0
 8006bfc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8006c00:	f7ff fcc4 	bl	800658c <RCC_APB2PeriphResetCmd>
}
 8006c04:	e01c      	b.n	8006c40 <TIM_DeInit+0x13c>
  else if (TIMx == TIM17) 
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a17      	ldr	r2, [pc, #92]	; (8006c68 <TIM_DeInit+0x164>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d10a      	bne.n	8006c24 <TIM_DeInit+0x120>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
 8006c0e:	2101      	movs	r1, #1
 8006c10:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8006c14:	f7ff fcba 	bl	800658c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE); 
 8006c18:	2100      	movs	r1, #0
 8006c1a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8006c1e:	f7ff fcb5 	bl	800658c <RCC_APB2PeriphResetCmd>
}
 8006c22:	e00d      	b.n	8006c40 <TIM_DeInit+0x13c>
    if (TIMx == TIM20) 
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4a11      	ldr	r2, [pc, #68]	; (8006c6c <TIM_DeInit+0x168>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d109      	bne.n	8006c40 <TIM_DeInit+0x13c>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM20, ENABLE);
 8006c2c:	2101      	movs	r1, #1
 8006c2e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006c32:	f7ff fcab 	bl	800658c <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM20, DISABLE); 
 8006c36:	2100      	movs	r1, #0
 8006c38:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006c3c:	f7ff fca6 	bl	800658c <RCC_APB2PeriphResetCmd>
}
 8006c40:	bf00      	nop
 8006c42:	3708      	adds	r7, #8
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	40012c00 	.word	0x40012c00
 8006c4c:	40000400 	.word	0x40000400
 8006c50:	40000800 	.word	0x40000800
 8006c54:	40001000 	.word	0x40001000
 8006c58:	40001400 	.word	0x40001400
 8006c5c:	40013400 	.word	0x40013400
 8006c60:	40014000 	.word	0x40014000
 8006c64:	40014400 	.word	0x40014400
 8006c68:	40014800 	.word	0x40014800
 8006c6c:	40015000 	.word	0x40015000

08006c70 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	881b      	ldrh	r3, [r3, #0]
 8006c82:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || 
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a30      	ldr	r2, [pc, #192]	; (8006d48 <TIM_TimeBaseInit+0xd8>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d013      	beq.n	8006cb4 <TIM_TimeBaseInit+0x44>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a2f      	ldr	r2, [pc, #188]	; (8006d4c <TIM_TimeBaseInit+0xdc>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d00f      	beq.n	8006cb4 <TIM_TimeBaseInit+0x44>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c9a:	d00b      	beq.n	8006cb4 <TIM_TimeBaseInit+0x44>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a2c      	ldr	r2, [pc, #176]	; (8006d50 <TIM_TimeBaseInit+0xe0>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d007      	beq.n	8006cb4 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM3) || (TIMx == TIM4) || (TIMx == TIM20)) 
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a2b      	ldr	r2, [pc, #172]	; (8006d54 <TIM_TimeBaseInit+0xe4>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d003      	beq.n	8006cb4 <TIM_TimeBaseInit+0x44>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a2a      	ldr	r2, [pc, #168]	; (8006d58 <TIM_TimeBaseInit+0xe8>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d108      	bne.n	8006cc6 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8006cb4:	89fb      	ldrh	r3, [r7, #14]
 8006cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cba:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	885a      	ldrh	r2, [r3, #2]
 8006cc0:	89fb      	ldrh	r3, [r7, #14]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4a24      	ldr	r2, [pc, #144]	; (8006d5c <TIM_TimeBaseInit+0xec>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d00c      	beq.n	8006ce8 <TIM_TimeBaseInit+0x78>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a23      	ldr	r2, [pc, #140]	; (8006d60 <TIM_TimeBaseInit+0xf0>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d008      	beq.n	8006ce8 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8006cd6:	89fb      	ldrh	r3, [r7, #14]
 8006cd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cdc:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	891a      	ldrh	r2, [r3, #8]
 8006ce2:	89fb      	ldrh	r3, [r7, #14]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	89fa      	ldrh	r2, [r7, #14]
 8006cec:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	685a      	ldr	r2, [r3, #4]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	881a      	ldrh	r2, [r3, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15) || 
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4a11      	ldr	r2, [pc, #68]	; (8006d48 <TIM_TimeBaseInit+0xd8>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d013      	beq.n	8006d2e <TIM_TimeBaseInit+0xbe>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4a10      	ldr	r2, [pc, #64]	; (8006d4c <TIM_TimeBaseInit+0xdc>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d00f      	beq.n	8006d2e <TIM_TimeBaseInit+0xbe>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	4a14      	ldr	r2, [pc, #80]	; (8006d64 <TIM_TimeBaseInit+0xf4>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d00b      	beq.n	8006d2e <TIM_TimeBaseInit+0xbe>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4a13      	ldr	r2, [pc, #76]	; (8006d68 <TIM_TimeBaseInit+0xf8>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d007      	beq.n	8006d2e <TIM_TimeBaseInit+0xbe>
      (TIMx == TIM16) || (TIMx == TIM17)|| (TIMx == TIM20))  
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	4a12      	ldr	r2, [pc, #72]	; (8006d6c <TIM_TimeBaseInit+0xfc>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d003      	beq.n	8006d2e <TIM_TimeBaseInit+0xbe>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a0b      	ldr	r2, [pc, #44]	; (8006d58 <TIM_TimeBaseInit+0xe8>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d103      	bne.n	8006d36 <TIM_TimeBaseInit+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	895a      	ldrh	r2, [r3, #10]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	615a      	str	r2, [r3, #20]
}
 8006d3c:	bf00      	nop
 8006d3e:	3714      	adds	r7, #20
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr
 8006d48:	40012c00 	.word	0x40012c00
 8006d4c:	40013400 	.word	0x40013400
 8006d50:	40000400 	.word	0x40000400
 8006d54:	40000800 	.word	0x40000800
 8006d58:	40015000 	.word	0x40015000
 8006d5c:	40001000 	.word	0x40001000
 8006d60:	40001400 	.word	0x40001400
 8006d64:	40014000 	.word	0x40014000
 8006d68:	40014400 	.word	0x40014400
 8006d6c:	40014800 	.word	0x40014800

08006d70 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d7e:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	815a      	strh	r2, [r3, #10]
}
 8006d98:	bf00      	nop
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <TIM_PrescalerConfig>:
  *            @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *            @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediately.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	460b      	mov	r3, r1
 8006dae:	807b      	strh	r3, [r7, #2]
 8006db0:	4613      	mov	r3, r2
 8006db2:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	887a      	ldrh	r2, [r7, #2]
 8006db8:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 8006dba:	883a      	ldrh	r2, [r7, #0]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	615a      	str	r2, [r3, #20]
}
 8006dc0:	bf00      	nop
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <TIM_CounterModeConfig>:
  *            @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *            @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b085      	sub	sp, #20
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	881b      	ldrh	r3, [r3, #0]
 8006de0:	81fb      	strh	r3, [r7, #14]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006de2:	89fb      	ldrh	r3, [r7, #14]
 8006de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de8:	81fb      	strh	r3, [r7, #14]

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 8006dea:	89fa      	ldrh	r2, [r7, #14]
 8006dec:	887b      	ldrh	r3, [r7, #2]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	89fa      	ldrh	r2, [r7, #14]
 8006df6:	801a      	strh	r2, [r3, #0]
}
 8006df8:	bf00      	nop
 8006dfa:	3714      	adds	r7, #20
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 6 ,7 ,8, 15, 16, 17 or 20 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	683a      	ldr	r2, [r7, #0]
 8006e12:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006e14:	bf00      	nop
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 6 ,7 ,8, 15, 16, 17 or 20 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	683a      	ldr	r2, [r7, #0]
 8006e2e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006e30:	bf00      	nop
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 6 ,7 ,8, 15, 16, 17 or 20 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 6 ,7 ,8, 15, 16, 17 or 20 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e60:	b29b      	uxth	r3, r3
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	370c      	adds	r7, #12
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b083      	sub	sp, #12
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
 8006e76:	460b      	mov	r3, r1
 8006e78:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006e7a:	78fb      	ldrb	r3, [r7, #3]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d008      	beq.n	8006e92 <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	881b      	ldrh	r3, [r3, #0]
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	f043 0302 	orr.w	r3, r3, #2
 8006e8a:	b29a      	uxth	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
  }
}
 8006e90:	e007      	b.n	8006ea2 <TIM_UpdateDisableConfig+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	881b      	ldrh	r3, [r3, #0]
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	f023 0302 	bic.w	r3, r3, #2
 8006e9c:	b29a      	uxth	r2, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	801a      	strh	r2, [r3, #0]
}
 8006ea2:	bf00      	nop
 8006ea4:	370c      	adds	r7, #12
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr

08006eae <TIM_UpdateRequestConfig>:
  *                 generation through the slave mode controller.
  *            @arg TIM_UpdateSource_Global: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
 8006eae:	b480      	push	{r7}
 8006eb0:	b083      	sub	sp, #12
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8006eba:	887b      	ldrh	r3, [r7, #2]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d008      	beq.n	8006ed2 <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	881b      	ldrh	r3, [r3, #0]
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	f043 0304 	orr.w	r3, r3, #4
 8006eca:	b29a      	uxth	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
  }
}
 8006ed0:	e007      	b.n	8006ee2 <TIM_UpdateRequestConfig+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	881b      	ldrh	r3, [r3, #0]
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	f023 0304 	bic.w	r3, r3, #4
 8006edc:	b29a      	uxth	r2, r3
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	801a      	strh	r2, [r3, #0]
}
 8006ee2:	bf00      	nop
 8006ee4:	370c      	adds	r7, #12
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr

08006eee <TIM_UIFRemap>:
  * @param  NewState: new state of the UIFREMAP bit.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UIFRemap(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8006eee:	b480      	push	{r7}
 8006ef0:	b083      	sub	sp, #12
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8006efa:	78fb      	ldrb	r3, [r7, #3]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d008      	beq.n	8006f12 <TIM_UIFRemap+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_UIFREMAP;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	881b      	ldrh	r3, [r3, #0]
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006f0a:	b29a      	uxth	r2, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UIFREMAP;
  }  
}
 8006f10:	e007      	b.n	8006f22 <TIM_UIFRemap+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UIFREMAP;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	881b      	ldrh	r3, [r3, #0]
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f1c:	b29a      	uxth	r2, r3
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	801a      	strh	r2, [r3, #0]
}
 8006f22:	bf00      	nop
 8006f24:	370c      	adds	r7, #12
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr

08006f2e <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8006f2e:	b480      	push	{r7}
 8006f30:	b083      	sub	sp, #12
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
 8006f36:	460b      	mov	r3, r1
 8006f38:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006f3a:	78fb      	ldrb	r3, [r7, #3]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d008      	beq.n	8006f52 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	881b      	ldrh	r3, [r3, #0]
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f4a:	b29a      	uxth	r2, r3
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
  }
}
 8006f50:	e007      	b.n	8006f62 <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	881b      	ldrh	r3, [r3, #0]
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	801a      	strh	r2, [r3, #0]
}
 8006f62:	bf00      	nop
 8006f64:	370c      	adds	r7, #12
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr

08006f6e <TIM_SelectOnePulseMode>:
  *            @arg TIM_OPMode_Single
  *            @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
 8006f6e:	b480      	push	{r7}
 8006f70:	b083      	sub	sp, #12
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
 8006f76:	460b      	mov	r3, r1
 8006f78:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	881b      	ldrh	r3, [r3, #0]
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	f023 0308 	bic.w	r3, r3, #8
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	801a      	strh	r2, [r3, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	881b      	ldrh	r3, [r3, #0]
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	887b      	ldrh	r3, [r7, #2]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	801a      	strh	r2, [r3, #0]
}
 8006f9a:	bf00      	nop
 8006f9c:	370c      	adds	r7, #12
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr

08006fa6 <TIM_SetClockDivision>:
  *            @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *            @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
 8006fa6:	b480      	push	{r7}
 8006fa8:	b083      	sub	sp, #12
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
 8006fae:	460b      	mov	r3, r1
 8006fb0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	881b      	ldrh	r3, [r3, #0]
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fbc:	b29a      	uxth	r2, r3
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	801a      	strh	r2, [r3, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	881b      	ldrh	r3, [r3, #0]
 8006fc6:	b29a      	uxth	r2, r3
 8006fc8:	887b      	ldrh	r3, [r7, #2]
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	b29a      	uxth	r2, r3
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	801a      	strh	r2, [r3, #0]
}
 8006fd2:	bf00      	nop
 8006fd4:	370c      	adds	r7, #12
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr

08006fde <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8006fde:	b480      	push	{r7}
 8006fe0:	b083      	sub	sp, #12
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8006fea:	78fb      	ldrb	r3, [r7, #3]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d008      	beq.n	8007002 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	881b      	ldrh	r3, [r3, #0]
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	f043 0301 	orr.w	r3, r3, #1
 8006ffa:	b29a      	uxth	r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8007000:	e007      	b.n	8007012 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	881b      	ldrh	r3, [r3, #0]
 8007006:	b29b      	uxth	r3, r3
 8007008:	f023 0301 	bic.w	r3, r3, #1
 800700c:	b29a      	uxth	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	801a      	strh	r2, [r3, #0]
}
 8007012:	bf00      	nop
 8007014:	370c      	adds	r7, #12
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr

0800701e <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800701e:	b480      	push	{r7}
 8007020:	b087      	sub	sp, #28
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
 8007026:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8007028:	2300      	movs	r3, #0
 800702a:	60fb      	str	r3, [r7, #12]
 800702c:	2300      	movs	r3, #0
 800702e:	617b      	str	r3, [r7, #20]
 8007030:	2300      	movs	r3, #0
 8007032:	613b      	str	r3, [r7, #16]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC1E;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a1b      	ldr	r3, [r3, #32]
 8007038:	f023 0201 	bic.w	r2, r3, #1
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6a1b      	ldr	r3, [r3, #32]
 8007044:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	699b      	ldr	r3, [r3, #24]
 8007050:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR1_OC1M;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007058:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800705c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= (uint32_t)~TIM_CCMR1_CC1S;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f023 0303 	bic.w	r3, r3, #3
 8007064:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68fa      	ldr	r2, [r7, #12]
 800706c:	4313      	orrs	r3, r2
 800706e:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC1P;
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	f023 0302 	bic.w	r3, r3, #2
 8007076:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	899b      	ldrh	r3, [r3, #12]
 800707c:	461a      	mov	r2, r3
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	4313      	orrs	r3, r2
 8007082:	617b      	str	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	889b      	ldrh	r3, [r3, #4]
 8007088:	461a      	mov	r2, r3
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	4313      	orrs	r3, r2
 800708e:	617b      	str	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM15) || (TIMx == TIM16) || (TIMx == TIM17))
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4a27      	ldr	r2, [pc, #156]	; (8007130 <TIM_OC1Init+0x112>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d00f      	beq.n	80070b8 <TIM_OC1Init+0x9a>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4a26      	ldr	r2, [pc, #152]	; (8007134 <TIM_OC1Init+0x116>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d00b      	beq.n	80070b8 <TIM_OC1Init+0x9a>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	4a25      	ldr	r2, [pc, #148]	; (8007138 <TIM_OC1Init+0x11a>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d007      	beq.n	80070b8 <TIM_OC1Init+0x9a>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	4a24      	ldr	r2, [pc, #144]	; (800713c <TIM_OC1Init+0x11e>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d003      	beq.n	80070b8 <TIM_OC1Init+0x9a>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	4a23      	ldr	r2, [pc, #140]	; (8007140 <TIM_OC1Init+0x122>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d127      	bne.n	8007108 <TIM_OC1Init+0xea>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC1NP;
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	f023 0308 	bic.w	r3, r3, #8
 80070be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	89db      	ldrh	r3, [r3, #14]
 80070c4:	461a      	mov	r2, r3
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= (uint32_t)~TIM_CCER_CC1NE;
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	f023 0304 	bic.w	r3, r3, #4
 80070d2:	617b      	str	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	88db      	ldrh	r3, [r3, #6]
 80070d8:	461a      	mov	r2, r3
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	4313      	orrs	r3, r2
 80070de:	617b      	str	r3, [r7, #20]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS1;
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS1N;
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	8a1b      	ldrh	r3, [r3, #16]
 80070f4:	461a      	mov	r2, r3
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	8a5b      	ldrh	r3, [r3, #18]
 8007100:	461a      	mov	r2, r3
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	4313      	orrs	r3, r2
 8007106:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	693a      	ldr	r2, [r7, #16]
 800710c:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	689a      	ldr	r2, [r3, #8]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	697a      	ldr	r2, [r7, #20]
 8007120:	621a      	str	r2, [r3, #32]
}
 8007122:	bf00      	nop
 8007124:	371c      	adds	r7, #28
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr
 800712e:	bf00      	nop
 8007130:	40012c00 	.word	0x40012c00
 8007134:	40013400 	.word	0x40013400
 8007138:	40014000 	.word	0x40014000
 800713c:	40014400 	.word	0x40014400
 8007140:	40014800 	.word	0x40014800

08007144 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8007144:	b480      	push	{r7}
 8007146:	b087      	sub	sp, #28
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800714e:	2300      	movs	r3, #0
 8007150:	60fb      	str	r3, [r7, #12]
 8007152:	2300      	movs	r3, #0
 8007154:	617b      	str	r3, [r7, #20]
 8007156:	2300      	movs	r3, #0
 8007158:	613b      	str	r3, [r7, #16]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC2E;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a1b      	ldr	r3, [r3, #32]
 800715e:	f023 0210 	bic.w	r2, r3, #16
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a1b      	ldr	r3, [r3, #32]
 800716a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	699b      	ldr	r3, [r3, #24]
 8007176:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR1_OC2M;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800717e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= (uint32_t)~TIM_CCMR1_CC2S;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800718a:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	021b      	lsls	r3, r3, #8
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	4313      	orrs	r3, r2
 8007196:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC2P;
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	f023 0320 	bic.w	r3, r3, #32
 800719e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 4);
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	899b      	ldrh	r3, [r3, #12]
 80071a4:	011b      	lsls	r3, r3, #4
 80071a6:	697a      	ldr	r2, [r7, #20]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	617b      	str	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 4);
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	889b      	ldrh	r3, [r3, #4]
 80071b0:	011b      	lsls	r3, r3, #4
 80071b2:	697a      	ldr	r2, [r7, #20]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	617b      	str	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a21      	ldr	r2, [pc, #132]	; (8007240 <TIM_OC2Init+0xfc>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d003      	beq.n	80071c8 <TIM_OC2Init+0x84>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a20      	ldr	r2, [pc, #128]	; (8007244 <TIM_OC2Init+0x100>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d127      	bne.n	8007218 <TIM_OC2Init+0xd4>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC2NP;
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCNPolarity << 4);
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	89db      	ldrh	r3, [r3, #14]
 80071d4:	011b      	lsls	r3, r3, #4
 80071d6:	697a      	ldr	r2, [r7, #20]
 80071d8:	4313      	orrs	r3, r2
 80071da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= (uint32_t)~TIM_CCER_CC2NE;
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071e2:	617b      	str	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputNState << 4);
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	88db      	ldrh	r3, [r3, #6]
 80071e8:	011b      	lsls	r3, r3, #4
 80071ea:	697a      	ldr	r2, [r7, #20]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS2;
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS2N;
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCIdleState << 2);
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	8a1b      	ldrh	r3, [r3, #16]
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	693a      	ldr	r2, [r7, #16]
 8007208:	4313      	orrs	r3, r2
 800720a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCNIdleState << 2);
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	8a5b      	ldrh	r3, [r3, #18]
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	693a      	ldr	r2, [r7, #16]
 8007214:	4313      	orrs	r3, r2
 8007216:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	693a      	ldr	r2, [r7, #16]
 800721c:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	689a      	ldr	r2, [r3, #8]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	697a      	ldr	r2, [r7, #20]
 8007230:	621a      	str	r2, [r3, #32]
}
 8007232:	bf00      	nop
 8007234:	371c      	adds	r7, #28
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	40012c00 	.word	0x40012c00
 8007244:	40013400 	.word	0x40013400

08007248 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8007248:	b480      	push	{r7}
 800724a:	b087      	sub	sp, #28
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8007252:	2300      	movs	r3, #0
 8007254:	60fb      	str	r3, [r7, #12]
 8007256:	2300      	movs	r3, #0
 8007258:	617b      	str	r3, [r7, #20]
 800725a:	2300      	movs	r3, #0
 800725c:	613b      	str	r3, [r7, #16]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC3E;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a1b      	ldr	r3, [r3, #32]
 800726e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	69db      	ldr	r3, [r3, #28]
 800727a:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR2_OC3M;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= (uint32_t)~TIM_CCMR2_CC3S;  
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f023 0303 	bic.w	r3, r3, #3
 800728a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68fa      	ldr	r2, [r7, #12]
 8007292:	4313      	orrs	r3, r2
 8007294:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC3P;
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800729c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 8);
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	899b      	ldrh	r3, [r3, #12]
 80072a2:	021b      	lsls	r3, r3, #8
 80072a4:	697a      	ldr	r2, [r7, #20]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	617b      	str	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 8);
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	889b      	ldrh	r3, [r3, #4]
 80072ae:	021b      	lsls	r3, r3, #8
 80072b0:	697a      	ldr	r2, [r7, #20]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	617b      	str	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4a20      	ldr	r2, [pc, #128]	; (800733c <TIM_OC3Init+0xf4>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d003      	beq.n	80072c6 <TIM_OC3Init+0x7e>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a1f      	ldr	r2, [pc, #124]	; (8007340 <TIM_OC3Init+0xf8>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d127      	bne.n	8007316 <TIM_OC3Init+0xce>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC3NP;
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	89db      	ldrh	r3, [r3, #14]
 80072d2:	021b      	lsls	r3, r3, #8
 80072d4:	697a      	ldr	r2, [r7, #20]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= (uint32_t)~TIM_CCER_CC3NE;
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072e0:	617b      	str	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputNState << 8);
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	88db      	ldrh	r3, [r3, #6]
 80072e6:	021b      	lsls	r3, r3, #8
 80072e8:	697a      	ldr	r2, [r7, #20]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS3;
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS3N;
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCIdleState << 4);
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	8a1b      	ldrh	r3, [r3, #16]
 8007302:	011b      	lsls	r3, r3, #4
 8007304:	693a      	ldr	r2, [r7, #16]
 8007306:	4313      	orrs	r3, r2
 8007308:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	8a5b      	ldrh	r3, [r3, #18]
 800730e:	011b      	lsls	r3, r3, #4
 8007310:	693a      	ldr	r2, [r7, #16]
 8007312:	4313      	orrs	r3, r2
 8007314:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	693a      	ldr	r2, [r7, #16]
 800731a:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	689a      	ldr	r2, [r3, #8]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	697a      	ldr	r2, [r7, #20]
 800732e:	621a      	str	r2, [r3, #32]
}
 8007330:	bf00      	nop
 8007332:	371c      	adds	r7, #28
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr
 800733c:	40012c00 	.word	0x40012c00
 8007340:	40013400 	.word	0x40013400

08007344 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8007344:	b480      	push	{r7}
 8007346:	b087      	sub	sp, #28
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800734e:	2300      	movs	r3, #0
 8007350:	613b      	str	r3, [r7, #16]
 8007352:	2300      	movs	r3, #0
 8007354:	60fb      	str	r3, [r7, #12]
 8007356:	2300      	movs	r3, #0
 8007358:	617b      	str	r3, [r7, #20]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC4E;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a1b      	ldr	r3, [r3, #32]
 800735e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6a1b      	ldr	r3, [r3, #32]
 800736a:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	69db      	ldr	r3, [r3, #28]
 8007376:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR2_OC4M;
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800737e:	613b      	str	r3, [r7, #16]
  tmpccmrx &= (uint32_t)~TIM_CCMR2_CC4S;
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007386:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	021b      	lsls	r3, r3, #8
 800738e:	693a      	ldr	r2, [r7, #16]
 8007390:	4313      	orrs	r3, r2
 8007392:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC4P;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800739a:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 12);
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	899b      	ldrh	r3, [r3, #12]
 80073a0:	031b      	lsls	r3, r3, #12
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	60fb      	str	r3, [r7, #12]
  
  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 12);
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	889b      	ldrh	r3, [r3, #4]
 80073ac:	031b      	lsls	r3, r3, #12
 80073ae:	68fa      	ldr	r2, [r7, #12]
 80073b0:	4313      	orrs	r3, r2
 80073b2:	60fb      	str	r3, [r7, #12]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	4a12      	ldr	r2, [pc, #72]	; (8007400 <TIM_OC4Init+0xbc>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d003      	beq.n	80073c4 <TIM_OC4Init+0x80>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	4a11      	ldr	r2, [pc, #68]	; (8007404 <TIM_OC4Init+0xc0>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d109      	bne.n	80073d8 <TIM_OC4Init+0x94>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint32_t) ~TIM_CR2_OIS4;
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCIdleState << 6);
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	8a1b      	ldrh	r3, [r3, #16]
 80073d0:	019b      	lsls	r3, r3, #6
 80073d2:	697a      	ldr	r2, [r7, #20]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	697a      	ldr	r2, [r7, #20]
 80073dc:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	693a      	ldr	r2, [r7, #16]
 80073e2:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	689a      	ldr	r2, [r3, #8]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	68fa      	ldr	r2, [r7, #12]
 80073f0:	621a      	str	r2, [r3, #32]
}
 80073f2:	bf00      	nop
 80073f4:	371c      	adds	r7, #28
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	40012c00 	.word	0x40012c00
 8007404:	40013400 	.word	0x40013400

08007408 <TIM_OC5Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC5Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8007408:	b480      	push	{r7}
 800740a:	b087      	sub	sp, #28
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8007412:	2300      	movs	r3, #0
 8007414:	613b      	str	r3, [r7, #16]
 8007416:	2300      	movs	r3, #0
 8007418:	60fb      	str	r3, [r7, #12]
 800741a:	2300      	movs	r3, #0
 800741c:	617b      	str	r3, [r7, #20]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 5: Reset the CC5E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC5E; /* to be verified*/
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a1b      	ldr	r3, [r3, #32]
 8007422:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a1b      	ldr	r3, [r3, #32]
 800742e:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR3 register value */
  tmpccmrx = TIMx->CCMR3;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800743a:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR3_OC5M;
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007442:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode);
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	693a      	ldr	r2, [r7, #16]
 800744a:	4313      	orrs	r3, r2
 800744c:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC5P;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007454:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 16);
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	899b      	ldrh	r3, [r3, #12]
 800745a:	041b      	lsls	r3, r3, #16
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	4313      	orrs	r3, r2
 8007460:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 16);
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	889b      	ldrh	r3, [r3, #4]
 8007466:	041b      	lsls	r3, r3, #16
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	4313      	orrs	r3, r2
 800746c:	60fb      	str	r3, [r7, #12]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4a11      	ldr	r2, [pc, #68]	; (80074b8 <TIM_OC5Init+0xb0>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d003      	beq.n	800747e <TIM_OC5Init+0x76>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a10      	ldr	r2, [pc, #64]	; (80074bc <TIM_OC5Init+0xb4>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d109      	bne.n	8007492 <TIM_OC5Init+0x8a>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint32_t) ~TIM_CR2_OIS5;
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007484:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCIdleState << 16);
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	8a1b      	ldrh	r3, [r3, #16]
 800748a:	041b      	lsls	r3, r3, #16
 800748c:	697a      	ldr	r2, [r7, #20]
 800748e:	4313      	orrs	r3, r2
 8007490:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	697a      	ldr	r2, [r7, #20]
 8007496:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR3 = tmpccmrx;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	693a      	ldr	r2, [r7, #16]
 800749c:	655a      	str	r2, [r3, #84]	; 0x54
    
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = TIM_OCInitStruct->TIM_Pulse;
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	689a      	ldr	r2, [r3, #8]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	621a      	str	r2, [r3, #32]
}
 80074ac:	bf00      	nop
 80074ae:	371c      	adds	r7, #28
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr
 80074b8:	40012c00 	.word	0x40012c00
 80074bc:	40013400 	.word	0x40013400

080074c0 <TIM_OC6Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC6Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b087      	sub	sp, #28
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80074ca:	2300      	movs	r3, #0
 80074cc:	613b      	str	r3, [r7, #16]
 80074ce:	2300      	movs	r3, #0
 80074d0:	60fb      	str	r3, [r7, #12]
 80074d2:	2300      	movs	r3, #0
 80074d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 5: Reset the CC5E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC6E; /* to be verified*/
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a1b      	ldr	r3, [r3, #32]
 80074da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6a1b      	ldr	r3, [r3, #32]
 80074e6:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR3 register value */
  tmpccmrx = TIMx->CCMR3;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074f2:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR3_OC6M;
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074fa:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint32_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	021b      	lsls	r3, r3, #8
 8007502:	693a      	ldr	r2, [r7, #16]
 8007504:	4313      	orrs	r3, r2
 8007506:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800750e:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OCPolarity << 20);
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	899b      	ldrh	r3, [r3, #12]
 8007514:	051b      	lsls	r3, r3, #20
 8007516:	68fa      	ldr	r2, [r7, #12]
 8007518:	4313      	orrs	r3, r2
 800751a:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  tmpccer |= (uint32_t)((uint32_t)TIM_OCInitStruct->TIM_OutputState << 20);
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	889b      	ldrh	r3, [r3, #4]
 8007520:	051b      	lsls	r3, r3, #20
 8007522:	68fa      	ldr	r2, [r7, #12]
 8007524:	4313      	orrs	r3, r2
 8007526:	60fb      	str	r3, [r7, #12]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a0f      	ldr	r2, [pc, #60]	; (8007568 <TIM_OC6Init+0xa8>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d003      	beq.n	8007538 <TIM_OC6Init+0x78>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a0e      	ldr	r2, [pc, #56]	; (800756c <TIM_OC6Init+0xac>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d103      	bne.n	8007540 <TIM_OC6Init+0x80>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint32_t) ~TIM_CR2_OIS6;
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800753e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 18);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	697a      	ldr	r2, [r7, #20]
 8007544:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR3 = tmpccmrx;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	693a      	ldr	r2, [r7, #16]
 800754a:	655a      	str	r2, [r3, #84]	; 0x54
    
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = TIM_OCInitStruct->TIM_Pulse;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	689a      	ldr	r2, [r3, #8]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	65da      	str	r2, [r3, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	621a      	str	r2, [r3, #32]
}
 800755a:	bf00      	nop
 800755c:	371c      	adds	r7, #28
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	40012c00 	.word	0x40012c00
 800756c:	40013400 	.word	0x40013400

08007570 <TIM_SelectGC5C1>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectGC5C1(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	460b      	mov	r3, r1
 800757a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800757c:	78fb      	ldrb	r3, [r7, #3]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d006      	beq.n	8007590 <TIM_SelectGC5C1+0x20>
  {
    /* Set the GC5C1 Bit */
    TIMx->CCR5 |= TIM_CCR5_GC5C1;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007586:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	659a      	str	r2, [r3, #88]	; 0x58
  else
  {
    /* Reset the GC5C1 Bit */
    TIMx->CCR5 &= (uint32_t)~TIM_CCR5_GC5C1;
  }
}
 800758e:	e005      	b.n	800759c <TIM_SelectGC5C1+0x2c>
    TIMx->CCR5 &= (uint32_t)~TIM_CCR5_GC5C1;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007594:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	659a      	str	r2, [r3, #88]	; 0x58
}
 800759c:	bf00      	nop
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <TIM_SelectGC5C2>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectGC5C2(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	460b      	mov	r3, r1
 80075b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80075b4:	78fb      	ldrb	r3, [r7, #3]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d006      	beq.n	80075c8 <TIM_SelectGC5C2+0x20>
  {
    /* Set the GC5C2 Bit */
    TIMx->CCR5 |= TIM_CCR5_GC5C2;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075be:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	659a      	str	r2, [r3, #88]	; 0x58
  else
  {
    /* Reset the GC5C2 Bit */
    TIMx->CCR5 &= (uint32_t)~TIM_CCR5_GC5C2;
  }
}
 80075c6:	e005      	b.n	80075d4 <TIM_SelectGC5C2+0x2c>
    TIMx->CCR5 &= (uint32_t)~TIM_CCR5_GC5C2;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075cc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	659a      	str	r2, [r3, #88]	; 0x58
}
 80075d4:	bf00      	nop
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <TIM_SelectGC5C3>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectGC5C3(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	460b      	mov	r3, r1
 80075ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80075ec:	78fb      	ldrb	r3, [r7, #3]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d006      	beq.n	8007600 <TIM_SelectGC5C3+0x20>
  {
    /* Set the GC5C3 Bit */
    TIMx->CCR5 |= TIM_CCR5_GC5C3;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075f6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	659a      	str	r2, [r3, #88]	; 0x58
  else
  {
    /* Reset the GC5C3 Bit */
    TIMx->CCR5 &= (uint32_t)~TIM_CCR5_GC5C3;
  }
}
 80075fe:	e005      	b.n	800760c <TIM_SelectGC5C3+0x2c>
    TIMx->CCR5 &= (uint32_t)~TIM_CCR5_GC5C3;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007604:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	659a      	str	r2, [r3, #88]	; 0x58
}
 800760c:	bf00      	nop
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	601a      	str	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	80da      	strh	r2, [r3, #6]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	609a      	str	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	81da      	strh	r2, [r3, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	821a      	strh	r2, [r3, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	825a      	strh	r2, [r3, #18]
}
 8007650:	bf00      	nop
 8007652:	370c      	adds	r7, #12
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <TIM_SelectOCxM>:
  *            @arg TIM_OCMode_Asymmetric_PWM1
  *            @arg TIM_OCMode_Asymmetric_PWM2            
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint32_t TIM_OCMode)
{
 800765c:	b480      	push	{r7}
 800765e:	b087      	sub	sp, #28
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	460b      	mov	r3, r1
 8007666:	607a      	str	r2, [r7, #4]
 8007668:	817b      	strh	r3, [r7, #10]
  uint32_t tmp = 0;
 800766a:	2300      	movs	r3, #0
 800766c:	617b      	str	r3, [r7, #20]
  uint16_t tmp1 = 0;
 800766e:	2300      	movs	r3, #0
 8007670:	827b      	strh	r3, [r7, #18]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	617b      	str	r3, [r7, #20]
  tmp += CCMR_OFFSET;
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	3318      	adds	r3, #24
 800767a:	617b      	str	r3, [r7, #20]

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 800767c:	897b      	ldrh	r3, [r7, #10]
 800767e:	2201      	movs	r2, #1
 8007680:	fa02 f303 	lsl.w	r3, r2, r3
 8007684:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6a1b      	ldr	r3, [r3, #32]
 800768a:	8a7a      	ldrh	r2, [r7, #18]
 800768c:	43d2      	mvns	r2, r2
 800768e:	b292      	uxth	r2, r2
 8007690:	401a      	ands	r2, r3
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	621a      	str	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8007696:	897b      	ldrh	r3, [r7, #10]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d002      	beq.n	80076a2 <TIM_SelectOCxM+0x46>
 800769c:	897b      	ldrh	r3, [r7, #10]
 800769e:	2b08      	cmp	r3, #8
 80076a0:	d115      	bne.n	80076ce <TIM_SelectOCxM+0x72>
  {
    tmp += (TIM_Channel>>1);
 80076a2:	897b      	ldrh	r3, [r7, #10]
 80076a4:	085b      	lsrs	r3, r3, #1
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	461a      	mov	r2, r3
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	4413      	add	r3, r2
 80076ae:	617b      	str	r3, [r7, #20]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 80076b0:	697a      	ldr	r2, [r7, #20]
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076be:	6013      	str	r3, [r2, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	697a      	ldr	r2, [r7, #20]
 80076c4:	6811      	ldr	r1, [r2, #0]
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	430a      	orrs	r2, r1
 80076ca:	601a      	str	r2, [r3, #0]
 80076cc:	e014      	b.n	80076f8 <TIM_SelectOCxM+0x9c>
  }
  else
  {
    tmp += (uint32_t)(TIM_Channel - (uint32_t)4)>> (uint32_t)1;
 80076ce:	897b      	ldrh	r3, [r7, #10]
 80076d0:	3b04      	subs	r3, #4
 80076d2:	085b      	lsrs	r3, r3, #1
 80076d4:	697a      	ldr	r2, [r7, #20]
 80076d6:	4413      	add	r3, r2
 80076d8:	617b      	str	r3, [r7, #20]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 80076da:	697a      	ldr	r2, [r7, #20]
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80076e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076e8:	6013      	str	r3, [r2, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint32_t)(TIM_OCMode << 8);
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	697a      	ldr	r2, [r7, #20]
 80076ee:	6811      	ldr	r1, [r2, #0]
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	0212      	lsls	r2, r2, #8
 80076f4:	430a      	orrs	r2, r1
 80076f6:	601a      	str	r2, [r3, #0]
  }
}
 80076f8:	bf00      	nop
 80076fa:	371c      	adds	r7, #28
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 8, 15, 16, 20 or 17 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	683a      	ldr	r2, [r7, #0]
 8007712:	635a      	str	r2, [r3, #52]	; 0x34
}
 8007714:	bf00      	nop
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	683a      	ldr	r2, [r7, #0]
 800772e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8007730:	bf00      	nop
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 20 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	683a      	ldr	r2, [r7, #0]
 800774a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800774c:	bf00      	nop
 800774e:	370c      	adds	r7, #12
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 20 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	683a      	ldr	r2, [r7, #0]
 8007766:	641a      	str	r2, [r3, #64]	; 0x40
}
 8007768:	bf00      	nop
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <TIM_SetCompare5>:
  * @param  TIMx: where x can be 1 or 8 or 20 to select the TIM peripheral.
  * @param  Compare5: specifies the Capture Compare5 register new value.
  * @retval None
  */
void TIM_SetCompare5(TIM_TypeDef* TIMx, uint32_t Compare5)
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));

  /* Set the Capture Compare5 Register value */
  TIMx->CCR5 = Compare5;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	683a      	ldr	r2, [r7, #0]
 8007782:	659a      	str	r2, [r3, #88]	; 0x58
}
 8007784:	bf00      	nop
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <TIM_SetCompare6>:
  * @param  TIMx: where x can be 1 or 8 or 20 to select the TIM peripheral.
  * @param  Compare6: specifies the Capture Compare5 register new value.
  * @retval None
  */
void TIM_SetCompare6(TIM_TypeDef* TIMx, uint32_t Compare6)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));

  /* Set the Capture Compare6 Register value */
  TIMx->CCR6 = Compare6;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	683a      	ldr	r2, [r7, #0]
 800779e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80077a0:	bf00      	nop
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <TIM_ForcedOC1Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b085      	sub	sp, #20
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	460b      	mov	r3, r1
 80077b6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 80077b8:	2300      	movs	r3, #0
 80077ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	699b      	ldr	r3, [r3, #24]
 80077c0:	60fb      	str	r3, [r7, #12]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint32_t)~TIM_CCMR1_OC1M;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077cc:	60fb      	str	r3, [r7, #12]

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 80077ce:	887b      	ldrh	r3, [r7, #2]
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	68fa      	ldr	r2, [r7, #12]
 80077da:	619a      	str	r2, [r3, #24]
}
 80077dc:	bf00      	nop
 80077de:	3714      	adds	r7, #20
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <TIM_ForcedOC2Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b085      	sub	sp, #20
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	460b      	mov	r3, r1
 80077f2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 80077f4:	2300      	movs	r3, #0
 80077f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	699b      	ldr	r3, [r3, #24]
 80077fc:	60fb      	str	r3, [r7, #12]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint32_t)~TIM_CCMR1_OC2M;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007804:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007808:	60fb      	str	r3, [r7, #12]

  /* Configure The Forced output Mode */
  tmpccmr1 |= ((uint32_t)TIM_ForcedAction << 8);
 800780a:	887b      	ldrh	r3, [r7, #2]
 800780c:	021b      	lsls	r3, r3, #8
 800780e:	68fa      	ldr	r2, [r7, #12]
 8007810:	4313      	orrs	r3, r2
 8007812:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	619a      	str	r2, [r3, #24]
}
 800781a:	bf00      	nop
 800781c:	3714      	adds	r7, #20
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr

08007826 <TIM_ForcedOC3Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8007826:	b480      	push	{r7}
 8007828:	b085      	sub	sp, #20
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
 800782e:	460b      	mov	r3, r1
 8007830:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 8007832:	2300      	movs	r3, #0
 8007834:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	69db      	ldr	r3, [r3, #28]
 800783a:	60fb      	str	r3, [r7, #12]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint32_t)~TIM_CCMR2_OC3M;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007842:	60fb      	str	r3, [r7, #12]

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 8007844:	887b      	ldrh	r3, [r7, #2]
 8007846:	68fa      	ldr	r2, [r7, #12]
 8007848:	4313      	orrs	r3, r2
 800784a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	68fa      	ldr	r2, [r7, #12]
 8007850:	61da      	str	r2, [r3, #28]
}
 8007852:	bf00      	nop
 8007854:	3714      	adds	r7, #20
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr

0800785e <TIM_ForcedOC4Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 800785e:	b480      	push	{r7}
 8007860:	b085      	sub	sp, #20
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
 8007866:	460b      	mov	r3, r1
 8007868:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 800786a:	2300      	movs	r3, #0
 800786c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	69db      	ldr	r3, [r3, #28]
 8007872:	60fb      	str	r3, [r7, #12]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint32_t)~TIM_CCMR2_OC4M;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800787a:	60fb      	str	r3, [r7, #12]

  /* Configure The Forced output Mode */
  tmpccmr2 |= ((uint32_t)TIM_ForcedAction << 8);
 800787c:	887b      	ldrh	r3, [r7, #2]
 800787e:	021b      	lsls	r3, r3, #8
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	4313      	orrs	r3, r2
 8007884:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	61da      	str	r2, [r3, #28]
}
 800788c:	bf00      	nop
 800788e:	3714      	adds	r7, #20
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <TIM_ForcedOC5Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC5REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC5REF.
  * @retval None
  */
void TIM_ForcedOC5Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8007898:	b480      	push	{r7}
 800789a:	b085      	sub	sp, #20
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	460b      	mov	r3, r1
 80078a2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr3 = 0;
 80078a4:	2300      	movs	r3, #0
 80078a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr3 = TIMx->CCMR3;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ac:	60fb      	str	r3, [r7, #12]

  /* Reset the OC5M Bits */
  tmpccmr3 &= (uint32_t)~TIM_CCMR3_OC5M;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078b4:	60fb      	str	r3, [r7, #12]

  /* Configure The Forced output Mode */
  tmpccmr3 |= (uint32_t)(TIM_ForcedAction);
 80078b6:	887b      	ldrh	r3, [r7, #2]
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	68fa      	ldr	r2, [r7, #12]
 80078c2:	655a      	str	r2, [r3, #84]	; 0x54
}
 80078c4:	bf00      	nop
 80078c6:	3714      	adds	r7, #20
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <TIM_ForcedOC6Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC5REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC5REF.
  * @retval None
  */
void TIM_ForcedOC6Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b085      	sub	sp, #20
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	460b      	mov	r3, r1
 80078da:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr3 = 0;
 80078dc:	2300      	movs	r3, #0
 80078de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr3 = TIMx->CCMR3;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078e4:	60fb      	str	r3, [r7, #12]

  /* Reset the OC6M Bits */
  tmpccmr3 &= (uint32_t)~TIM_CCMR3_OC6M;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078ec:	60fb      	str	r3, [r7, #12]

  /* Configure The Forced output Mode */
  tmpccmr3 |= ((uint32_t)TIM_ForcedAction << 8);
 80078ee:	887b      	ldrh	r3, [r7, #2]
 80078f0:	021b      	lsls	r3, r3, #8
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	68fa      	ldr	r2, [r7, #12]
 80078fc:	655a      	str	r2, [r3, #84]	; 0x54
}
 80078fe:	bf00      	nop
 8007900:	3714      	adds	r7, #20
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr

0800790a <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800790a:	b480      	push	{r7}
 800790c:	b085      	sub	sp, #20
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
 8007912:	460b      	mov	r3, r1
 8007914:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 8007916:	2300      	movs	r3, #0
 8007918:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	699b      	ldr	r3, [r3, #24]
 800791e:	60fb      	str	r3, [r7, #12]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint32_t)(~TIM_CCMR1_OC1PE);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f023 0308 	bic.w	r3, r3, #8
 8007926:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8007928:	887b      	ldrh	r3, [r7, #2]
 800792a:	68fa      	ldr	r2, [r7, #12]
 800792c:	4313      	orrs	r3, r2
 800792e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	68fa      	ldr	r2, [r7, #12]
 8007934:	619a      	str	r2, [r3, #24]
}
 8007936:	bf00      	nop
 8007938:	3714      	adds	r7, #20
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr

08007942 <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8007942:	b480      	push	{r7}
 8007944:	b085      	sub	sp, #20
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
 800794a:	460b      	mov	r3, r1
 800794c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 800794e:	2300      	movs	r3, #0
 8007950:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	699b      	ldr	r3, [r3, #24]
 8007956:	60fb      	str	r3, [r7, #12]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint32_t)(~TIM_CCMR1_OC2PE);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800795e:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= ((uint32_t)TIM_OCPreload << 8);
 8007960:	887b      	ldrh	r3, [r7, #2]
 8007962:	021b      	lsls	r3, r3, #8
 8007964:	68fa      	ldr	r2, [r7, #12]
 8007966:	4313      	orrs	r3, r2
 8007968:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	619a      	str	r2, [r3, #24]
}
 8007970:	bf00      	nop
 8007972:	3714      	adds	r7, #20
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800797c:	b480      	push	{r7}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	460b      	mov	r3, r1
 8007986:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 8007988:	2300      	movs	r3, #0
 800798a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	69db      	ldr	r3, [r3, #28]
 8007990:	60fb      	str	r3, [r7, #12]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint32_t)(~TIM_CCMR2_OC3PE);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f023 0308 	bic.w	r3, r3, #8
 8007998:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 800799a:	887b      	ldrh	r3, [r7, #2]
 800799c:	68fa      	ldr	r2, [r7, #12]
 800799e:	4313      	orrs	r3, r2
 80079a0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	61da      	str	r2, [r3, #28]
}
 80079a8:	bf00      	nop
 80079aa:	3714      	adds	r7, #20
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b085      	sub	sp, #20
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	460b      	mov	r3, r1
 80079be:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 80079c0:	2300      	movs	r3, #0
 80079c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	69db      	ldr	r3, [r3, #28]
 80079c8:	60fb      	str	r3, [r7, #12]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint32_t)(~TIM_CCMR2_OC4PE);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079d0:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= ((uint32_t)TIM_OCPreload << 8);
 80079d2:	887b      	ldrh	r3, [r7, #2]
 80079d4:	021b      	lsls	r3, r3, #8
 80079d6:	68fa      	ldr	r2, [r7, #12]
 80079d8:	4313      	orrs	r3, r2
 80079da:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	68fa      	ldr	r2, [r7, #12]
 80079e0:	61da      	str	r2, [r3, #28]
}
 80079e2:	bf00      	nop
 80079e4:	3714      	adds	r7, #20
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr

080079ee <TIM_OC5PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC5PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80079ee:	b480      	push	{r7}
 80079f0:	b085      	sub	sp, #20
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
 80079f6:	460b      	mov	r3, r1
 80079f8:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr3 = 0;
 80079fa:	2300      	movs	r3, #0
 80079fc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr3 = TIMx->CCMR3;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a02:	60fb      	str	r3, [r7, #12]

  /* Reset the OC5PE Bit */
  tmpccmr3 &= (uint32_t)(~TIM_CCMR3_OC5PE);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f023 0308 	bic.w	r3, r3, #8
 8007a0a:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr3 |= (uint32_t)(TIM_OCPreload);
 8007a0c:	887b      	ldrh	r3, [r7, #2]
 8007a0e:	68fa      	ldr	r2, [r7, #12]
 8007a10:	4313      	orrs	r3, r2
 8007a12:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	68fa      	ldr	r2, [r7, #12]
 8007a18:	655a      	str	r2, [r3, #84]	; 0x54
}
 8007a1a:	bf00      	nop
 8007a1c:	3714      	adds	r7, #20
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr

08007a26 <TIM_OC6PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC6PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8007a26:	b480      	push	{r7}
 8007a28:	b085      	sub	sp, #20
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
 8007a2e:	460b      	mov	r3, r1
 8007a30:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr3 = 0;
 8007a32:	2300      	movs	r3, #0
 8007a34:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr3 = TIMx->CCMR3;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the OC5PE Bit */
  tmpccmr3 &= (uint32_t)(~TIM_CCMR3_OC6PE);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a42:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr3 |= ((uint32_t)TIM_OCPreload << 8);
 8007a44:	887b      	ldrh	r3, [r7, #2]
 8007a46:	021b      	lsls	r3, r3, #8
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	68fa      	ldr	r2, [r7, #12]
 8007a52:	655a      	str	r2, [r3, #84]	; 0x54
}
 8007a54:	bf00      	nop
 8007a56:	3714      	adds	r7, #20
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <TIM_OC1FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b085      	sub	sp, #20
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	460b      	mov	r3, r1
 8007a6a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	699b      	ldr	r3, [r3, #24]
 8007a74:	60fb      	str	r3, [r7, #12]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint32_t)~TIM_CCMR1_OC1FE;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f023 0304 	bic.w	r3, r3, #4
 8007a7c:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 8007a7e:	887b      	ldrh	r3, [r7, #2]
 8007a80:	68fa      	ldr	r2, [r7, #12]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	68fa      	ldr	r2, [r7, #12]
 8007a8a:	619a      	str	r2, [r3, #24]
}
 8007a8c:	bf00      	nop
 8007a8e:	3714      	adds	r7, #20
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <TIM_OC2FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	699b      	ldr	r3, [r3, #24]
 8007aac:	60fb      	str	r3, [r7, #12]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint32_t)(~TIM_CCMR1_OC2FE);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ab4:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= ((uint32_t)TIM_OCFast << 8);
 8007ab6:	887b      	ldrh	r3, [r7, #2]
 8007ab8:	021b      	lsls	r3, r3, #8
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	68fa      	ldr	r2, [r7, #12]
 8007ac4:	619a      	str	r2, [r3, #24]
}
 8007ac6:	bf00      	nop
 8007ac8:	3714      	adds	r7, #20
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr

08007ad2 <TIM_OC3FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8007ad2:	b480      	push	{r7}
 8007ad4:	b085      	sub	sp, #20
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
 8007ada:	460b      	mov	r3, r1
 8007adc:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	69db      	ldr	r3, [r3, #28]
 8007ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint32_t)~TIM_CCMR2_OC3FE;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f023 0304 	bic.w	r3, r3, #4
 8007aee:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 8007af0:	887b      	ldrh	r3, [r7, #2]
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	61da      	str	r2, [r3, #28]
}
 8007afe:	bf00      	nop
 8007b00:	3714      	adds	r7, #20
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr

08007b0a <TIM_OC4FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8007b0a:	b480      	push	{r7}
 8007b0c:	b085      	sub	sp, #20
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
 8007b12:	460b      	mov	r3, r1
 8007b14:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 8007b16:	2300      	movs	r3, #0
 8007b18:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	69db      	ldr	r3, [r3, #28]
 8007b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint32_t)(~TIM_CCMR2_OC4FE);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b26:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= ((uint32_t)TIM_OCFast << 8);
 8007b28:	887b      	ldrh	r3, [r7, #2]
 8007b2a:	021b      	lsls	r3, r3, #8
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	68fa      	ldr	r2, [r7, #12]
 8007b36:	61da      	str	r2, [r3, #28]
}
 8007b38:	bf00      	nop
 8007b3a:	3714      	adds	r7, #20
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <TIM_ClearOC1Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b085      	sub	sp, #20
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 8007b50:	2300      	movs	r3, #0
 8007b52:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	699b      	ldr	r3, [r3, #24]
 8007b58:	60fb      	str	r3, [r7, #12]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint32_t)~TIM_CCMR1_OC1CE;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b60:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 8007b62:	887b      	ldrh	r3, [r7, #2]
 8007b64:	68fa      	ldr	r2, [r7, #12]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	68fa      	ldr	r2, [r7, #12]
 8007b6e:	619a      	str	r2, [r3, #24]
}
 8007b70:	bf00      	nop
 8007b72:	3714      	adds	r7, #20
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr

08007b7c <TIM_ClearOC2Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b085      	sub	sp, #20
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	460b      	mov	r3, r1
 8007b86:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	699b      	ldr	r3, [r3, #24]
 8007b90:	60fb      	str	r3, [r7, #12]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint32_t)~TIM_CCMR1_OC2CE;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007b98:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= ((uint32_t)TIM_OCClear << 8);
 8007b9a:	887b      	ldrh	r3, [r7, #2]
 8007b9c:	021b      	lsls	r3, r3, #8
 8007b9e:	68fa      	ldr	r2, [r7, #12]
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	619a      	str	r2, [r3, #24]
}
 8007baa:	bf00      	nop
 8007bac:	3714      	adds	r7, #20
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr

08007bb6 <TIM_ClearOC3Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8007bb6:	b480      	push	{r7}
 8007bb8:	b085      	sub	sp, #20
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	69db      	ldr	r3, [r3, #28]
 8007bca:	60fb      	str	r3, [r7, #12]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint32_t)~TIM_CCMR2_OC3CE;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bd2:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 8007bd4:	887b      	ldrh	r3, [r7, #2]
 8007bd6:	68fa      	ldr	r2, [r7, #12]
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	61da      	str	r2, [r3, #28]
}
 8007be2:	bf00      	nop
 8007be4:	3714      	adds	r7, #20
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr

08007bee <TIM_ClearOC4Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8007bee:	b480      	push	{r7}
 8007bf0:	b085      	sub	sp, #20
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr2 = 0;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	69db      	ldr	r3, [r3, #28]
 8007c02:	60fb      	str	r3, [r7, #12]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint32_t)~TIM_CCMR2_OC4CE;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c0a:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= ((uint32_t)TIM_OCClear << 8);
 8007c0c:	887b      	ldrh	r3, [r7, #2]
 8007c0e:	021b      	lsls	r3, r3, #8
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	68fa      	ldr	r2, [r7, #12]
 8007c1a:	61da      	str	r2, [r3, #28]
}
 8007c1c:	bf00      	nop
 8007c1e:	3714      	adds	r7, #20
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <TIM_ClearOC5Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC5Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	460b      	mov	r3, r1
 8007c32:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr3 = 0;
 8007c34:	2300      	movs	r3, #0
 8007c36:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr3 = TIMx->CCMR3;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c3c:	60fb      	str	r3, [r7, #12]

  /* Reset the OC5CE Bit */
  tmpccmr3 &= (uint32_t)~TIM_CCMR3_OC5CE;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c44:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr3 |= (uint32_t)(TIM_OCClear);
 8007c46:	887b      	ldrh	r3, [r7, #2]
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	655a      	str	r2, [r3, #84]	; 0x54
}
 8007c54:	bf00      	nop
 8007c56:	3714      	adds	r7, #20
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <TIM_ClearOC6Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC6Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b085      	sub	sp, #20
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	460b      	mov	r3, r1
 8007c6a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr3 = 0;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr3 = TIMx->CCMR3;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c74:	60fb      	str	r3, [r7, #12]

  /* Reset the OC5CE Bit */
  tmpccmr3 &= (uint32_t)~TIM_CCMR3_OC6CE;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c7c:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr3 |= ((uint32_t)TIM_OCClear << 8);
 8007c7e:	887b      	ldrh	r3, [r7, #2]
 8007c80:	021b      	lsls	r3, r3, #8
 8007c82:	68fa      	ldr	r2, [r7, #12]
 8007c84:	4313      	orrs	r3, r2
 8007c86:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR3 register */
  TIMx->CCMR3 = tmpccmr3;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	68fa      	ldr	r2, [r7, #12]
 8007c8c:	655a      	str	r2, [r3, #84]	; 0x54
}
 8007c8e:	bf00      	nop
 8007c90:	3714      	adds	r7, #20
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr

08007c9a <TIM_SelectOCREFClear>:
  *     @arg TIM_OCReferenceClear_ETRF: The internal OCreference clear input is connected to ETRF.
  *     @arg TIM_OCReferenceClear_OCREFCLR: The internal OCreference clear input is connected to OCREF_CLR input.  
  * @retval None
  */
void TIM_SelectOCREFClear(TIM_TypeDef* TIMx, uint16_t TIM_OCReferenceClear)
{
 8007c9a:	b480      	push	{r7}
 8007c9c:	b083      	sub	sp, #12
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(TIM_OCREFERENCECECLEAR_SOURCE(TIM_OCReferenceClear));

  /* Set the TIM_OCReferenceClear source */
  TIMx->SMCR &=  (uint16_t)~((uint16_t)TIM_SMCR_OCCS);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	689a      	ldr	r2, [r3, #8]
 8007caa:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8007cae:	4013      	ands	r3, r2
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	6093      	str	r3, [r2, #8]
  TIMx->SMCR |=  TIM_OCReferenceClear;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	689a      	ldr	r2, [r3, #8]
 8007cb8:	887b      	ldrh	r3, [r7, #2]
 8007cba:	431a      	orrs	r2, r3
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	609a      	str	r2, [r3, #8]
}
 8007cc0:	bf00      	nop
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <TIM_OC1PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6a1b      	ldr	r3, [r3, #32]
 8007ce0:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint32_t)(~TIM_CCER_CC1P);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f023 0302 	bic.w	r3, r3, #2
 8007ce8:	60fb      	str	r3, [r7, #12]
  tmpccer |= TIM_OCPolarity;
 8007cea:	887b      	ldrh	r3, [r7, #2]
 8007cec:	68fa      	ldr	r2, [r7, #12]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	68fa      	ldr	r2, [r7, #12]
 8007cf6:	621a      	str	r2, [r3, #32]
}
 8007cf8:	bf00      	nop
 8007cfa:	3714      	adds	r7, #20
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <TIM_OC1NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b085      	sub	sp, #20
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 8007d10:	2300      	movs	r3, #0
 8007d12:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6a1b      	ldr	r3, [r3, #32]
 8007d18:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC1NP;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f023 0308 	bic.w	r3, r3, #8
 8007d20:	60fb      	str	r3, [r7, #12]
  tmpccer |= TIM_OCNPolarity;
 8007d22:	887b      	ldrh	r3, [r7, #2]
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	4313      	orrs	r3, r2
 8007d28:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	621a      	str	r2, [r3, #32]
}
 8007d30:	bf00      	nop
 8007d32:	3714      	adds	r7, #20
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <TIM_OC2PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b085      	sub	sp, #20
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	460b      	mov	r3, r1
 8007d46:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6a1b      	ldr	r3, [r3, #32]
 8007d50:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint32_t)(~TIM_CCER_CC2P);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f023 0320 	bic.w	r3, r3, #32
 8007d58:	60fb      	str	r3, [r7, #12]
  tmpccer |= ((uint32_t)TIM_OCPolarity << 4);
 8007d5a:	887b      	ldrh	r3, [r7, #2]
 8007d5c:	011b      	lsls	r3, r3, #4
 8007d5e:	68fa      	ldr	r2, [r7, #12]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	68fa      	ldr	r2, [r7, #12]
 8007d68:	621a      	str	r2, [r3, #32]
}
 8007d6a:	bf00      	nop
 8007d6c:	3714      	adds	r7, #20
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr

08007d76 <TIM_OC2NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8007d76:	b480      	push	{r7}
 8007d78:	b085      	sub	sp, #20
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
 8007d7e:	460b      	mov	r3, r1
 8007d80:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 8007d82:	2300      	movs	r3, #0
 8007d84:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a1b      	ldr	r3, [r3, #32]
 8007d8a:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC2NP;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d92:	60fb      	str	r3, [r7, #12]
  tmpccer |= ((uint32_t)TIM_OCNPolarity << 4);
 8007d94:	887b      	ldrh	r3, [r7, #2]
 8007d96:	011b      	lsls	r3, r3, #4
 8007d98:	68fa      	ldr	r2, [r7, #12]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	68fa      	ldr	r2, [r7, #12]
 8007da2:	621a      	str	r2, [r3, #32]
}
 8007da4:	bf00      	nop
 8007da6:	3714      	adds	r7, #20
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <TIM_OC3PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b085      	sub	sp, #20
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	460b      	mov	r3, r1
 8007dba:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6a1b      	ldr	r3, [r3, #32]
 8007dc4:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC3P;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007dcc:	60fb      	str	r3, [r7, #12]
  tmpccer |= ((uint32_t)TIM_OCPolarity << 8);
 8007dce:	887b      	ldrh	r3, [r7, #2]
 8007dd0:	021b      	lsls	r3, r3, #8
 8007dd2:	68fa      	ldr	r2, [r7, #12]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	68fa      	ldr	r2, [r7, #12]
 8007ddc:	621a      	str	r2, [r3, #32]
}
 8007dde:	bf00      	nop
 8007de0:	3714      	adds	r7, #20
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr

08007dea <TIM_OC3NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8007dea:	b480      	push	{r7}
 8007dec:	b085      	sub	sp, #20
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
 8007df2:	460b      	mov	r3, r1
 8007df4:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 8007df6:	2300      	movs	r3, #0
 8007df8:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a1b      	ldr	r3, [r3, #32]
 8007dfe:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC3NP;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e06:	60fb      	str	r3, [r7, #12]
  tmpccer |= ((uint32_t)TIM_OCNPolarity << 8);
 8007e08:	887b      	ldrh	r3, [r7, #2]
 8007e0a:	021b      	lsls	r3, r3, #8
 8007e0c:	68fa      	ldr	r2, [r7, #12]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	68fa      	ldr	r2, [r7, #12]
 8007e16:	621a      	str	r2, [r3, #32]
}
 8007e18:	bf00      	nop
 8007e1a:	3714      	adds	r7, #20
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr

08007e24 <TIM_OC4PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b085      	sub	sp, #20
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 8007e30:	2300      	movs	r3, #0
 8007e32:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6a1b      	ldr	r3, [r3, #32]
 8007e38:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC4P;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e40:	60fb      	str	r3, [r7, #12]
  tmpccer |= ((uint32_t)TIM_OCPolarity << 12);
 8007e42:	887b      	ldrh	r3, [r7, #2]
 8007e44:	031b      	lsls	r3, r3, #12
 8007e46:	68fa      	ldr	r2, [r7, #12]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	621a      	str	r2, [r3, #32]
}
 8007e52:	bf00      	nop
 8007e54:	3714      	adds	r7, #20
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr

08007e5e <TIM_OC5PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC5PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8007e5e:	b480      	push	{r7}
 8007e60:	b085      	sub	sp, #20
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
 8007e66:	460b      	mov	r3, r1
 8007e68:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6a1b      	ldr	r3, [r3, #32]
 8007e72:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC5P Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC5P;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007e7a:	60fb      	str	r3, [r7, #12]
  tmpccer |= ((uint32_t)TIM_OCPolarity << 16);
 8007e7c:	887b      	ldrh	r3, [r7, #2]
 8007e7e:	041b      	lsls	r3, r3, #16
 8007e80:	68fa      	ldr	r2, [r7, #12]
 8007e82:	4313      	orrs	r3, r2
 8007e84:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	621a      	str	r2, [r3, #32]
}
 8007e8c:	bf00      	nop
 8007e8e:	3714      	adds	r7, #20
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <TIM_OC6PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC6PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccer = 0;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6a1b      	ldr	r3, [r3, #32]
 8007eac:	60fb      	str	r3, [r7, #12]

  /* Set or Reset the CC6P Bit */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007eb4:	60fb      	str	r3, [r7, #12]
  tmpccer |= ((uint32_t)TIM_OCPolarity << 20);
 8007eb6:	887b      	ldrh	r3, [r7, #2]
 8007eb8:	051b      	lsls	r3, r3, #20
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	621a      	str	r2, [r3, #32]
}
 8007ec6:	bf00      	nop
 8007ec8:	3714      	adds	r7, #20
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr

08007ed2 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8007ed2:	b480      	push	{r7}
 8007ed4:	b085      	sub	sp, #20
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
 8007eda:	460b      	mov	r3, r1
 8007edc:	807b      	strh	r3, [r7, #2]
 8007ede:	4613      	mov	r3, r2
 8007ee0:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = (uint32_t)CCER_CCE_SET << (uint32_t)TIM_Channel;
 8007ee6:	887b      	ldrh	r3, [r7, #2]
 8007ee8:	2201      	movs	r2, #1
 8007eea:	fa02 f303 	lsl.w	r3, r2, r3
 8007eee:	60fb      	str	r3, [r7, #12]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint32_t)(~tmp);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6a1a      	ldr	r2, [r3, #32]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	43db      	mvns	r3, r3
 8007ef8:	401a      	ands	r2, r3
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  ((uint32_t)TIM_CCx << (uint32_t)TIM_Channel);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6a1a      	ldr	r2, [r3, #32]
 8007f02:	8839      	ldrh	r1, [r7, #0]
 8007f04:	887b      	ldrh	r3, [r7, #2]
 8007f06:	fa01 f303 	lsl.w	r3, r1, r3
 8007f0a:	431a      	orrs	r2, r3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	621a      	str	r2, [r3, #32]
}
 8007f10:	bf00      	nop
 8007f12:	3714      	adds	r7, #20
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b085      	sub	sp, #20
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	460b      	mov	r3, r1
 8007f26:	807b      	strh	r3, [r7, #2]
 8007f28:	4613      	mov	r3, r2
 8007f2a:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = (uint32_t)CCER_CCNE_SET << (uint32_t)TIM_Channel;
 8007f30:	887b      	ldrh	r3, [r7, #2]
 8007f32:	2204      	movs	r2, #4
 8007f34:	fa02 f303 	lsl.w	r3, r2, r3
 8007f38:	60fb      	str	r3, [r7, #12]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint32_t) ~tmp;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a1a      	ldr	r2, [r3, #32]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	43db      	mvns	r3, r3
 8007f42:	401a      	ands	r2, r3
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  ((uint32_t)TIM_CCxN << (uint32_t)TIM_Channel);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6a1a      	ldr	r2, [r3, #32]
 8007f4c:	8839      	ldrh	r1, [r7, #0]
 8007f4e:	887b      	ldrh	r3, [r7, #2]
 8007f50:	fa01 f303 	lsl.w	r3, r1, r3
 8007f54:	431a      	orrs	r2, r3
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	621a      	str	r2, [r3, #32]
}
 8007f5a:	bf00      	nop
 8007f5c:	3714      	adds	r7, #20
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr

08007f66 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b082      	sub	sp, #8
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
 8007f6e:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	881b      	ldrh	r3, [r3, #0]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d10f      	bne.n	8007f98 <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	8859      	ldrh	r1, [r3, #2]
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	889a      	ldrh	r2, [r3, #4]
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	891b      	ldrh	r3, [r3, #8]
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 fd00 	bl	800898a <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	88db      	ldrh	r3, [r3, #6]
 8007f8e:	4619      	mov	r1, r3
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 f8e1 	bl	8008158 <TIM_SetIC1Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8007f96:	e036      	b.n	8008006 <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	881b      	ldrh	r3, [r3, #0]
 8007f9c:	2b04      	cmp	r3, #4
 8007f9e:	d10f      	bne.n	8007fc0 <TIM_ICInit+0x5a>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	8859      	ldrh	r1, [r3, #2]
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	889a      	ldrh	r2, [r3, #4]
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	891b      	ldrh	r3, [r3, #8]
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 fd2c 	bl	8008a0a <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	88db      	ldrh	r3, [r3, #6]
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 f8e5 	bl	8008188 <TIM_SetIC2Prescaler>
}
 8007fbe:	e022      	b.n	8008006 <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	881b      	ldrh	r3, [r3, #0]
 8007fc4:	2b08      	cmp	r3, #8
 8007fc6:	d10f      	bne.n	8007fe8 <TIM_ICInit+0x82>
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	8859      	ldrh	r1, [r3, #2]
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	889a      	ldrh	r2, [r3, #4]
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	891b      	ldrh	r3, [r3, #8]
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 fd64 	bl	8008aa2 <TI3_Config>
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	88db      	ldrh	r3, [r3, #6]
 8007fde:	4619      	mov	r1, r3
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 f8ea 	bl	80081ba <TIM_SetIC3Prescaler>
}
 8007fe6:	e00e      	b.n	8008006 <TIM_ICInit+0xa0>
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	8859      	ldrh	r1, [r3, #2]
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	889a      	ldrh	r2, [r3, #4]
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	891b      	ldrh	r3, [r3, #8]
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 fd9b 	bl	8008b30 <TI4_Config>
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	88db      	ldrh	r3, [r3, #6]
 8007ffe:	4619      	mov	r1, r3
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 f8f3 	bl	80081ec <TIM_SetIC4Prescaler>
}
 8008006:	bf00      	nop
 8008008:	3708      	adds	r7, #8
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}

0800800e <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800800e:	b480      	push	{r7}
 8008010:	b083      	sub	sp, #12
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2201      	movs	r2, #1
 8008026:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	811a      	strh	r2, [r3, #8]
}
 8008034:	bf00      	nop
 8008036:	370c      	adds	r7, #12
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr

08008040 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 800804a:	2300      	movs	r3, #0
 800804c:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
 800804e:	2301      	movs	r3, #1
 8008050:	81bb      	strh	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	885b      	ldrh	r3, [r3, #2]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d102      	bne.n	8008060 <TIM_PWMIConfig+0x20>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 800805a:	2302      	movs	r3, #2
 800805c:	81fb      	strh	r3, [r7, #14]
 800805e:	e001      	b.n	8008064 <TIM_PWMIConfig+0x24>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 8008060:	2300      	movs	r3, #0
 8008062:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	889b      	ldrh	r3, [r3, #4]
 8008068:	2b01      	cmp	r3, #1
 800806a:	d102      	bne.n	8008072 <TIM_PWMIConfig+0x32>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 800806c:	2302      	movs	r3, #2
 800806e:	81bb      	strh	r3, [r7, #12]
 8008070:	e001      	b.n	8008076 <TIM_PWMIConfig+0x36>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 8008072:	2301      	movs	r3, #1
 8008074:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	881b      	ldrh	r3, [r3, #0]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d11c      	bne.n	80080b8 <TIM_PWMIConfig+0x78>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	8859      	ldrh	r1, [r3, #2]
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	889a      	ldrh	r2, [r3, #4]
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	891b      	ldrh	r3, [r3, #8]
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 fc7d 	bl	800898a <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	88db      	ldrh	r3, [r3, #6]
 8008094:	4619      	mov	r1, r3
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 f85e 	bl	8008158 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	891b      	ldrh	r3, [r3, #8]
 80080a0:	89ba      	ldrh	r2, [r7, #12]
 80080a2:	89f9      	ldrh	r1, [r7, #14]
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 fcb0 	bl	8008a0a <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	88db      	ldrh	r3, [r3, #6]
 80080ae:	4619      	mov	r1, r3
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 f869 	bl	8008188 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 80080b6:	e01b      	b.n	80080f0 <TIM_PWMIConfig+0xb0>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	8859      	ldrh	r1, [r3, #2]
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	889a      	ldrh	r2, [r3, #4]
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	891b      	ldrh	r3, [r3, #8]
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 fca0 	bl	8008a0a <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	88db      	ldrh	r3, [r3, #6]
 80080ce:	4619      	mov	r1, r3
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 f859 	bl	8008188 <TIM_SetIC2Prescaler>
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	891b      	ldrh	r3, [r3, #8]
 80080da:	89ba      	ldrh	r2, [r7, #12]
 80080dc:	89f9      	ldrh	r1, [r7, #14]
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 fc53 	bl	800898a <TI1_Config>
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	88db      	ldrh	r3, [r3, #6]
 80080e8:	4619      	mov	r1, r3
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 f834 	bl	8008158 <TIM_SetIC1Prescaler>
}
 80080f0:	bf00      	nop
 80080f2:	3710      	adds	r7, #16
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 8, 15, 16, 20 or 17 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8008104:	4618      	mov	r0, r3
 8008106:	370c      	adds	r7, #12
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <TIM_GetCapture2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 8, 20 or 15 to select the TIM 
  *         peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 8008110:	b480      	push	{r7}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800811c:	4618      	mov	r0, r3
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 20 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8008134:	4618      	mov	r0, r3
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 20 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800814c:	4618      	mov	r0, r3
 800814e:	370c      	adds	r7, #12
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <TIM_SetIC1Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8008158:	b480      	push	{r7}
 800815a:	b083      	sub	sp, #12
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	460b      	mov	r3, r1
 8008162:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint32_t)~TIM_CCMR1_IC1PSC;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	699b      	ldr	r3, [r3, #24]
 8008168:	f023 020c 	bic.w	r2, r3, #12
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	619a      	str	r2, [r3, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	699a      	ldr	r2, [r3, #24]
 8008174:	887b      	ldrh	r3, [r7, #2]
 8008176:	431a      	orrs	r2, r3
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	619a      	str	r2, [r3, #24]
}
 800817c:	bf00      	nop
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <TIM_SetIC2Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	460b      	mov	r3, r1
 8008192:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint32_t)~TIM_CCMR1_IC2PSC;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	699b      	ldr	r3, [r3, #24]
 8008198:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	619a      	str	r2, [r3, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint32_t)((uint32_t)TIM_ICPSC << 8);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	699a      	ldr	r2, [r3, #24]
 80081a4:	887b      	ldrh	r3, [r7, #2]
 80081a6:	021b      	lsls	r3, r3, #8
 80081a8:	431a      	orrs	r2, r3
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	619a      	str	r2, [r3, #24]
}
 80081ae:	bf00      	nop
 80081b0:	370c      	adds	r7, #12
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr

080081ba <TIM_SetIC3Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 80081ba:	b480      	push	{r7}
 80081bc:	b083      	sub	sp, #12
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
 80081c2:	460b      	mov	r3, r1
 80081c4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	69da      	ldr	r2, [r3, #28]
 80081ca:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80081ce:	4013      	ands	r3, r2
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	61d3      	str	r3, [r2, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	69da      	ldr	r2, [r3, #28]
 80081d8:	887b      	ldrh	r3, [r7, #2]
 80081da:	431a      	orrs	r2, r3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	61da      	str	r2, [r3, #28]
}
 80081e0:	bf00      	nop
 80081e2:	370c      	adds	r7, #12
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr

080081ec <TIM_SetIC4Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 80081ec:	b480      	push	{r7}
 80081ee:	b083      	sub	sp, #12
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	460b      	mov	r3, r1
 80081f6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	69da      	ldr	r2, [r3, #28]
 80081fc:	f24f 33ff 	movw	r3, #62463	; 0xf3ff
 8008200:	4013      	ands	r3, r2
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	61d3      	str	r3, [r2, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	69db      	ldr	r3, [r3, #28]
 800820a:	887a      	ldrh	r2, [r7, #2]
 800820c:	0212      	lsls	r2, r2, #8
 800820e:	b292      	uxth	r2, r2
 8008210:	431a      	orrs	r2, r3
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	61da      	str	r2, [r3, #28]
}
 8008216:	bf00      	nop
 8008218:	370c      	adds	r7, #12
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr

08008222 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 8008222:	b480      	push	{r7}
 8008224:	b083      	sub	sp, #12
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
 800822a:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	881a      	ldrh	r2, [r3, #0]
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	885b      	ldrh	r3, [r3, #2]
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8008234:	4313      	orrs	r3, r2
 8008236:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	889b      	ldrh	r3, [r3, #4]
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 800823c:	4313      	orrs	r3, r2
 800823e:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	88db      	ldrh	r3, [r3, #6]
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8008244:	4313      	orrs	r3, r2
 8008246:	b29a      	uxth	r2, r3
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	891b      	ldrh	r3, [r3, #8]
 800824c:	4313      	orrs	r3, r2
 800824e:	b29a      	uxth	r2, r3
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	895b      	ldrh	r3, [r3, #10]
 8008254:	4313      	orrs	r3, r2
 8008256:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	899b      	ldrh	r3, [r3, #12]
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 800825c:	4313      	orrs	r3, r2
 800825e:	b29b      	uxth	r3, r3
 8008260:	461a      	mov	r2, r3
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	645a      	str	r2, [r3, #68]	; 0x44
}
 8008266:	bf00      	nop
 8008268:	370c      	adds	r7, #12
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr

08008272 <TIM_Break1Config>:
  * @param  TIM_Break1Filter: specifies the Break1 filter value.
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_Break1Config(TIM_TypeDef* TIMx, uint32_t TIM_Break1Polarity, uint8_t TIM_Break1Filter)
{   /* Check the parameters */
 8008272:	b480      	push	{r7}
 8008274:	b085      	sub	sp, #20
 8008276:	af00      	add	r7, sp, #0
 8008278:	60f8      	str	r0, [r7, #12]
 800827a:	60b9      	str	r1, [r7, #8]
 800827c:	4613      	mov	r3, r2
 800827e:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_BREAK1_FILTER(TIM_Break1Filter));

  /* Reset the BKP and BKF Bits */
  TIMx->BDTR &= (uint32_t)~ (TIM_BDTR_BKP | TIM_BDTR_BKF);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008284:	f423 2272 	bic.w	r2, r3, #991232	; 0xf2000
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Configure the Break1 polarity and filter */
  TIMx->BDTR |=	TIM_Break1Polarity |((uint32_t)TIM_Break1Filter << 16);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008290:	79fb      	ldrb	r3, [r7, #7]
 8008292:	0419      	lsls	r1, r3, #16
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	430b      	orrs	r3, r1
 8008298:	431a      	orrs	r2, r3
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	645a      	str	r2, [r3, #68]	; 0x44
}
 800829e:	bf00      	nop
 80082a0:	3714      	adds	r7, #20
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr

080082aa <TIM_Break2Config>:
  * @param  TIM_Break2Filter: specifies the Break2 filter value.
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_Break2Config(TIM_TypeDef* TIMx, uint32_t TIM_Break2Polarity, uint8_t TIM_Break2Filter)
{
 80082aa:	b480      	push	{r7}
 80082ac:	b085      	sub	sp, #20
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	60f8      	str	r0, [r7, #12]
 80082b2:	60b9      	str	r1, [r7, #8]
 80082b4:	4613      	mov	r3, r2
 80082b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_BREAK2_FILTER(TIM_Break2Filter));

  /* Reset the BKP and BKF Bits */
  TIMx->BDTR &= (uint32_t)~ (TIM_BDTR_BK2P | TIM_BDTR_BK2F);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082bc:	f023 723c 	bic.w	r2, r3, #49283072	; 0x2f00000
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure the Break1 polarity and filter */
  TIMx->BDTR |=	TIM_Break2Polarity |((uint32_t)TIM_Break2Filter << 20);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082c8:	79fb      	ldrb	r3, [r7, #7]
 80082ca:	0519      	lsls	r1, r3, #20
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	430b      	orrs	r3, r1
 80082d0:	431a      	orrs	r2, r3
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	645a      	str	r2, [r3, #68]	; 0x44
}
 80082d6:	bf00      	nop
 80082d8:	3714      	adds	r7, #20
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr

080082e2 <TIM_Break1Cmd>:
  * @param  NewState: new state of the TIM Break1 input.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Break1Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80082e2:	b480      	push	{r7}
 80082e4:	b083      	sub	sp, #12
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
 80082ea:	460b      	mov	r3, r1
 80082ec:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80082ee:	78fb      	ldrb	r3, [r7, #3]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d006      	beq.n	8008302 <TIM_Break1Cmd+0x20>
  {
    /* Enable the Break1 */
    TIMx->BDTR |= TIM_BDTR_BKE;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082f8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	645a      	str	r2, [r3, #68]	; 0x44
  else
  {
    /* Disable the Break1 */
    TIMx->BDTR &= (uint32_t)~TIM_BDTR_BKE;
  } 
}
 8008300:	e005      	b.n	800830e <TIM_Break1Cmd+0x2c>
    TIMx->BDTR &= (uint32_t)~TIM_BDTR_BKE;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008306:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	645a      	str	r2, [r3, #68]	; 0x44
}
 800830e:	bf00      	nop
 8008310:	370c      	adds	r7, #12
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr

0800831a <TIM_Break2Cmd>:
  * @param  NewState: new state of the TIM Break2 input.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Break2Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800831a:	b480      	push	{r7}
 800831c:	b083      	sub	sp, #12
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
 8008322:	460b      	mov	r3, r1
 8008324:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8008326:	78fb      	ldrb	r3, [r7, #3]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d006      	beq.n	800833a <TIM_Break2Cmd+0x20>
  {
    /* Enable the Break1 */
    TIMx->BDTR |= TIM_BDTR_BK2E;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008330:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	645a      	str	r2, [r3, #68]	; 0x44
  else
  {
    /* Disable the Break1 */
    TIMx->BDTR &= (uint32_t)~TIM_BDTR_BK2E;
  }
}
 8008338:	e005      	b.n	8008346 <TIM_Break2Cmd+0x2c>
    TIMx->BDTR &= (uint32_t)~TIM_BDTR_BK2E;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800833e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	645a      	str	r2, [r3, #68]	; 0x44
}
 8008346:	bf00      	nop
 8008348:	370c      	adds	r7, #12
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr

08008352 <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
 8008352:	b480      	push	{r7}
 8008354:	b083      	sub	sp, #12
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2200      	movs	r2, #0
 800835e:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	819a      	strh	r2, [r3, #12]
}
 8008384:	bf00      	nop
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	460b      	mov	r3, r1
 800839a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800839c:	78fb      	ldrb	r3, [r7, #3]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d006      	beq.n	80083b0 <TIM_CtrlPWMOutputs+0x20>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083a6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	645a      	str	r2, [r3, #68]	; 0x44
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
  }  
}
 80083ae:	e005      	b.n	80083bc <TIM_CtrlPWMOutputs+0x2c>
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083b4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	645a      	str	r2, [r3, #68]	; 0x44
}
 80083bc:	bf00      	nop
 80083be:	370c      	adds	r7, #12
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b083      	sub	sp, #12
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	460b      	mov	r3, r1
 80083d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80083d4:	78fb      	ldrb	r3, [r7, #3]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d006      	beq.n	80083e8 <TIM_SelectCOM+0x20>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	f043 0204 	orr.w	r2, r3, #4
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	605a      	str	r2, [r3, #4]
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
  }
}
 80083e6:	e006      	b.n	80083f6 <TIM_SelectCOM+0x2e>
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	685a      	ldr	r2, [r3, #4]
 80083ec:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 80083f0:	4013      	ands	r3, r2
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	6053      	str	r3, [r2, #4]
}
 80083f6:	bf00      	nop
 80083f8:	370c      	adds	r7, #12
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr

08008402 <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
 8008402:	b480      	push	{r7}
 8008404:	b083      	sub	sp, #12
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
 800840a:	460b      	mov	r3, r1
 800840c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800840e:	78fb      	ldrb	r3, [r7, #3]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d006      	beq.n	8008422 <TIM_CCPreloadControl+0x20>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	f043 0201 	orr.w	r2, r3, #1
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	605a      	str	r2, [r3, #4]
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
  }
}
 8008420:	e006      	b.n	8008430 <TIM_CCPreloadControl+0x2e>
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	685a      	ldr	r2, [r3, #4]
 8008426:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800842a:	4013      	ands	r3, r2
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	6053      	str	r3, [r2, #4]
}
 8008430:	bf00      	nop
 8008432:	370c      	adds	r7, #12
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	460b      	mov	r3, r1
 8008446:	807b      	strh	r3, [r7, #2]
 8008448:	4613      	mov	r3, r2
 800844a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800844c:	787b      	ldrb	r3, [r7, #1]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d006      	beq.n	8008460 <TIM_ITConfig+0x24>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	68da      	ldr	r2, [r3, #12]
 8008456:	887b      	ldrh	r3, [r7, #2]
 8008458:	431a      	orrs	r2, r3
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	60da      	str	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 800845e:	e007      	b.n	8008470 <TIM_ITConfig+0x34>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	887a      	ldrh	r2, [r7, #2]
 8008466:	43d2      	mvns	r2, r2
 8008468:	b292      	uxth	r2, r2
 800846a:	401a      	ands	r2, r3
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	60da      	str	r2, [r3, #12]
}
 8008470:	bf00      	nop
 8008472:	370c      	adds	r7, #12
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <TIM_GenerateEvent>:
  * @note   TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.
  *        
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	460b      	mov	r3, r1
 8008486:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 8008488:	887a      	ldrh	r2, [r7, #2]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	615a      	str	r2, [r3, #20]
}
 800848e:	bf00      	nop
 8008490:	370c      	adds	r7, #12
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr

0800849a <TIM_GetFlagStatus>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.    
  *
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint32_t TIM_FLAG)
{ 
 800849a:	b480      	push	{r7}
 800849c:	b085      	sub	sp, #20
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
 80084a2:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;  
 80084a4:	2300      	movs	r3, #0
 80084a6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != RESET)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	691a      	ldr	r2, [r3, #16]
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	4013      	ands	r3, r2
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d002      	beq.n	80084ba <TIM_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 80084b4:	2301      	movs	r3, #1
 80084b6:	73fb      	strb	r3, [r7, #15]
 80084b8:	e001      	b.n	80084be <TIM_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 80084ba:	2300      	movs	r3, #0
 80084bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80084be:	7bfb      	ldrb	r3, [r7, #15]
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3714      	adds	r7, #20
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <TIM_ClearFlag>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.
  *    
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	460b      	mov	r3, r1
 80084d6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 80084d8:	887b      	ldrh	r3, [r7, #2]
 80084da:	43db      	mvns	r3, r3
 80084dc:	b29b      	uxth	r3, r3
 80084de:	461a      	mov	r2, r3
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	611a      	str	r2, [r3, #16]
}
 80084e4:	bf00      	nop
 80084e6:	370c      	adds	r7, #12
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b085      	sub	sp, #20
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	460b      	mov	r3, r1
 80084fa:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80084fc:	2300      	movs	r3, #0
 80084fe:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8008500:	2300      	movs	r3, #0
 8008502:	81bb      	strh	r3, [r7, #12]
 8008504:	2300      	movs	r3, #0
 8008506:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	691b      	ldr	r3, [r3, #16]
 800850c:	b29a      	uxth	r2, r3
 800850e:	887b      	ldrh	r3, [r7, #2]
 8008510:	4013      	ands	r3, r2
 8008512:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	68db      	ldr	r3, [r3, #12]
 8008518:	b29a      	uxth	r2, r3
 800851a:	887b      	ldrh	r3, [r7, #2]
 800851c:	4013      	ands	r3, r2
 800851e:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8008520:	89bb      	ldrh	r3, [r7, #12]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d005      	beq.n	8008532 <TIM_GetITStatus+0x42>
 8008526:	897b      	ldrh	r3, [r7, #10]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d002      	beq.n	8008532 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 800852c:	2301      	movs	r3, #1
 800852e:	73fb      	strb	r3, [r7, #15]
 8008530:	e001      	b.n	8008536 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8008532:	2300      	movs	r3, #0
 8008534:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008536:	7bfb      	ldrb	r3, [r7, #15]
}
 8008538:	4618      	mov	r0, r3
 800853a:	3714      	adds	r7, #20
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	460b      	mov	r3, r1
 800854e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8008550:	887b      	ldrh	r3, [r7, #2]
 8008552:	43db      	mvns	r3, r3
 8008554:	b29b      	uxth	r3, r3
 8008556:	461a      	mov	r2, r3
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	611a      	str	r2, [r3, #16]
}
 800855c:	bf00      	nop
 800855e:	370c      	adds	r7, #12
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr

08008568 <TIM_DMAConfig>:
  * @param  TIM_DMABurstLength: DMA Burst length. This parameter can be one value
  *         between: TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
 8008568:	b480      	push	{r7}
 800856a:	b083      	sub	sp, #12
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	460b      	mov	r3, r1
 8008572:	807b      	strh	r3, [r7, #2]
 8008574:	4613      	mov	r3, r2
 8008576:	803b      	strh	r3, [r7, #0]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 8008578:	887a      	ldrh	r2, [r7, #2]
 800857a:	883b      	ldrh	r3, [r7, #0]
 800857c:	4313      	orrs	r3, r2
 800857e:	b29a      	uxth	r2, r3
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
 8008586:	bf00      	nop
 8008588:	370c      	adds	r7, #12
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr

08008592 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 8008592:	b480      	push	{r7}
 8008594:	b083      	sub	sp, #12
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
 800859a:	460b      	mov	r3, r1
 800859c:	807b      	strh	r3, [r7, #2]
 800859e:	4613      	mov	r3, r2
 80085a0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80085a2:	787b      	ldrb	r3, [r7, #1]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d006      	beq.n	80085b6 <TIM_DMACmd+0x24>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	68da      	ldr	r2, [r3, #12]
 80085ac:	887b      	ldrh	r3, [r7, #2]
 80085ae:	431a      	orrs	r2, r3
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	60da      	str	r2, [r3, #12]
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
  }
}
 80085b4:	e007      	b.n	80085c6 <TIM_DMACmd+0x34>
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	887a      	ldrh	r2, [r7, #2]
 80085bc:	43d2      	mvns	r2, r2
 80085be:	b292      	uxth	r2, r2
 80085c0:	401a      	ands	r2, r3
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	60da      	str	r2, [r3, #12]
}
 80085c6:	bf00      	nop
 80085c8:	370c      	adds	r7, #12
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr

080085d2 <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80085d2:	b480      	push	{r7}
 80085d4:	b083      	sub	sp, #12
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
 80085da:	460b      	mov	r3, r1
 80085dc:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80085de:	78fb      	ldrb	r3, [r7, #3]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d006      	beq.n	80085f2 <TIM_SelectCCDMA+0x20>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	f043 0208 	orr.w	r2, r3, #8
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	605a      	str	r2, [r3, #4]
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
  }
}
 80085f0:	e006      	b.n	8008600 <TIM_SelectCCDMA+0x2e>
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	685a      	ldr	r2, [r3, #4]
 80085f6:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 80085fa:	4013      	ands	r3, r2
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	6053      	str	r3, [r2, #4]
}
 8008600:	bf00      	nop
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr

0800860c <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 8, 20 or 15 to select the TIM 
  *         peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
 800860c:	b480      	push	{r7}
 800860e:	b083      	sub	sp, #12
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	689a      	ldr	r2, [r3, #8]
 8008618:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800861c:	4013      	ands	r3, r2
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	6093      	str	r3, [r2, #8]
}
 8008622:	bf00      	nop
 8008624:	370c      	adds	r7, #12
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr

0800862e <TIM_ITRxExternalClockConfig>:
  *            @arg TIM_TS_ITR2: Internal Trigger 2
  *            @arg TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 800862e:	b580      	push	{r7, lr}
 8008630:	b082      	sub	sp, #8
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
 8008636:	460b      	mov	r3, r1
 8008638:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
 800863a:	887b      	ldrh	r3, [r7, #2]
 800863c:	4619      	mov	r1, r3
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 f882 	bl	8008748 <TIM_SelectInputTrigger>

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	689b      	ldr	r3, [r3, #8]
 8008648:	f043 0207 	orr.w	r2, r3, #7
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	609a      	str	r2, [r3, #8]
}
 8008650:	bf00      	nop
 8008652:	3708      	adds	r7, #8
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	4608      	mov	r0, r1
 8008662:	4611      	mov	r1, r2
 8008664:	461a      	mov	r2, r3
 8008666:	4603      	mov	r3, r0
 8008668:	817b      	strh	r3, [r7, #10]
 800866a:	460b      	mov	r3, r1
 800866c:	813b      	strh	r3, [r7, #8]
 800866e:	4613      	mov	r3, r2
 8008670:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8008672:	897b      	ldrh	r3, [r7, #10]
 8008674:	2b60      	cmp	r3, #96	; 0x60
 8008676:	d106      	bne.n	8008686 <TIM_TIxExternalClockConfig+0x2e>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8008678:	88fb      	ldrh	r3, [r7, #6]
 800867a:	8939      	ldrh	r1, [r7, #8]
 800867c:	2201      	movs	r2, #1
 800867e:	68f8      	ldr	r0, [r7, #12]
 8008680:	f000 f9c3 	bl	8008a0a <TI2_Config>
 8008684:	e005      	b.n	8008692 <TIM_TIxExternalClockConfig+0x3a>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8008686:	88fb      	ldrh	r3, [r7, #6]
 8008688:	8939      	ldrh	r1, [r7, #8]
 800868a:	2201      	movs	r2, #1
 800868c:	68f8      	ldr	r0, [r7, #12]
 800868e:	f000 f97c 	bl	800898a <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
 8008692:	897b      	ldrh	r3, [r7, #10]
 8008694:	4619      	mov	r1, r3
 8008696:	68f8      	ldr	r0, [r7, #12]
 8008698:	f000 f856 	bl	8008748 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	f043 0207 	orr.w	r2, r3, #7
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	609a      	str	r2, [r3, #8]
}
 80086a8:	bf00      	nop
 80086aa:	3710      	adds	r7, #16
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b086      	sub	sp, #24
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	4608      	mov	r0, r1
 80086ba:	4611      	mov	r1, r2
 80086bc:	461a      	mov	r2, r3
 80086be:	4603      	mov	r3, r0
 80086c0:	817b      	strh	r3, [r7, #10]
 80086c2:	460b      	mov	r3, r1
 80086c4:	813b      	strh	r3, [r7, #8]
 80086c6:	4613      	mov	r3, r2
 80086c8:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 80086ca:	2300      	movs	r3, #0
 80086cc:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 80086ce:	88fb      	ldrh	r3, [r7, #6]
 80086d0:	893a      	ldrh	r2, [r7, #8]
 80086d2:	8979      	ldrh	r1, [r7, #10]
 80086d4:	68f8      	ldr	r0, [r7, #12]
 80086d6:	f000 f8b5 	bl	8008844 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	82fb      	strh	r3, [r7, #22]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 80086e0:	8afb      	ldrh	r3, [r7, #22]
 80086e2:	f023 0307 	bic.w	r3, r3, #7
 80086e6:	82fb      	strh	r3, [r7, #22]

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 80086e8:	8afb      	ldrh	r3, [r7, #22]
 80086ea:	f043 0307 	orr.w	r3, r3, #7
 80086ee:	82fb      	strh	r3, [r7, #22]

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 80086f0:	8afb      	ldrh	r3, [r7, #22]
 80086f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086f6:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
 80086f8:	8afb      	ldrh	r3, [r7, #22]
 80086fa:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80086fe:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008700:	8afa      	ldrh	r2, [r7, #22]
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	609a      	str	r2, [r3, #8]
}
 8008706:	bf00      	nop
 8008708:	3718      	adds	r7, #24
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b084      	sub	sp, #16
 8008712:	af00      	add	r7, sp, #0
 8008714:	60f8      	str	r0, [r7, #12]
 8008716:	4608      	mov	r0, r1
 8008718:	4611      	mov	r1, r2
 800871a:	461a      	mov	r2, r3
 800871c:	4603      	mov	r3, r0
 800871e:	817b      	strh	r3, [r7, #10]
 8008720:	460b      	mov	r3, r1
 8008722:	813b      	strh	r3, [r7, #8]
 8008724:	4613      	mov	r3, r2
 8008726:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8008728:	88fb      	ldrh	r3, [r7, #6]
 800872a:	893a      	ldrh	r2, [r7, #8]
 800872c:	8979      	ldrh	r1, [r7, #10]
 800872e:	68f8      	ldr	r0, [r7, #12]
 8008730:	f000 f888 	bl	8008844 <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	609a      	str	r2, [r3, #8]
}
 8008740:	bf00      	nop
 8008742:	3710      	adds	r7, #16
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}

08008748 <TIM_SelectInputTrigger>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 8008748:	b480      	push	{r7}
 800874a:	b085      	sub	sp, #20
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	460b      	mov	r3, r1
 8008752:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
 8008754:	2300      	movs	r3, #0
 8008756:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	689b      	ldr	r3, [r3, #8]
 800875c:	81fb      	strh	r3, [r7, #14]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 800875e:	89fb      	ldrh	r3, [r7, #14]
 8008760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008764:	81fb      	strh	r3, [r7, #14]

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8008766:	89fa      	ldrh	r2, [r7, #14]
 8008768:	887b      	ldrh	r3, [r7, #2]
 800876a:	4313      	orrs	r3, r2
 800876c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800876e:	89fa      	ldrh	r2, [r7, #14]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	609a      	str	r2, [r3, #8]
}
 8008774:	bf00      	nop
 8008776:	3714      	adds	r7, #20
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	460b      	mov	r3, r1
 800878a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST7_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	685a      	ldr	r2, [r3, #4]
 8008790:	f64f 738f 	movw	r3, #65423	; 0xff8f
 8008794:	4013      	ands	r3, r2
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	6053      	str	r3, [r2, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	685a      	ldr	r2, [r3, #4]
 800879e:	887b      	ldrh	r3, [r7, #2]
 80087a0:	431a      	orrs	r2, r3
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	605a      	str	r2, [r3, #4]
}
 80087a6:	bf00      	nop
 80087a8:	370c      	adds	r7, #12
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr

080087b2 <TIM_SelectOutputTrigger2>:
  *            @arg TIM_TRGO2Source_OC5RefRising_OC6RefFalling: OC5Ref Rising and OC6Ref Falling are used as the trigger output(TRGO2)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger2(TIM_TypeDef* TIMx, uint32_t TIM_TRGO2Source)
{
 80087b2:	b480      	push	{r7}
 80087b4:	b083      	sub	sp, #12
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
 80087ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO2_SOURCE(TIM_TRGO2Source));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint32_t)~TIM_CR2_MMS2;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGO2Source;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	685a      	ldr	r2, [r3, #4]
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	431a      	orrs	r2, r3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	605a      	str	r2, [r3, #4]
}
 80087d4:	bf00      	nop
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <TIM_SelectSlaveMode>:
  *                                                      reinitializes the counter, generates an update 
  *                                                      of the registers and starts the counter.
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint32_t TIM_SlaveMode)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint32_t)~TIM_SMCR_SMS;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	689b      	ldr	r3, [r3, #8]
 80087ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087f2:	f023 0307 	bic.w	r3, r3, #7
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	6093      	str	r3, [r2, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= (uint32_t)TIM_SlaveMode;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	689a      	ldr	r2, [r3, #8]
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	431a      	orrs	r2, r3
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	609a      	str	r2, [r3, #8]
}
 8008806:	bf00      	nop
 8008808:	370c      	adds	r7, #12
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr

08008812 <TIM_SelectMasterSlaveMode>:
  *                                             and its slaves (through TRGO)
  *            @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
 8008812:	b480      	push	{r7}
 8008814:	b083      	sub	sp, #12
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
 800881a:	460b      	mov	r3, r1
 800881c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	689a      	ldr	r2, [r3, #8]
 8008822:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8008826:	4013      	ands	r3, r2
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	6093      	str	r3, [r2, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	689a      	ldr	r2, [r3, #8]
 8008830:	887b      	ldrh	r3, [r7, #2]
 8008832:	431a      	orrs	r2, r3
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	609a      	str	r2, [r3, #8]
}
 8008838:	bf00      	nop
 800883a:	370c      	adds	r7, #12
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr

08008844 <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8008844:	b480      	push	{r7}
 8008846:	b087      	sub	sp, #28
 8008848:	af00      	add	r7, sp, #0
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	4608      	mov	r0, r1
 800884e:	4611      	mov	r1, r2
 8008850:	461a      	mov	r2, r3
 8008852:	4603      	mov	r3, r0
 8008854:	817b      	strh	r3, [r7, #10]
 8008856:	460b      	mov	r3, r1
 8008858:	813b      	strh	r3, [r7, #8]
 800885a:	4613      	mov	r3, r2
 800885c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 800885e:	2300      	movs	r3, #0
 8008860:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	689b      	ldr	r3, [r3, #8]
 8008866:	82fb      	strh	r3, [r7, #22]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8008868:	8afb      	ldrh	r3, [r7, #22]
 800886a:	b2db      	uxtb	r3, r3
 800886c:	82fb      	strh	r3, [r7, #22]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 800886e:	88fb      	ldrh	r3, [r7, #6]
 8008870:	021b      	lsls	r3, r3, #8
 8008872:	b29a      	uxth	r2, r3
 8008874:	893b      	ldrh	r3, [r7, #8]
 8008876:	4313      	orrs	r3, r2
 8008878:	b29a      	uxth	r2, r3
 800887a:	897b      	ldrh	r3, [r7, #10]
 800887c:	4313      	orrs	r3, r2
 800887e:	b29a      	uxth	r2, r3
 8008880:	8afb      	ldrh	r3, [r7, #22]
 8008882:	4313      	orrs	r3, r2
 8008884:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008886:	8afa      	ldrh	r2, [r7, #22]
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	609a      	str	r2, [r3, #8]
}
 800888c:	bf00      	nop
 800888e:	371c      	adds	r7, #28
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8008898:	b480      	push	{r7}
 800889a:	b087      	sub	sp, #28
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	4608      	mov	r0, r1
 80088a2:	4611      	mov	r1, r2
 80088a4:	461a      	mov	r2, r3
 80088a6:	4603      	mov	r3, r0
 80088a8:	817b      	strh	r3, [r7, #10]
 80088aa:	460b      	mov	r3, r1
 80088ac:	813b      	strh	r3, [r7, #8]
 80088ae:	4613      	mov	r3, r2
 80088b0:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 80088b2:	2300      	movs	r3, #0
 80088b4:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
 80088b6:	2300      	movs	r3, #0
 80088b8:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
 80088ba:	2300      	movs	r3, #0
 80088bc:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	82fb      	strh	r3, [r7, #22]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	699b      	ldr	r3, [r3, #24]
 80088c8:	82bb      	strh	r3, [r7, #20]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	6a1b      	ldr	r3, [r3, #32]
 80088ce:	827b      	strh	r3, [r7, #18]

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 80088d0:	8afb      	ldrh	r3, [r7, #22]
 80088d2:	f023 0307 	bic.w	r3, r3, #7
 80088d6:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
 80088d8:	8afa      	ldrh	r2, [r7, #22]
 80088da:	897b      	ldrh	r3, [r7, #10]
 80088dc:	4313      	orrs	r3, r2
 80088de:	82fb      	strh	r3, [r7, #22]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 80088e0:	8abb      	ldrh	r3, [r7, #20]
 80088e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088e6:	f023 0303 	bic.w	r3, r3, #3
 80088ea:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 80088ec:	8abb      	ldrh	r3, [r7, #20]
 80088ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088f2:	f043 0301 	orr.w	r3, r3, #1
 80088f6:	82bb      	strh	r3, [r7, #20]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 80088f8:	8a7b      	ldrh	r3, [r7, #18]
 80088fa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80088fe:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8008900:	88fb      	ldrh	r3, [r7, #6]
 8008902:	011b      	lsls	r3, r3, #4
 8008904:	b29a      	uxth	r2, r3
 8008906:	893b      	ldrh	r3, [r7, #8]
 8008908:	4313      	orrs	r3, r2
 800890a:	b29a      	uxth	r2, r3
 800890c:	8a7b      	ldrh	r3, [r7, #18]
 800890e:	4313      	orrs	r3, r2
 8008910:	827b      	strh	r3, [r7, #18]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008912:	8afa      	ldrh	r2, [r7, #22]
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8008918:	8aba      	ldrh	r2, [r7, #20]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800891e:	8a7a      	ldrh	r2, [r7, #18]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	621a      	str	r2, [r3, #32]
}
 8008924:	bf00      	nop
 8008926:	371c      	adds	r7, #28
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr

08008930 <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8008930:	b480      	push	{r7}
 8008932:	b083      	sub	sp, #12
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	460b      	mov	r3, r1
 800893a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800893c:	78fb      	ldrb	r3, [r7, #3]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d006      	beq.n	8008950 <TIM_SelectHallSensor+0x20>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	605a      	str	r2, [r3, #4]
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
  }
}
 800894e:	e006      	b.n	800895e <TIM_SelectHallSensor+0x2e>
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	685a      	ldr	r2, [r3, #4]
 8008954:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8008958:	4013      	ands	r3, r2
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	6053      	str	r3, [r2, #4]
}
 800895e:	bf00      	nop
 8008960:	370c      	adds	r7, #12
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr

0800896a <TIM_RemapConfig>:
  *            @arg TIM20_ADC4_AWDG2: TIM20 ETR is connected to ADC4 AWDG2.
  *            @arg TIM20_ADC4_AWDG3: TIM20 ETR is connected to ADC4 AWDG3.   
  * @retval : None
  */
void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap)
{
 800896a:	b480      	push	{r7}
 800896c:	b083      	sub	sp, #12
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
 8008972:	460b      	mov	r3, r1
 8008974:	807b      	strh	r3, [r7, #2]
 /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	887a      	ldrh	r2, [r7, #2]
 800897a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 800897e:	bf00      	nop
 8008980:	370c      	adds	r7, #12
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr

0800898a <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800898a:	b480      	push	{r7}
 800898c:	b087      	sub	sp, #28
 800898e:	af00      	add	r7, sp, #0
 8008990:	60f8      	str	r0, [r7, #12]
 8008992:	4608      	mov	r0, r1
 8008994:	4611      	mov	r1, r2
 8008996:	461a      	mov	r2, r3
 8008998:	4603      	mov	r3, r0
 800899a:	817b      	strh	r3, [r7, #10]
 800899c:	460b      	mov	r3, r1
 800899e:	813b      	strh	r3, [r7, #8]
 80089a0:	4613      	mov	r3, r2
 80089a2:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpccmr1 = 0, tmpccer = 0;
 80089a4:	2300      	movs	r3, #0
 80089a6:	617b      	str	r3, [r7, #20]
 80089a8:	2300      	movs	r3, #0
 80089aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC1E;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	6a1b      	ldr	r3, [r3, #32]
 80089b0:	f023 0201 	bic.w	r2, r3, #1
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	699b      	ldr	r3, [r3, #24]
 80089bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	6a1b      	ldr	r3, [r3, #32]
 80089c2:	613b      	str	r3, [r7, #16]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC1S) & ((uint32_t)~TIM_CCMR1_IC1F);
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 80089ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (uint32_t)(TIM_ICSelection | (uint32_t)((uint32_t)TIM_ICFilter << 4));
 80089cc:	893a      	ldrh	r2, [r7, #8]
 80089ce:	88fb      	ldrh	r3, [r7, #6]
 80089d0:	011b      	lsls	r3, r3, #4
 80089d2:	4313      	orrs	r3, r2
 80089d4:	697a      	ldr	r2, [r7, #20]
 80089d6:	4313      	orrs	r3, r2
 80089d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint32_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	f023 030a 	bic.w	r3, r3, #10
 80089e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (uint32_t)(TIM_ICPolarity | (uint32_t)TIM_CCER_CC1E);
 80089e2:	897b      	ldrh	r3, [r7, #10]
 80089e4:	f043 0301 	orr.w	r3, r3, #1
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	461a      	mov	r2, r3
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	4313      	orrs	r3, r2
 80089f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	697a      	ldr	r2, [r7, #20]
 80089f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	693a      	ldr	r2, [r7, #16]
 80089fc:	621a      	str	r2, [r3, #32]
}
 80089fe:	bf00      	nop
 8008a00:	371c      	adds	r7, #28
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr

08008a0a <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8008a0a:	b480      	push	{r7}
 8008a0c:	b089      	sub	sp, #36	; 0x24
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	60f8      	str	r0, [r7, #12]
 8008a12:	4608      	mov	r0, r1
 8008a14:	4611      	mov	r1, r2
 8008a16:	461a      	mov	r2, r3
 8008a18:	4603      	mov	r3, r0
 8008a1a:	817b      	strh	r3, [r7, #10]
 8008a1c:	460b      	mov	r3, r1
 8008a1e:	813b      	strh	r3, [r7, #8]
 8008a20:	4613      	mov	r3, r2
 8008a22:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 8008a24:	2300      	movs	r3, #0
 8008a26:	61fb      	str	r3, [r7, #28]
 8008a28:	2300      	movs	r3, #0
 8008a2a:	61bb      	str	r3, [r7, #24]
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	6a1a      	ldr	r2, [r3, #32]
 8008a34:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8008a38:	4013      	ands	r3, r2
 8008a3a:	68fa      	ldr	r2, [r7, #12]
 8008a3c:	6213      	str	r3, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	699b      	ldr	r3, [r3, #24]
 8008a42:	61fb      	str	r3, [r7, #28]
  tmpccer = TIMx->CCER;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	6a1b      	ldr	r3, [r3, #32]
 8008a48:	61bb      	str	r3, [r7, #24]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8008a4a:	897b      	ldrh	r3, [r7, #10]
 8008a4c:	011b      	lsls	r3, r3, #4
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	617b      	str	r3, [r7, #20]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC2S) & ((uint32_t)~TIM_CCMR1_IC2F);
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	f423 4373 	bic.w	r3, r3, #62208	; 0xf300
 8008a58:	61fb      	str	r3, [r7, #28]
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICFilter << 12);
 8008a5a:	88fb      	ldrh	r3, [r7, #6]
 8008a5c:	031b      	lsls	r3, r3, #12
 8008a5e:	69fa      	ldr	r2, [r7, #28]
 8008a60:	4313      	orrs	r3, r2
 8008a62:	61fb      	str	r3, [r7, #28]
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICSelection << 8);
 8008a64:	893b      	ldrh	r3, [r7, #8]
 8008a66:	021b      	lsls	r3, r3, #8
 8008a68:	69fa      	ldr	r2, [r7, #28]
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	61fb      	str	r3, [r7, #28]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a6e:	69ba      	ldr	r2, [r7, #24]
 8008a70:	f64f 735f 	movw	r3, #65375	; 0xff5f
 8008a74:	4013      	ands	r3, r2
 8008a76:	61bb      	str	r3, [r7, #24]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	f043 0310 	orr.w	r3, r3, #16
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	461a      	mov	r2, r3
 8008a84:	69bb      	ldr	r3, [r7, #24]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	61bb      	str	r3, [r7, #24]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	69fa      	ldr	r2, [r7, #28]
 8008a8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	69ba      	ldr	r2, [r7, #24]
 8008a94:	621a      	str	r2, [r3, #32]
}
 8008a96:	bf00      	nop
 8008a98:	3724      	adds	r7, #36	; 0x24
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr

08008aa2 <TI3_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8008aa2:	b480      	push	{r7}
 8008aa4:	b087      	sub	sp, #28
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	60f8      	str	r0, [r7, #12]
 8008aaa:	4608      	mov	r0, r1
 8008aac:	4611      	mov	r1, r2
 8008aae:	461a      	mov	r2, r3
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	817b      	strh	r3, [r7, #10]
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	813b      	strh	r3, [r7, #8]
 8008ab8:	4613      	mov	r3, r2
 8008aba:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8008abc:	2300      	movs	r3, #0
 8008abe:	82fb      	strh	r3, [r7, #22]
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	82bb      	strh	r3, [r7, #20]
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	6a1a      	ldr	r2, [r3, #32]
 8008acc:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8008ad0:	4013      	ands	r3, r2
 8008ad2:	68fa      	ldr	r2, [r7, #12]
 8008ad4:	6213      	str	r3, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	69db      	ldr	r3, [r3, #28]
 8008ada:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	6a1b      	ldr	r3, [r3, #32]
 8008ae0:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 8008ae2:	897b      	ldrh	r3, [r7, #10]
 8008ae4:	021b      	lsls	r3, r3, #8
 8008ae6:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8008ae8:	8afb      	ldrh	r3, [r7, #22]
 8008aea:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8008aee:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8008af0:	88fb      	ldrh	r3, [r7, #6]
 8008af2:	011b      	lsls	r3, r3, #4
 8008af4:	b29a      	uxth	r2, r3
 8008af6:	893b      	ldrh	r3, [r7, #8]
 8008af8:	4313      	orrs	r3, r2
 8008afa:	b29a      	uxth	r2, r3
 8008afc:	8afb      	ldrh	r3, [r7, #22]
 8008afe:	4313      	orrs	r3, r2
 8008b00:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008b02:	8abb      	ldrh	r3, [r7, #20]
 8008b04:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008b08:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8008b0a:	8a7a      	ldrh	r2, [r7, #18]
 8008b0c:	8abb      	ldrh	r3, [r7, #20]
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b16:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008b18:	8afa      	ldrh	r2, [r7, #22]
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008b1e:	8aba      	ldrh	r2, [r7, #20]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	621a      	str	r2, [r3, #32]
}
 8008b24:	bf00      	nop
 8008b26:	371c      	adds	r7, #28
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr

08008b30 <TI4_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b087      	sub	sp, #28
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	4608      	mov	r0, r1
 8008b3a:	4611      	mov	r1, r2
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	4603      	mov	r3, r0
 8008b40:	817b      	strh	r3, [r7, #10]
 8008b42:	460b      	mov	r3, r1
 8008b44:	813b      	strh	r3, [r7, #8]
 8008b46:	4613      	mov	r3, r2
 8008b48:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	82fb      	strh	r3, [r7, #22]
 8008b4e:	2300      	movs	r3, #0
 8008b50:	82bb      	strh	r3, [r7, #20]
 8008b52:	2300      	movs	r3, #0
 8008b54:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	6a1a      	ldr	r2, [r3, #32]
 8008b5a:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8008b5e:	4013      	ands	r3, r2
 8008b60:	68fa      	ldr	r2, [r7, #12]
 8008b62:	6213      	str	r3, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	69db      	ldr	r3, [r3, #28]
 8008b68:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	6a1b      	ldr	r3, [r3, #32]
 8008b6e:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 8008b70:	897b      	ldrh	r3, [r7, #10]
 8008b72:	031b      	lsls	r3, r3, #12
 8008b74:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8008b76:	8afb      	ldrh	r3, [r7, #22]
 8008b78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b7c:	051b      	lsls	r3, r3, #20
 8008b7e:	0d1b      	lsrs	r3, r3, #20
 8008b80:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8008b82:	893b      	ldrh	r3, [r7, #8]
 8008b84:	021b      	lsls	r3, r3, #8
 8008b86:	b29a      	uxth	r2, r3
 8008b88:	8afb      	ldrh	r3, [r7, #22]
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8008b8e:	88fb      	ldrh	r3, [r7, #6]
 8008b90:	031b      	lsls	r3, r3, #12
 8008b92:	b29a      	uxth	r2, r3
 8008b94:	8afb      	ldrh	r3, [r7, #22]
 8008b96:	4313      	orrs	r3, r2
 8008b98:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008b9a:	8abb      	ldrh	r3, [r7, #20]
 8008b9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ba0:	045b      	lsls	r3, r3, #17
 8008ba2:	0c5b      	lsrs	r3, r3, #17
 8008ba4:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8008ba6:	8a7a      	ldrh	r2, [r7, #18]
 8008ba8:	8abb      	ldrh	r3, [r7, #20]
 8008baa:	4313      	orrs	r3, r2
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008bb2:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008bb4:	8afa      	ldrh	r2, [r7, #22]
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008bba:	8aba      	ldrh	r2, [r7, #20]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	621a      	str	r2, [r3, #32]
}
 8008bc0:	bf00      	nop
 8008bc2:	371c      	adds	r7, #28
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr

08008bcc <WWDG_DeInit>:
  * @brief  Deinitializes the WWDG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void WWDG_DeInit(void)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	af00      	add	r7, sp, #0
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
 8008bd0:	2101      	movs	r1, #1
 8008bd2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008bd6:	f7fd fcf9 	bl	80065cc <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
 8008bda:	2100      	movs	r1, #0
 8008bdc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008be0:	f7fd fcf4 	bl	80065cc <RCC_APB1PeriphResetCmd>
}
 8008be4:	bf00      	nop
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <WWDG_SetPrescaler>:
  *     @arg WWDG_Prescaler_4: WWDG counter clock = (PCLK1/4096)/4
  *     @arg WWDG_Prescaler_8: WWDG counter clock = (PCLK1/4096)/8
  * @retval None
  */
void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b085      	sub	sp, #20
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
  /* Clear WDGTB[1:0] bits */
  tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
 8008bf4:	4b08      	ldr	r3, [pc, #32]	; (8008c18 <WWDG_SetPrescaler+0x30>)
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 8008bfc:	60fb      	str	r3, [r7, #12]
  /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
  tmpreg |= WWDG_Prescaler;
 8008bfe:	68fa      	ldr	r2, [r7, #12]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	4313      	orrs	r3, r2
 8008c04:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  WWDG->CFR = tmpreg;
 8008c06:	4a04      	ldr	r2, [pc, #16]	; (8008c18 <WWDG_SetPrescaler+0x30>)
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	6053      	str	r3, [r2, #4]
}
 8008c0c:	bf00      	nop
 8008c0e:	3714      	adds	r7, #20
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr
 8008c18:	40002c00 	.word	0x40002c00

08008c1c <WWDG_SetWindowValue>:
  * @param  WindowValue: specifies the window value to be compared to the downcounter.
  *   This parameter value must be lower than 0x80.
  * @retval None
  */
void WWDG_SetWindowValue(uint8_t WindowValue)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b085      	sub	sp, #20
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	4603      	mov	r3, r0
 8008c24:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t tmpreg = 0;
 8008c26:	2300      	movs	r3, #0
 8008c28:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_MASK;
 8008c2a:	4b0a      	ldr	r3, [pc, #40]	; (8008c54 <WWDG_SetWindowValue+0x38>)
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008c32:	60fb      	str	r3, [r7, #12]

  /* Set W[6:0] bits according to WindowValue value */
  tmpreg |= WindowValue & (uint32_t) BIT_MASK;
 8008c34:	79fb      	ldrb	r3, [r7, #7]
 8008c36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  WWDG->CFR = tmpreg;
 8008c40:	4a04      	ldr	r2, [pc, #16]	; (8008c54 <WWDG_SetWindowValue+0x38>)
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	6053      	str	r3, [r2, #4]
}
 8008c46:	bf00      	nop
 8008c48:	3714      	adds	r7, #20
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop
 8008c54:	40002c00 	.word	0x40002c00

08008c58 <WWDG_EnableIT>:
  * @note   Once enabled this interrupt cannot be disabled except by a system reset. 
  * @param  None
  * @retval None
  */
void WWDG_EnableIT(void)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	af00      	add	r7, sp, #0
  WWDG->CFR |= WWDG_CFR_EWI;
 8008c5c:	4a05      	ldr	r2, [pc, #20]	; (8008c74 <WWDG_EnableIT+0x1c>)
 8008c5e:	4b05      	ldr	r3, [pc, #20]	; (8008c74 <WWDG_EnableIT+0x1c>)
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008c66:	6053      	str	r3, [r2, #4]
}
 8008c68:	bf00      	nop
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr
 8008c72:	bf00      	nop
 8008c74:	40002c00 	.word	0x40002c00

08008c78 <WWDG_SetCounter>:
  *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
  *   an immediate reset).  
  * @retval None
  */
void WWDG_SetCounter(uint8_t Counter)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	4603      	mov	r3, r0
 8008c80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  /* Write to T[6:0] bits to configure the counter value, no need to do
     a read-modify-write; writing a 0 to WDGA bit does nothing */
  WWDG->CR = Counter & BIT_MASK;
 8008c82:	4a05      	ldr	r2, [pc, #20]	; (8008c98 <WWDG_SetCounter+0x20>)
 8008c84:	79fb      	ldrb	r3, [r7, #7]
 8008c86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c8a:	6013      	str	r3, [r2, #0]
}
 8008c8c:	bf00      	nop
 8008c8e:	370c      	adds	r7, #12
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr
 8008c98:	40002c00 	.word	0x40002c00

08008c9c <WWDG_Enable>:
  *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
  *   an immediate reset).
  * @retval None
  */
void WWDG_Enable(uint8_t Counter)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  WWDG->CR = WWDG_CR_WDGA | Counter;
 8008ca6:	4a06      	ldr	r2, [pc, #24]	; (8008cc0 <WWDG_Enable+0x24>)
 8008ca8:	79fb      	ldrb	r3, [r7, #7]
 8008caa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	6013      	str	r3, [r2, #0]
}
 8008cb2:	bf00      	nop
 8008cb4:	370c      	adds	r7, #12
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbc:	4770      	bx	lr
 8008cbe:	bf00      	nop
 8008cc0:	40002c00 	.word	0x40002c00

08008cc4 <WWDG_GetFlagStatus>:
  * @brief  Checks whether the Early Wakeup interrupt flag is set or not.
  * @param  None
  * @retval The new state of the Early Wakeup interrupt flag (SET or RESET).
  */
FlagStatus WWDG_GetFlagStatus(void)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b083      	sub	sp, #12
 8008cc8:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	71fb      	strb	r3, [r7, #7]
    
  if ((WWDG->SR) != (uint32_t)RESET)
 8008cce:	4b08      	ldr	r3, [pc, #32]	; (8008cf0 <WWDG_GetFlagStatus+0x2c>)
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d002      	beq.n	8008cdc <WWDG_GetFlagStatus+0x18>
  {
    bitstatus = SET;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	71fb      	strb	r3, [r7, #7]
 8008cda:	e001      	b.n	8008ce0 <WWDG_GetFlagStatus+0x1c>
  }
  else
  {
    bitstatus = RESET;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	71fb      	strb	r3, [r7, #7]
  }
  return bitstatus;
 8008ce0:	79fb      	ldrb	r3, [r7, #7]
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	370c      	adds	r7, #12
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr
 8008cee:	bf00      	nop
 8008cf0:	40002c00 	.word	0x40002c00

08008cf4 <WWDG_ClearFlag>:
  * @brief  Clears Early Wakeup interrupt flag.
  * @param  None
  * @retval None
  */
void WWDG_ClearFlag(void)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	af00      	add	r7, sp, #0
  WWDG->SR = (uint32_t)RESET;
 8008cf8:	4b03      	ldr	r3, [pc, #12]	; (8008d08 <WWDG_ClearFlag+0x14>)
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	609a      	str	r2, [r3, #8]
}
 8008cfe:	bf00      	nop
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr
 8008d08:	40002c00 	.word	0x40002c00

08008d0c <main>:
#include <stm32f30x_conf.h>
#include <stm32f30x_gpio.h>
#include <stm32f30x_dac.h>

int main(void)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b086      	sub	sp, #24
 8008d10:	af00      	add	r7, sp, #0

GPIO_InitTypeDef GPIO_InitStructure;
DAC_InitTypeDef DAC_InitStructure;

SystemInit();
 8008d12:	f7f7 fa63 	bl	80001dc <SystemInit>

RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 8008d16:	2101      	movs	r1, #1
 8008d18:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8008d1c:	f7fd fbf6 	bl	800650c <RCC_APB1PeriphClockCmd>
RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8008d20:	2101      	movs	r1, #1
 8008d22:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8008d26:	f7fd fbb1 	bl	800648c <RCC_AHBPeriphClockCmd>


GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8008d2a:	2303      	movs	r3, #3
 8008d2c:	753b      	strb	r3, [r7, #20]
GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 8008d2e:	2310      	movs	r3, #16
 8008d30:	613b      	str	r3, [r7, #16]

// DAC_DeInit(&DAC);
DAC_StructInit(&DAC_InitStructure);
 8008d32:	463b      	mov	r3, r7
 8008d34:	4618      	mov	r0, r3
 8008d36:	f7f7 fbcf 	bl	80004d8 <DAC_StructInit>
//DAC_InitStructure.DAC_Buffer_Switch = DAC_BufferSwitch_Disable;    //DAC_OutputBuffer_Disable;
//DAC_InitStructure.DAC_Trigger = DAC_Trigger_None;
//DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;


GPIO_Init(GPIOA, &GPIO_InitStructure);
 8008d3a:	f107 0310 	add.w	r3, r7, #16
 8008d3e:	4619      	mov	r1, r3
 8008d40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008d44:	f7f9 f9c2 	bl	80020cc <GPIO_Init>
DAC_Init(DAC1,DAC_Channel_1, &DAC_InitStructure);
 8008d48:	463b      	mov	r3, r7
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	4807      	ldr	r0, [pc, #28]	; (8008d6c <main+0x60>)
 8008d50:	f7f7 fb90 	bl	8000474 <DAC_Init>


DAC_SetChannel1Data(DAC1,DAC_Align_12b_R, 868);// 0x7FF);
 8008d54:	f44f 7259 	mov.w	r2, #868	; 0x364
 8008d58:	2100      	movs	r1, #0
 8008d5a:	4804      	ldr	r0, [pc, #16]	; (8008d6c <main+0x60>)
 8008d5c:	f7f7 fc5c 	bl	8000618 <DAC_SetChannel1Data>

DAC_Cmd(DAC1,DAC_Channel_1, ENABLE);
 8008d60:	2201      	movs	r2, #1
 8008d62:	2100      	movs	r1, #0
 8008d64:	4801      	ldr	r0, [pc, #4]	; (8008d6c <main+0x60>)
 8008d66:	f7f7 fbcd 	bl	8000504 <DAC_Cmd>

while(1){};
 8008d6a:	e7fe      	b.n	8008d6a <main+0x5e>
 8008d6c:	40007400 	.word	0x40007400

08008d70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
	ldr   sp, =_estack      /* Set stack pointer */
 8008d70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008da8 <LoopForever+0x2>
  
/* Copy the data segment initializers from flash to SRAM */
	movs	r1, #0
 8008d74:	2100      	movs	r1, #0
	b	LoopCopyDataInit
 8008d76:	e003      	b.n	8008d80 <LoopCopyDataInit>

08008d78 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8008d78:	4b0c      	ldr	r3, [pc, #48]	; (8008dac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8008d7a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8008d7c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8008d7e:	3104      	adds	r1, #4

08008d80 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8008d80:	480b      	ldr	r0, [pc, #44]	; (8008db0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8008d82:	4b0c      	ldr	r3, [pc, #48]	; (8008db4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8008d84:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8008d86:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8008d88:	d3f6      	bcc.n	8008d78 <CopyDataInit>
	ldr	r2, =_sbss
 8008d8a:	4a0b      	ldr	r2, [pc, #44]	; (8008db8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8008d8c:	e002      	b.n	8008d94 <LoopFillZerobss>

08008d8e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8008d8e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8008d90:	f842 3b04 	str.w	r3, [r2], #4

08008d94 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8008d94:	4b09      	ldr	r3, [pc, #36]	; (8008dbc <LoopForever+0x16>)
	cmp	r2, r3
 8008d96:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8008d98:	d3f9      	bcc.n	8008d8e <FillZerobss>

/* Call the clock system initialization function.*/
	bl  SystemInit
 8008d9a:	f7f7 fa1f 	bl	80001dc <SystemInit>
/* Call static constructors */
	bl __libc_init_array
 8008d9e:	f000 f811 	bl	8008dc4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008da2:	f7ff ffb3 	bl	8008d0c <main>

08008da6 <LoopForever>:

LoopForever:
    b LoopForever
 8008da6:	e7fe      	b.n	8008da6 <LoopForever>
	ldr   sp, =_estack      /* Set stack pointer */
 8008da8:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 8008dac:	08008e30 	.word	0x08008e30
	ldr	r0, =_sdata
 8008db0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8008db4:	20000060 	.word	0x20000060
	ldr	r2, =_sbss
 8008db8:	20000060 	.word	0x20000060
	ldr	r3, = _ebss
 8008dbc:	2000007c 	.word	0x2000007c

08008dc0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008dc0:	e7fe      	b.n	8008dc0 <ADC1_IRQHandler>
	...

08008dc4 <__libc_init_array>:
 8008dc4:	b570      	push	{r4, r5, r6, lr}
 8008dc6:	4e0d      	ldr	r6, [pc, #52]	; (8008dfc <__libc_init_array+0x38>)
 8008dc8:	4c0d      	ldr	r4, [pc, #52]	; (8008e00 <__libc_init_array+0x3c>)
 8008dca:	1ba4      	subs	r4, r4, r6
 8008dcc:	10a4      	asrs	r4, r4, #2
 8008dce:	2500      	movs	r5, #0
 8008dd0:	42a5      	cmp	r5, r4
 8008dd2:	d109      	bne.n	8008de8 <__libc_init_array+0x24>
 8008dd4:	4e0b      	ldr	r6, [pc, #44]	; (8008e04 <__libc_init_array+0x40>)
 8008dd6:	4c0c      	ldr	r4, [pc, #48]	; (8008e08 <__libc_init_array+0x44>)
 8008dd8:	f000 f81a 	bl	8008e10 <_init>
 8008ddc:	1ba4      	subs	r4, r4, r6
 8008dde:	10a4      	asrs	r4, r4, #2
 8008de0:	2500      	movs	r5, #0
 8008de2:	42a5      	cmp	r5, r4
 8008de4:	d105      	bne.n	8008df2 <__libc_init_array+0x2e>
 8008de6:	bd70      	pop	{r4, r5, r6, pc}
 8008de8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008dec:	4798      	blx	r3
 8008dee:	3501      	adds	r5, #1
 8008df0:	e7ee      	b.n	8008dd0 <__libc_init_array+0xc>
 8008df2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008df6:	4798      	blx	r3
 8008df8:	3501      	adds	r5, #1
 8008dfa:	e7f2      	b.n	8008de2 <__libc_init_array+0x1e>
 8008dfc:	08008e28 	.word	0x08008e28
 8008e00:	08008e28 	.word	0x08008e28
 8008e04:	08008e28 	.word	0x08008e28
 8008e08:	08008e2c 	.word	0x08008e2c

08008e0c <__EH_FRAME_BEGIN__>:
 8008e0c:	00000000                                ....

08008e10 <_init>:
 8008e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e12:	bf00      	nop
 8008e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e16:	bc08      	pop	{r3}
 8008e18:	469e      	mov	lr, r3
 8008e1a:	4770      	bx	lr

08008e1c <_fini>:
 8008e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e1e:	bf00      	nop
 8008e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e22:	bc08      	pop	{r3}
 8008e24:	469e      	mov	lr, r3
 8008e26:	4770      	bx	lr
